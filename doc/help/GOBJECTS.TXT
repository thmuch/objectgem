screen("GObjects":sensitive,"ObjectGEM":sensitive,"OGEM":sensitive)
ObjectGEM 1.20 fÅr PurePascal ab Version 1.1
------------------------------------------------------------------

    \#Allgemeine Hinweise\#

		\#Felder\#
		\#Konstanten\#
		\#Methoden\#
		\#Objekte\# (\#Hierarchie\#)
		\#Prozeduren und Funktionen\#
		\#Records\#
		\#Typen\#
		\link("GO-Units")Units\#
		\#Variablen\#


Copyright Ω1992-94 by Softdesign Computer Software
											 c/o Thomas Much, Gerwigstraûe 46,
											 76131 Karlsruhe, Tel. (0721) 62 28 41
											 EMail: UK48@ibm3090.rz.uni-karlsruhe.de
											        Thomas Much @ KA2  (MausNet)


ObjectGEM Online-Hilfe vom 22.11.1994

\end


screen("GO-Units")
Units                                                    \#ObjectGEM\#
------------------------------------------------------------------

		\#Objects\#
		\#ODialogs\#
		\#OProcs\#
		\#OStdDlgs\#
		\#OStdWnds\#
		\#OTypes\#
		\#OValidat\#
		\#OWindows\#

\end


screen("Objects":sensitive)
Unit Objects                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TObject\#
	\#TCollection\#
	\#TSortedCollection\#
	\#TStrCollection\#
	\#TStringCollection\#


Querverweise	\link("GO-Units")Units\#

\end


screen("ODialogs":sensitive)
Unit ODialogs                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox\#
	\#TComboBox\#
	\#TGroupBox\#
	\#TRadioButton\#
	\#TScrollBar\#
	\#TTriState\#


Querverweise	\link("GO-Units")Units\#

\end


screen("OProcs":sensitive)
Unit OProcs                                              \#ObjectGEM\#
------------------------------------------------------------------

Die Unit OProcs enthÑlt die meisten der unter

	\#Prozeduren und Funktionen\#

aufgefÅhrten Routinen.


Querverweise	\link("GO-Units")Units\#

\end


screen("OStdDlgs":sensitive)
Unit OStdDlgs                                            \#ObjectGEM\#
------------------------------------------------------------------

Die Unit OStdDlgs wird demnÑchst die Objekte TFileDialog,
TColorDialog und TFontDialog enthalten. Im Moment sind diese
aber noch nicht effektiv gemacht.


Querverweise	\link("GO-Units")Units\#

\end


screen("OStdWnds":sensitive)
Unit OStdWnds                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TTextWindow\#

Die Objekte TEditWindow, TFileWindow, THelpWindow und TIndicator-
Window, die auch zu dieser Unit gehîren, sind im Moment noch nicht
effektiv gemacht.


Querverweise	\link("GO-Units")Units\#

\end


screen("OTypes":sensitive)
Unit OTypes                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#Konstanten\#
	\#Records\#
	\#Typen\#


Querverweise	\link("GO-Units")Units\#

\end


screen("OValidat":sensitive)
Unit OValidat                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TFilterValidator\#
	\#TLookupValidator\#
	\#TPXPictureValidator\#
	\#TRangeValidator\#
	\#TStringLookupValidator\#


Querverweise	\link("GO-Units")Units\#

\end


screen("OWindows":sensitive)
Unit OWindows                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication\#
	\#TButton\#
	\#TClipboard\#
	\#TControl\#
	\#TDialog\#
	\#TEdit\#
	\#TEvent\#
	\#TEventObject\#
	\#TIcon\#
	\#TKey\#
	\#TKeyMenu\#
	\#TMenu\#
	\#TPopup\#
	\#TScroller\#
	\#TStatic\#
	\#TToolbar\#
	\#TValidator\#
	\#TWindow\#


Die Unit OWindows enthÑlt auûerdem einige der unter

	\#Prozeduren und Funktionen\#

aufgefÅhrten Routinen, zusÑtzlich noch die

	\#Variablen\#.


Querverweise	\link("GO-Units")Units\#

\end


screen("Allgemeine Hinweise")
Allgemeine Hinweise                                      \#ObjectGEM\#
------------------------------------------------------------------

		\link("bhelp")"BubbleHelp"-Hilfesystem\#
		\#Clipboard-Verwaltung\#
		\#Drag&Drop\#
		\#Einbinden der Units\#
		\#Erweiterte Dialogbehandlung\#
		\#Fenster\#
		\#Iconification\#
		\#Interna\#
		\#KompatibilitÑt\#
		\#Popup-MenÅs\#
		\link("Profiles")Profiles (INF-Dateien)\#
		\#Resource-Erstellung\#
		\#Toolbars\#
		\#XAcc- und AV-Protokoll\#

		\#Updates\#

\end


screen("bhelp")
"BubbleHelp"-Hilfesystem                                 \#ObjectGEM\#
------------------------------------------------------------------

Mit dem "BubbleHelp"-Hilfesystem kann sehr leicht eine kontext-
sensitive Hilfe realisiert werden. Dazu kann \#TControl\#-, \#TIcon\#-
und \#TToolbar\#-Objekten (und davon abgeleiteten Objekten) in der
jeweiligen Init-Methode ein String Åbergeben werden, der von der
Dialogbehandlung ausgewertet wird. Im weiteren braucht dieser
Hilfstext nicht weiter beachtet zu werden, einzig interessant
ist noch die Methode \#SetHelp\# zum nachtrÑglichen éndern des
Textes.

Wenn man in einem Dialog den Mauscursor auf ein solches Dialog-
element bringt und die rechte Maustaste oder <Help> drÅckt, er-
scheint an der Mausposition eine Sprechblase mit dem festge-
legten Hilfstext. Die Sprechblase bleibt mind. eine halbe Sekunde
(ObjectGEM-intern festgelegt) sichtbar, danach kann sie mit einem
Mausklick oder einem Tastendruck geschlossen werden.

FÅr die kontextsensitive Hilfe auûerhalb von Dialogen steht die
Methode \#TApplication.BubbleHelp\# zur VerfÅgung. Dort ist auch der
Aufbau der Hilfe-Strings beschrieben.

In Zukunft wird es evtl. einen sog. "stÑndigen Hilfemodus" geben,
bei dem eine Sprechblase erscheint, wenn sich der Mauscursor eine
gewisse Zeit Åber einem Dialogelement befindet (wie beim Mac
System 7). ObjectGEM legt dafÅr bereits jetzt den 'BHLP'-Cookie
an, dessen Wert sich aus der Verzîgerung bis zur Aktivierung der
Hilfe (unterer integer, -1=Hilfemodus aus) und der Mindestzeit
fÅr die Sichtbarkeit der Sprechblase (oberes word) zusammensetzt.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Clipboard-Verwaltung")
Clipboard-Verwaltung                                     \#ObjectGEM\#
------------------------------------------------------------------

Die Objekte \#TEdit\#, \#TWindow\# und \#TApplication\# besitzen das Feld
\#Clipboard\#, das auf ein \#TClipboard\#-Objekt zeigt. Normalerweise gibt
es nur ein globales Clipboard-Objekt, falls aber eine Speziali-
sierung notwendig sein sollte, steht die Methode \#GetClipboard\# zur
VerfÅgung.

Um auf das Clipboard zugreifen zu kînnen (lesend oder schreibend),
muû man es mit \#OpenClipboard\# îffnen. Von \#GetClipboardFilename\# er-
hÑlt man eine komplette Pfadangabe incl. Dateinamen fÅr das Klemm-
brett - nur die Extension fehlt noch (z.B. 'C:\\CLIPBRD\\SCRAP.').
Mit \#IsClipboardFormatAvailable\# und \#GetPriorityClipboardFormat\#
kann man komfortabel nach bestimmten Dateitypen im Klemmbrett
suchen, ansonsten kann man nun mit den "normalen" Dateifunktionen
auf das Klemmbrett zugreifen. Abschlieûend muû man das Klemmbrett
mit \#CloseClipboard\# wieder schlieûen und damit freigeben.

Hat man den Inhalt des Klemmbretts verÑndert, sollte man vorher
noch \#SetClipboardFormat\# aufrufen, damit die beim Schlieûen ver-
schickte \#SC_CHANGED\#-Message korrekt gesetzt werden kann.

WICHTIG: Es kann immer nur _ein_ TClipboard-Objekt Zugriff auf
das Klemmbrett haben. Wenn also ein Zugriff immer bereits beim
ôffnen scheitert, kann es sein, daû bei einem anderen Clipboard-
Objekt das Schlieûen vergessen wurde.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Drag&Drop")
Drag&Drop                                                \#ObjectGEM\#
------------------------------------------------------------------

In ObjectGEM ist das Drag&Drop-Protokoll in der Version 1.1 im-
plementiert. Der Drag&Drop-Mechanismus steht nur unter \#MultiTOS\#
zur verfÅgung.

Wenn ein Programm Drag&Drop unterstÅtzen soll, mÅssen zumindest
die Methoden \#DDHeaderReply\# und \#DDReadData\# (bzw. \#DDReadArgs\#) Åber-
schrieben werden. Das Einlesen der Daten muû in letztgenannter
Methode selbst vorgenommen werden. Da wÑhrend des Drag&Drop-
Protokolls der Bildschirm nicht blockiert werden darf, erhÑlt
man nach erfolgreicher Kommunikation in der Methode \#DDFinished\#
die Mîglichkeit, die Daten entsprechend auszuwerten.

Wenn der Aufbau der Kommunikation nicht unnîtig in die LÑnge
gezogen werden soll, muû dafÅr die Methode \#DDGetPreferredTypes\#
Åberschrieben werden, in der man die mîglichen Dateitypen ein-
schrÑnken kann.

Soll das Programm auch auf den 'PATH'-Parameter positiv ant-
worten, muû \#DDGetPath\# effektiv gemacht werden.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Einbinden der Units")
Einbinden der Units                                      \#ObjectGEM\#
------------------------------------------------------------------

Die ObjectGEM-Units werden wie gewohnt mit der \#uses\#-Klausel
eingebunden. Dabei sollte folgende Reihenfolge eingehalten
werden (abgesehen von nicht benîtigten Units):

  uses \#Objects\#,
       \#OTypes\#,
       \#OProcs\#,
       \#OWindows\#,
       \#OValidat\#,
       \#ODialogs\#,
       \#OStdDlgs\#,
       \#OStdWnds\#;

Wenn zusÑtzlich noch andere Units eingebunden werden (z.B. Gem,
Tos...), sollten diese _davor_ eingebunden werden, es sei denn,
die Units greifen auf Teile von ObjectGEM zurÅck.

Welche ObjectGEM-Units benîtigt werden, stellt man am besten
mit "try and error" fest. Zuerst wird nur die Unit OWindows
eingebunden, dann mÅssen solange die passenden Units dazuge-
nommen werden, bis der Compiler nicht mehr "meckert".


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Erweiterte Dialogbehandlung")
Erweiterte Dialogbehandlung                              \#ObjectGEM\#
------------------------------------------------------------------

ObjectGEM stellt eine erweiterte Dialogbehandlung zur VerfÅgung.
Folgende Eigenschaften sind zusÑtzlich zu den Åblichen GEM-
Mîglichkeiten vorhanden:

- Der Edit-Cursor kann mit der Maus verschoben werden
- Folgende Tastenkombinationen stehen in einem Edit-Feld zur
  VerfÅgung:
    <Shift>+<Tab>,
    <Cursor hoch>:          geht zum vorherigen Eingabefeld
    <Tab>,
    <Cursor runter>:        geht zum nÑchsten Eingabefeld
    <Cursor links>,
    <Cursor rechts>:        Cursor innerhalb des Feldes bewegen
    <Shift>+<Crs.li.>:      Cursor an Feldanfang
    <Shift>+<Crs.re.>:      Cursor an Feldende
    <ClrHome>,
    <Shift>+<Crs. hoch>:    Cursor auf erstes Eingabefeld
    <Shift>+<ClrHome>,
    <Shift>+<Crs. runter>:  Cursor auf letztes Eingabefeld
    <Backspace>:            Zeichen links vom Cursor lîschen
    <Delete>:               Zeichen rechts vom Cursor lîschen
    <Esc>:                  Feld lîschen
    <Undo>:                 s.u.
- Jedes Eingabefeld, dem ein \#TEdit\#-Objekt zugeordnet ist, merkt
  sich die Position des Edit-Cursors bis zur nÑchsten Aktivie-
  rung. Auûerdem kann mit <Undo> die letzte énderung rÅckgÑngig
  gemacht werden.
- Dialogelemente, bei denen ein Buchstabe unterstrichen angezeigt
  wird, kînnen mit <Alternate>+<unterstrichener Buchstabe> akti-
  viert werden.
- \#TDialog\#-Objekte, bei denen \#cs_WorkBackground\# gesetzt ist (das
  ist die Standard-Einstellung), kînnen auch im Hintergrund
  _bedient_ werden. Um ein solches Dialogfenster wieder in den
  Vordergrund zu holen, muû man einen Doppelklick _rechts_ auf
  den Arbeitsbereich des Fensters ausfÅhren.
- Modale Dialoge kînnen durch Anklicken eines inaktiven Dialog-
  elements (z.B. Text oder der Hintergrund) bei gedrÅckter
  linker Maustaste verschoben werden.
- Bei einem Klick auûerhalb eines modalen Dialogs wird dieser um
  den Mauszeiger zentriert.
- Befindet sich der Mauscursor Åber einem Dialogelement, dem ein
  \#TControl\#-Objekt zugeordnet ist (das sollte bei den meisten der
  Fall sein), kann mit der rechten Maustaste oder mit <Help> die
  sog. \link("bhelp")BubbleHelp\# aufgerufen werden.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Fenster")
Fenster                                                  \#ObjectGEM\#
------------------------------------------------------------------

Mit \#cs_WorkBackground\# kînnen Fenster dazu gebracht werden, daû
man sie im Hintergrund _bedienen_ kann (unter allen TOS-Ver-
sionen). Dies gilt natÅrlich nur fÅr den Arbeitsbereich, die
Fensterkomponenten kînnen nur im Hintergrund angewÑhlt werden,
wenn das Betriebssystem dies unterstÅtzt (z.B. MultiTOS).
Solche Fenster kînnen nur noch durch Anklicken einer Fenster-
Komponente (Titelzeile etc.) getoppt werden, oder - dies ist
ein ObjectGEM-spezifisches Feature - mit einem Doppelklick
_rechts_ im Arbeitsbereich!

In den TWindow-Fensterobjekten sind z.Z. folgende Tastatur-
Shortcuts vorgesehen (#<...> bedeutet, daû die Taste im Ziffern-
block gemeint ist):

	<Control>+<A>   WÑhlt alle passenden Elemente im Fenster aus
	                (siehe \#TWindow.SelectAll\#)
	<Control>+<C>   FÅhrt die "Kopieren"-Operation durch
	                (siehe \#TWindow.Copy\#)
	<Control>+<P>   Druckt den Fensterinhalt aus
	                (siehe \#TWindow.Print\# bzw. \#TTextWindow.Print\#)
	<Control>+<U>   Schlieût das Fenster
	<Control>+<V>   FÅhrt die "EinfÅgen"-Operation durch
	                (siehe \#TWindow.Paste\#)
	<Control>+<W>   Wechselt die Fenster der Applikation zyklisch
	                (mit <Shift> in umgekehrter Reihenfolge)
	<Control>+<X>   FÅhrt die "Ausschneiden"-Operation durch
	                (siehe \#TWindow.Cut\#)
	<Control>+#<*>  Bringt das Fenster auf Maximalgrîûe
	<Control>+#</>  Bringt das Fenster in den Hintergrund (AES 4.0)
	<Control>+#<3>  Ikonifiziert das Fenster (nur mit \link("Iconification")ICFS\#)
	<Delete>        FÅhrt die "Entfernen"-Operation durch
	                (siehe \#TWindow.Delete\#)

	<Control>+<Q>   VerlÑût das Programm
	                (dies ist eigentlich _kein_ Fenster-Shortcut)


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Iconification")
Iconification                                            \#ObjectGEM\#
------------------------------------------------------------------

Ab AES 4.10 unterstÅtzt ObjectGEM Iconification, d.h. \#GetStyle\#
liefert zusÑtzlich den Wert \#SMALLER\# zurÅck, und im Fenster er-
scheint links neben dem Fuller noch der "Verkleinerungsknopf".

Wenn dieser Button angewÑhlt wird, wird das entsprechende Fenster
ikonifiziert. Dem Icon-Fenster kann per \#GetIconTitle\# ein neuer
Titel zugewiesen werden, auûerdem wird bei einem Redraw nun die
Methode \#IconPaint\# aufgerufen. Der Status eines Fensters lÑût sich
mit \#IsIconified\# abfragen.

Wenn beim Anklicken des SMALLERs zusÑtzlich die <Control>-Taste
gedrÅckt wird, wird die gesamte Applikation ikonifiziert, d.h.
alle Fenster werden in einem Icon-Fenster zusammengefaût. DafÅr
stehen Ñhnliche Funktionen wie bei einem Fenster zur VerfÅgung.
WICHTIG: Hierbei werden die Fenster der Applikation _nicht_ ge-
schlossen, sondern nur rechts so weit Åber den Bildschirmrand
geschoben, daû man sie nicht mehr sieht und der Benutzer keine
Aktionen mehr an ihnen durchfÅhren kann. FÅr die Applikation
wird dann ein _neues_ Icon-Fenster geîffnet.

Soll in einem ikonifizierten Fenster automatisch ein Icon ange-
zeigt werden, muû \#TWindow.LoadIcon\# aufgerufen werden. Damit auch
bei einem Applikations-Icon-Fenster ein Icon erscheint, steht die
Methode \#TApplication.LoadIcon\# zur VerfÅgung. Dialoge Åbernehmen
dieses Icon automatisch, wenn ihnen kein eigenes Icon zugewiesen
wird.

Ist ein ICFS-Server installiert, so ist Iconification auch unter
alten TOS-Versionen mîglich. Wird beim Anklicken der CLOSERs die
<Alternate>-Taste gedrÅckt, wird das Fenster ikonifiziert. Das
Verkleinern aller Fenster mit <Control> ist aus technischen
GrÅnden (noch) nicht mîglich bzw. sinnvoll. In einer spÑteren
Version wird es allerdings auch die ICFS-Iconification mit
<Shift> geben (alle Fenster werden einzeln verkleinert).
ObjectGEM liegt der ICFS-Server von Dirk Haun und das ICFS-CPX
von John McLoud bei.

Ikonifizierte Fenster oder Applikationen erhalten von ObjectGEM
nur noch Timer- sowie ausgesuchte Message-Events. Evtl. kann in
Zukunft aber ein Flag gesetzt werden, so daû auch in einem Icon-
Fenster Aktionen durchgefÅhrt werden kînnen.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Interna","GO_PRIVATE":sensitive,"GOP_GETVERSION":sensitive,
       "GOP_VERSION":sensitive,"GOP_SETQUIT":sensitive)
Interna                                                  \#ObjectGEM\#
------------------------------------------------------------------

- Die Unit \#OWindows\# installiert eine neue \#HeapError\#-Funktion,
  die bei Fehlschlagen einer Speicheranforderung einen \#nil\#-
  Pointer zurÅckgibt.
- \#ExitProc\# wird von OWindows umgelenkt, so daû bei einem auûer-
  ordentlichen Programmabbruch noch versucht werden kann, ein
  evtl. angelegtes Applikations-Objekt freizugegeben.
- Wenn \link("SpeedoActive")SpeedoGDOS\# installiert ist, werden die Speedo-Fehlermel-
  dungen mittels \#vst_error\# so umgeleitet, daû diese nicht mehr
  auf dem Bildschirm angezeigt werden, sondern mit \#ChkSpeedoError\#
  abgefragt werden kînnen.
- Ist \link("MiNTActive")MiNT\# oder \#MultiTOS\# aktiv, lenkt \#TApplication.InitGEM\# die
  Signale \#SIGTERM\# und \#SIGQUIT\# auf einen eigenen Handler um, damit
  die Applikation korrekt verlassen werden kann.
- Wenn \#appl_getinfo\# vorhanden ist, wird diese Auskunftsfunktion
  verwendet, um spezielle Systemeigenschaften zu ermitteln (so
  wird die Mag!C-Anpassung realisiert). FÅr das Vorhandensein der
  Routine werden AES- bzw. Mag!C-Version getestet sowie die ?AGI-
  Methode unterstÅtzt (\#appl_find\#('?AGI')=0).
- Ist MultiTOS vorhanden, wird zur \link("TClipboard")Clipboard\#-Blockierung das AES-
  interne '_SCP'-Semaphor verwendet.
- Wenn Let'em Fly installiert ist, wird die Dialog-Flugroutine
  sowie die Routine beim Klick auûerhalb des Dialogs fÅr modale
  Dialoge verwendet.
- Der 'VSCR'-Cookie (Virtual Screen) wird beachtet.
- WINX ab Version 2.2 wird direkt unterstÅtzt, z.B. durch die
  \#WMArrowed\#-Methode (Scrollboxen).
- FÅr die BubbleHelp wird der Cookie 'BHLP' angelegt.
- Der Cookie 'GOBJ' wird fÅr die interne Verkettung aller gleich-
  zeitig  aktiven ObjectGEM-Applikationen verwendet


Die GEM-Message GO_PRIVATE ($1235) wird intern mit folgenden
Sub-Opcodes in msg[3] verwendet:

	GOP_GETVERSION     0  dient als Aufforderung, eine GOP_VERSION-
	                      Message zu schicken
	GOP_TOOLBAR        1  siehe \#TToolbar.TestMessage\#
	GOP_SETQUIT        2  wird von \link("TApplication.LoadMenu")LoadMenu\# verschickt, um den MenÅ-
	                      eintrag (msg[4]) und -titel (msg[5]) fÅr
	                      das <Control>+<Q>-Objekt zu setzen; beim
	                      Empfang dieser Message ruft \#MUMesag\# die
	                      Methode \#SetQuit\# auf
	GOP_VERSION    $7fff  wird als Antwort auf GOP_GETVERSION ver-
	                      schickt; in msg[4] erhÑlt man die jewei-
	                      lige \#GOVersion\#


Querverweise	\#Allgemeine Hinweise\#

\end


screen("KompatibilitÑt")
KompatibilitÑt                                           \#ObjectGEM\#
------------------------------------------------------------------

Im folgenden ist aufgelistet, bei welchem Versionssprung solche
énderungen vorgenommen wurden, die nicht ganz kompatibel zur
VorgÑngerversion waren und daher evtl. VerÑnderungen an eigenen
Quelltexten nach sich ziehen.

1.17->1.20: - TApplication.ID existiert nicht mehr (!)
            - es wird kein Applikations-spezifischer Cookie mehr
              angelegt
            - GP und UpdateGPValues wurden entfernt (!)
            - jedes Fenster hat nun eine eigene VDI-Workstation
            - cs_UserToolbar heiût jetzt cs_WindowMenuToolbar
            - SetMouse heiût jetzt SetMousePos
1.16->1.17: - cs_FullRedraw wird nur noch bei einer Grîûen-
              Ñnderung verschickt
            - TApplication.MNSelected fragt TWindow.EventList
              nicht mehr ab, wenn das Fenster eine eigene MenÅ-
              leiste besitzt
1.15->1.16: - der Datentyp von MapKey ist nun word
            - TApplication.CBUpdate heiût nun SCChanged,
              die CBT-Konstanten beginnen jetzt mit SCF
            - TWindow.ChkMin heiût ChkSize
            - TApplication.SendWndMessage wurde erweitert
            - TWindow.WMArrowed wurde erweitert
            - die TWindow.WAxxxx-Methoden wurden entfernt (!)
            - TWindow.ChkMax wurde entfernt (!)
1.14->1.15: Da PP offensichtlich extreme Probleme mit Objekten
            hat, in denen viele virtuelle Methoden vorkommen,
            wurden folgende Methoden statisch gemacht:
            - TApplication: IsIconified, GetGPWindow, GetPWindow,
              GetPTopWindow, At, IndexOf, FirstWndThat, ForEachWnd
            - TCollection: FirstThat, ForEach
            - TControl: IsFlagSet, Previous, Next
            - TDialog: FirstThat, ForEach
            - TEvent: Previous, Next
            - TWindow: At, DisableAutoCreate, EnableAutoCreate,
              FirstWndThat, ForEachWnd, GetTitle, IndexOf,
              IsIconified, IsModeless, Next, Previous
1.12->1.14: - bei einigen TApplication-Drag&Drop-Methoden wurde
              die Position der öbergabeparameter korrigiert
1.11->1.12: - TSortedCollection.Insert gibt den alten Eintrag
              beim Ersetzen nun frei
            - TDialog.ObjcPaint wurde erweitert
            - die DDReadData-Methoden wurden erweitert
1.10->1.11: - wenn ein TScroller-Objekt zum Einsatz kommt, muû
              dieses nun mit TWindow.GetScroller angelegt werden
1.06->1.10: - einige Mausformen wurden entfernt
            - die Fenstergrîûenberechnung muû nun in der Methode
              TWindow.SetupSize durchgefÅhrt werden
            - TApplication.HandleXAcc erhÑlt nicht mehr alle
              XAcc-Messages (wg. der autom. UnterstÅtzung)
            - TWindow.WMDragDrop, TApplication.APDragDrop und
              TApplication.HandleDragDrop wurden erweitert
1.03->1.04: - BootDevice liefert nur noch char


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Toolbars")
Toolbars                                                 \#ObjectGEM\#
------------------------------------------------------------------

Fenster-Toolbars bestehen aus ganz normalen Dialog-BÑumen in der
Resource-Datei, die in \#SetupWindow\# mittels \#LoadToolbar\# mit dem
Fenster verknÅpft werden. Um eine einfach Bearbeitung zu ge-
wÑhrleisten, sollten danach alle Toolbar-Button mit \#TToolbar\#-
Objekten verknÅpft werden, die als Schnittstellenobjekte
dienen.

Eine andere Mîglichkeit sind Anwender-konfigurierbare Toolbars.
Dabei kann der spÑtere Anwender des Programms sich seine Tool-
bar-Buttons mit einem Resource Construction Set zusammenstellen.
Diese Buttons werden _nicht_ mit TToolbar-Objekten verknÅpft
(der Programmierer kann ja nicht alle AnwenderwÅnsche berÅck-
sichtigen), sondern Åber den erweiterten Objekttyp mit einem
MenÅeintrag in der MenÅleiste der Applikation. Dieses ist die
_einzige_ Situation, in der die Verwendung des hîherwertigen
Bytes von \#ob_type\# unter ObjectGEM gestattet ist!!!
WICHTIG: Wenn sich eine Anwender-konfigurierbare Toolbar auf
die Fenster-MenÅleiste im selben Fenster beziehen soll, muû
das Flag \#cs_WindowMenuToolbar\# gesetzt werden.

Findet der Toolbar-Dispatcher im hîherwertigen Byte eine Null
vor (das sollte bis jetzt immer der Fall sein), passiert gar
nichts. Ist dort allerdings ein Wert ungleich Null eingetragen,
wird \#MNSelected\# mit eben diesem Wert als Index des ge-
wÑhlten MenÅeintrags aufgerufen.
WICHTIG: Dieser Mechanismus funktioniert auch, wenn TToolbar-
Objekte eingesetzt werden, d.h. der Programmierer kann diesen
Effekt bewuût ausnutzen. Der Aufruf erfolgt in diesem Fall
_nach_ dem Aufruf der \link("TEvent.Work")Work\#-Methode.

Wenn Anwender-konfigurierbare Toolbars eingesetzt werden, muû
der Programmierer dafÅr sorgen, daû die Indizes der MenÅeintrÑge
dokumentiert werden. Auûerdem wÑre es nett, wenn dem Anwender
dann z.B. Mini-Icons fÅr die wichtigsten Funktionen zur Ver-
fÅgung gestellt wÅrden.

Querverweise	\#Allgemeine Hinweise\#  \#Resource-Erstellung\#

\end


screen("Popup-MenÅs")
Popup-MenÅs                                              \#ObjectGEM\#
------------------------------------------------------------------

In den TPopup-MenÅs ist folgende Tastatursteuerung vorgesehen:

  <Return>,              WÑhlt den markierten Eintrag aus
  <Enter>,
  <Space>
  <Esc>,                 Bricht das Popup-MenÅ ab
  <Undo>
  <Home>,                Markierung auf ersten Eintrag
  <Shift>+<Crs. hoch>
  <Shift>+<Home>,        Markierung auf letzten Eintrag
  <Shift>+<Crs. runter>
  <Cursor hoch>          Bewegt die Markierung nach oben
  <Cursor runter>        Bewegt die Markierung nach unten


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Profiles")
Profiles (INF-Dateien)                                   \#ObjectGEM\#
------------------------------------------------------------------

Mit den ObjectGEM-\#Profile-Routinen\# kînnen die bei vielen Appli-
kationen vorhandenen INF-Dateien sehr leicht realisiert werden.
Sie haben auûerdem den Vorteil, daû sie als ASCII-Texte ver-
waltet werden, so daû sie - wenn nîtig - auch "von Hand" ver-
Ñndert werden kînnen.

Auûerdem werden - wenn die Environmentvariable HOME und das Flag
\#as_UseHomeDir\# gesetzt ist - diese Konfigurationsdateien an einem
zentralen Ort (eben dem User-Home-Verzeichnis) gespeichert, so
daû auch eine Multi-User-Umgebung realisierbar ist. Wenn HOME
nicht gesetzt ist, werden die Dateien wie gewohnt im Ordner der
Applikation angelegt.

Ein Profile setzt sich aus Blîcken zusammen. Jeder Block hat eine
"öberschrift" (in eckigen Klammern, bei den Profile-Routinen auch
mit "Anwendungsname" bezeichnet). Nach diese öberschrift folgen
die SchlÅsselnamen mit den zugehîrigen Werten, Leerzeilen sind
nur zum Trennen der Blîcke erlaubt. Kommentare beginnen mit einem
Semikolon oder # am Zeilenanfang, Kommentarblîcke werden mit ##
eingeschlossen. Ein Eintrag innerhalb eines Profiles muû durch
den Anwendungs- und SchlÅsselnamen eindeutig bestimmt sein,
ansonsten wird nur das erste Vorkommen beachtet.
Ein Profile kînnte also z.B. so aussehen:


		; Das ist ein Kommentar innerhalb eines Profiles
		# das auch
		[Block 1]
		Var_1=Test-Text
		Var_2=42

		## hier beginnt ein Kommentarblock
		und in der nÑchsten Zeile hîrt er auf
		##
		[nÑchster Block]
		Var_2=die hat nichts mit o.g. Variable zu tun
		Var_3=2147483647
		Hallo.Welt=Das ist ein Test!


Zum Auswerten eines Profiles stehen Routinen fÅr ganze Zahlen
(\#GetPrivateProfileInt\#, \#WritePrivateProfileInt\#) und fÅr Zeichen-
ketten (\#GetPrivateProfileString\#, \#WritePrivateProfileString\#) zur
VerfÅgung. Sollen Flieûkommazahlen bearbeitet werden, muû man
diese in Zeichenketten umwandeln (z.B. mit \#ftoa\#, \#atof\#).

Profiles, die direkt auf einer Datei arbeiten, sind recht lang-
sam, vor allem beim Schreiben. Deshalb besteht die Mîglichkeit,
ein Profile mit \#OpenPrivateProfile\# in den Speicher zu laden, wo
die Bearbeitung deutlich schneller ist. Da immer nur ein Profile
im Speicher verwaltet werden kann, werden Zugriffe auf andere
Profiles weiterhin direkt auf der Platte (bzw. Diskette) durch-
gefÅhrt. \#ClosePrivateProfile\# braucht nicht explizit aufgerufen
zu werden, dies geschieht automatisch beim Programmende. Man
sollte allerdings nach dem Schreiben von Daten immer die Routine
\#SavePrivateProfile\# aufrufen, da man z.B. bei Accessories nicht
davon ausgehen kann, daû die Applikation verlassen werden kann.

Die oben erwÑhnten Routinen bearbeiten _private_ Profiles, d.h.
Applikations-spezifische Konfigurationsdateien. Da es aber auch
wÅnschenswert sein kann, bestimmte Werte systemglobal festzulegen,
ist z.Z. eine Datei $HOME/user.inf in der Diskussion, die von
allen Applikationen verwendet werden kann. FÅr diese Datei stehen
spezielle Routinen zur VerfÅgung (\#GetProfileString\# etc.). Da
die Standardisierung aber noch nicht abgeschlossen ist, kann sich
am Namen, Ort, Inhalt etc. der Datei noch etwas Ñndern.


Querverweise	\#Allgemeine Hinweise\#  \#GetHomeDir\#

\end


screen("Resource-Erstellung")
Resource-Erstellung                                      \#ObjectGEM\#
------------------------------------------------------------------

Folgendes sollte bei der Resource-Erstellung fÅr ObjectGEM
beachtet werden:

- Das hîherwertige Byte von \#ob_type\# (\#AESOBJECT\#) darf unter
  ObjectGEM  weder verwendet noch verÑndert werden! Abgesehen
  davon, daû es eine Zeit lang unter MultiTOS Probleme mit
  solchen Programmen gegeben hat, benîtigt ObjectGEM dieses
  Byte fÅr interne Zwecke. Durch den objektorientierten Ansatz
  und die \#TControl\#-Schnittstellenobjekte sollte die Verwendung
  dieses Bytes allerdings auch nicht nîtig sein.
- Alle mit ObjectGEM verwendeten Resourcen sollten wie folgt
  sortiert sein (eine entsprechende Option sollte in jedem RCS
  zu finden sein):
                    "1 2 3
                     4 5 6"

- Die korrekte Grîûe fÅr Dialogelemente, denen spÑter ein
  \#TCheckBox\#-, \#TRadioButton\#- oder \#TTriState\#-Objekt zugeordnet
  werden soll, kann wie folgt bestimmt werden: Man nimmt im RCS
  ein BUTTON-Element und verÑndert den Text wie gewÅnscht. An
  den Text werden allerdings noch drei (bzw. zwei, wenn eine
  Shortcut-Markierung verwendet wird) Leerzeichen angehÑngt.
  Nun wird das BUTTON-Element vom RCS entsprechend lang ge-
  zeichnet. Zum Schluû lîscht man die Leerzeichen wieder, ver-
  Ñndert die Grîûe des BUTTON-Elements allerdings nicht mehr.
  Im ObjectGEM-Programm werden die neuen Buttons nun korrekt
  gezeichnet.
- Bei den Objekten \#TCheckBox\#/\#TTriState\# wird der selektierte Zu-
  stand normalerweise als HÑkchen dargestellt. Wenn in der Re-
  source allerdings das Flag \#CROSSED\# gesetzt ist, werden daraus
  "AnkreuzkÑstchen".
- \link("TToolbar")Toolbar\#-Elemente werden unter neueren TOS-Versionen automatisch
  mit 3D-Effekten versehen, wenn sie vom Typ G_BOX, G_BOXTEXT,
  G_BUTTON, G_BOXCHAR oder G_FBOXTEXT sind. Elemente vom Typ
  G_BOXTEXT oder G_FBOXTEXT sollten mit dem kleinen Zeichensatz
  sowie den Stati SHADOWED und OUTLINED versehen werden; dadurch
  haben sie einen Pseudo-3D-Effekt, der ab AES 3.40 automatisch
  durch den "echten" Effekt ausgetauscht wird.
  Wenn ein Toolbar-Button _nicht_ mit einem TToolbar-Objekt ver-
  knÅpft wird (s. "\#Toolbars\#"), muû in ob_state SELECTABLE ge-
  setzt sein.
- Wenn bei \#InitResource\#/\#LoadResource\# zwei RSC-Dateien fÅr die
  unterschiedlichen Auflîsungen verwendet werden, muû man daran
  denken, daû die Indizes der Objekte in beiden Dateien gleich
  sein mÅssen, da nur eine Include-Datei verwendet werden
  kann.
- ObjectGEM kommt auch mit RSC-Dateien zurecht, in denen das
  pe_tvalid-Feld verkÅrzt ist. Die nîtigen Zeichen der Maske
  werden ergÑnzt.
- In pe_tvalid stehen folgende Zeichen zusÑtzlich zur VerfÅgung:
    - 'H' fÅr Hexadezimalzahlen: '0'..'9', 'a'..'f', 'A'..'F'
    - 'D' fÅr Dezimalzahlen: '0'..'9', '+', '-', ',', '.'
    - '+' fÅr Vorzeichen: '+', '-'


Querverweise	\#Allgemeine Hinweise\#

\end


screen("XAcc- und AV-Protokoll")
XAcc- und AV-Protokoll                                   \#ObjectGEM\#
------------------------------------------------------------------

ObjectGEM verwendet das XAcc-Protokoll nach der Definition vom
28.11.1992, d.h. auch unter \#MultiTOS\# ist die korrekte Protokoll-
Behandlung gesichert.

Als Programmierer braucht man sich _nicht_ um die Einzelheiten
des Protokolls kÅmmern, sondern man kann direkt das Ergebnis
in der \#XAccList\# (z.B. per \#TApplication.FindApplication\#) aus-
werten. Die einzig interessante "Verwaltungs"-Routine dÅrfte
\#TApplication.XAccInsert\# sein.

Die \#XAcc\#-Eigenschaften des ObjectGEM-Programms werden in der
Methode \#TApplication.GetXAccAttr\# festgelegt. Wenn man also
besondere Eigenschaften kennzeichnen mîchte, muû man diese
Methode Åberschreiben. Man kann dort auch die "Extended names"
festlegen, die dann von ObjectGEM automatisch korrekt ver-
schickt werden.

Wichtige Methoden fÅr das XAcc-Protokoll sind diejenigen, mit
denen ein Datenaustausch durchgefÅhrt werden kann. Dies sind
die \#TApplication\#-Methoden \#XAccText\#, \#XAccKey\#, \#XAccMeta\# und
\#XAccIMG\#. Diese Methoden dienen zum Empfangen von Daten; ein
Verschicken wird z.Z. von ObjectGEM noch nicht direkt unter-
stÅtzt.

ObjectGEM wertet auûerdem das AV-Protokoll aus. Dies geschieht
ebenfalls automatisch, und es werden die gleichen Datenstrukturen
verwendet. Wie beim XAcc-Protokoll dÅrfte auch nur die Methode
\#TApplication.AVInsert\# interessant sein, alle spezifischen AV-
Messages werden weiterhin an \#TApplication.HandleAV\# weiterge-
leitet. Ist ein AV-Server vorhanden, befindet sich seine AES-ID
im Feld \#TApplication.AVServer\#.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Updates":sensitive)
Updates                                                  \#ObjectGEM\#
------------------------------------------------------------------

Updates von ObjectGEM erhalten Sie gegen Einsendung einer
formatierten 3.5"-Diskette (DD oder HD) und eines frankierten
und adressierten RÅckumschlags bei

		Softdesign Computer Software
		c/o Thomas Much, Gerwigstraûe 46, 76131 Karlsruhe

oder per Modem

		Maus KA, (0721) 358887, kein Gastdownload von 18 bis 21.45
		Maus W, (0202) 7387524
		ASH-Mailbox, (06221) 303671

oder per ftp

		ftp.uni-muenster.de /pub/atari/Programming/
		ftp.uni-kl.de       /pub/atari/programming/

Folgende Dateien gehîren zum Programmpaket:

		OGEM_120.ZIP   Sourcen, Release-History und Online-Hilfe
		OGEM_DOC.ZIP   Doku und Beispiele
		OGEM_DVI.ZIP   Handbuch als DVI-File

Falls ObjectGEM auch in anderen Mailboxen etc. stÑndig zum
Download bereitsteht, wÑre ich fÅr eine kurze PM dankbar
(Thomas Much @ KA2 im MausNet).

NatÅrlich sollten Sie auch bei allen bekannten PD-Versendern
die aktuelle ObjectGEM-Version erhalten kînnen. Die registrierte
Vollversion ist auch bei whiteline erhÑltlich (DM 60,-- incl.
gedrucktem Handbuch), kostenlose Updates (s.o.) gibt es aber
weiterhin nur beim Autor.


Querverweise	\#Allgemeine Hinweise\#

\end


screen("Objekte":sensitive)
Objekte (alphabetisch)                                   \#ObjectGEM\#
------------------------------------------------------------------

Diese öbersicht ist eine alphabetische Auflistung aller
ObjectGEM-Objekte. Die AbhÑngigkeiten der Objekte werden
in der \link("Hierarchie")Objekt-Hierarchie\# deutlich.


		\#TApplication\#
		\#TButton\#
		\#TCheckBox\#
		\#TClipboard\#
		\#TCollection\#
		\#TComboBox\#
		\#TControl\#
		\#TDialog\#
		\#TEdit\#
		\#TEvent\#
		\#TEventObject\#
		\#TFilterValidator\#
		\#TGroupBox\#
		\#TIcon\#
		\#TKey\#
		\#TKeyMenu\#
		\#TLookupValidator\#
		\#TMenu\#
		\#TObject\#
		\#TPopup\#
		\#TPXPictureValidator\#
		\#TRadioButton\#
		\#TRangeValidator\#
		\#TScrollBar\#
		\#TScroller\#
		\#TSortedCollection\#
		\#TStatic\#
		\#TStrCollection\#
		\#TStringCollection\#
		\#TStringLookupValidator\#
		\#TTextWindow\#
		\#TToolbar\#
		\#TTriState\#
		\#TValidator\#
		\#TWindow\#


Querverweise	\#Felder\#  \#Methoden\#

\end


screen("Hierarchie":sensitive)
Objekt-Hierarchie                                        \#ObjectGEM\#
------------------------------------------------------------------

In diesem Diagramm stehen die Nachfahren eines Objekts rechts
unter diesem Objekt auf gleicher Stufe. So sind \#TCollection\#,
\#TControl\#, \#TEvent\# etc. direkte Nachfahren von \#TObject\#.

Eine alphabetische Liste erhalten Sie unter \#Objekte\#.


		\#TObject\#
				\#TCollection\#
						\#TSortedCollection\#
								\#TStringCollection\#
										\#TStrCollection\#
				\#TControl\#
						\#TButton\#
								\#TCheckBox\#
										\#TRadioButton\#
										\#TTriState\#
						\#TComboBox\#
						\#TGroupBox\#
						\#TScrollBar\#
						\#TStatic\#
								\#TEdit\#
				\#TClipboard\#
				\#TEvent\#
						\#TIcon\#
						\#TKeyMenu\#
								\#TKey\#
								\#TMenu\#
						\#TPopup\#
						\#TToolbar\#
				\#TEventObject\#
						\#TApplication\#
						\#TWindow\#
								\#TDialog\#
								\#TTextWindow\#
				\#TScroller\#
				\#TValidator\#
						\#TFilterValidator\#
								\#TRangeValidator\#
						\#TLookupValidator\#
								\#TStringLookupValidator\#
						\#TPXPictureValidator\#

\end


screen("Felder":sensitive)
Felder                                                   \#ObjectGEM\#
------------------------------------------------------------------

	\link("ADialog")ADialog-Felder\#
	\link("apID")apID-Felder\#
	\link("Attr")Attr-Felder\#
	\link("Clipboard")Clipboard-Felder\#
	\link("Edit")Edit-Feld\#
	\link("hbrBackground")hbrBackground-Felder\#
	\link("HCursor")hCursor-Felder\#
	\link("gohi")Hi-Felder\#
	\link("Icon")Icon-Felder\#
	\link("ID")ID-Felder\#
	\link("golo")Lo-Felder\#
	\link("Max")Max-Feld\#
	\link("menuID")menuID-Felder\#
	\link("MenuTree")MenuTree-Felder\#
	\link("Min")Min-Feld\#
	\link("namfld")Name-Felder\#
	\link("ObjAddr")ObjAddr-Felder\#
	\link("ObjIndx")ObjIndx-Felder\#
	\link("Parent")Parent-Felder\#
	\link("Popup")Popup-Feld\#
	\link("Size")Size-Feld\#
	\link("Status")Status-Felder\#
	\link("Style")Style-Felder\#
	\link("vdiHandle")vdiHandle-Felder\#
	\link("Version")Version-Felder\#
	\link("VGHnd")VGHnd-Felder\#
	\link("VKey")VKey-Felder\#
	\link("VPipe")VPipe-Felder\#
	\link("VStat")VStat-Felder\#
	\link("Window")Window-Felder\#
	\link("Work")Work-Feld\#
	\link("workIn")workIn-Felder\#
	\link("workOut")workOut-Felder\#
	\link("XPos")XPos-Felder\#
	\link("YPos")YPos-Felder\#

\end


screen("Methoden":sensitive)
Methoden                                                 \#ObjectGEM\#
------------------------------------------------------------------

	\link("At")At-Methoden\#
	\link("CanClose")CanClose-Methoden\#
	\link("Changed")Changed-Methoden\#
	\link("Check")Check-Methoden\#
	\link("Clear")Clear-Methoden\#
	\link("CloseWindow")CloseWindow-Methoden\#
	\link("Compare")Compare-Methoden\#
	\link("Copy")Copy-Methoden\#
	\link("Create")Create-Methoden\#
	\link("Cut")Cut-Methoden\#
	\link("DDFinished")DDFinished-Methoden\#
	\link("DDGetPath")DDGetPath-Methoden\#
	\link("DDGetPreferredTypes")DDGetPreferredTypes-Methoden\#
	\link("DDHeaderReply")DDHeaderReply-Methoden\#
	\link("DDReadArgs")DDReadArgs-Methoden\#
	\link("DDReadData")DDReadData-Methoden\#
	\link("Deinstall")Deinstall-Methoden\#
	\link("Delete")Delete-Methoden\#
	\link("Destroy")Destroy-Methoden\#
	\link("Disable")Disable-Methoden\#
	\link("Done")Done-Methoden\#
	\link("Edit")Edit-Methode\#
	\link("Enable")Enable-Methoden\#
	\link("Error")Error-Methoden\#
	\link("Esc")Esc-Methode\#
	\link("Execute")Execute-Methoden\#
	\link("FirstIcon")FirstIcon-Methoden\#
	\link("FirstThat")FirstThat-Methoden\#
	\link("FirstWndThat")FirstWndThat-Methoden\#
	\link("ForEach")ForEach-Methoden\#
	\link("ForEachWnd")ForEachWnd-Methoden\#
	\link("Free")Free-Methoden\#
	\link("FreeDialog")FreeDialog-Methoden\#
	\link("FreeIcon")FreeIcon-Methoden\#
	\link("FreeItem")FreeItem-Methoden\#
	\link("FreeMenu")FreeMenu-Methoden\#
	\link("GetCheck")GetCheck-Methoden\#
	\link("GetClassName")GetClassName-Methoden\#
	\link("GetClipboard")GetClipboard-Methoden\#
	\link("GetHelp")GetHelp-Methoden\#
	\link("GetIconTitle")GetIconTitle-Methoden\#
	\link("GetScroller")GetScroller-Methoden\#
	\link("GetSelection")GetSelection-Methoden\#
	\link("GetState")GetState-Methoden\#
	\link("GetStyle")GetStyle-Methoden\#
	\link("GetText")GetText-Methoden\#
	\link("GetVDIHandle")GetVDIHandle-Methoden\#
	\link("GetWindowClass")GetWindowClass\#
	\link("GetWorkMax")GetWorkMax-Methoden\#
	\link("HandleMenu")HandleMenu-Methoden\#
	\link("Hide")Hide-Methoden\#
	\link("IconPaint")IconPaint-Methoden\#
	\link("IconSelect")IconSelect-Methoden\#
	\link("IndexOf")IndexOf-Methoden\#
	\link("Init")Init-Methoden\#
	\link("Insert")Insert-Methoden\#
	\link("Install")Install-Methoden\#
	\link("IsDialog")IsDialog-Methoden\#
	\link("IsHelpAvailable")IsHelpAvailable-Methoden\#
	\link("IsHidden")IsHidden-Methoden\#
	\link("IsIconified")IsIconified-Methoden\#
	\link("IsValid")IsValid-Methoden\#
	\link("IsValidInput")IsValidInput-Methoden\#
	\link("LoadDialog")LoadDialog-Methoden\#
	\link("LoadIcon")LoadIcon-Methoden\#
	\link("LoadMenu")LoadMenu-Methoden\#
	\link("Lookup")Lookup-Methoden\#
	\link("MakeWindow")MakeWindow-Methoden\#
	\link("MNSelected")MNSelected-Methoden\#
	\link("Next")Next-Methoden\#
	\link("NextIcon")NextIcon-Methoden\#
	\link("OpenWindow")OpenWindow-Methoden\#
	\link("Paint")Paint-Methoden\#
	\link("Paste")Paste-Methoden\#
	\link("Popup")Popup-Methode\#
	\link("Previous")Previous-Methoden\#
	\link("Print")Print-Methoden\#
	\link("SelectAll")SelectAll-Methoden\#
	\link("SetCheck")SetCheck-Methoden\#
	\link("SetColor")SetColor-Methoden\#
	\link("SetCursor")SetCursor-Methoden\#
	\link("SetHelp")SetHelp-Methoden\#
	\link("SetRange")SetRange-Methoden\#
	\link("SetSelection")SetSelection-Methoden\#
	\link("SetState")SetState-Methoden\#
	\link("SetText")SetText-Methoden\#
	\link("SetupSize")SetupSize-Methoden\#
	\link("SetupVDI")SetupVDI-Methoden\#
	\link("SetupWindow")SetupWindow-Methoden\#
	\link("Size")Size-Methode\#
	\link("TestButton")TestButton-Methoden\#
	\link("TestIndex")TestIndex-Methoden\#
	\link("TestKey")TestKey-Methoden\#
	\link("TestMenu")TestMenu-Methoden\#
	\link("TestMessage")TestMessage-Methoden\#
	\link("Toggle")Toggle-Methoden\#
	\link("Transfer")Transfer-Methoden\#
	\link("Uncheck")Uncheck-Methoden\#
	\link("Undo")Undo-Methoden\#
	\link("Unhide")Unhide-Methoden\#
	\link("UpdateDialog")UpdateDialog-Methoden\#
	\link("WMButton")WMButton-Methoden\#
	\link("WMClosed")WMClosed-Methoden\#
	\link("Work")Work-Methoden\#

\end


screen("Konstanten":sensitive)
Konstanten                                             Unit \#OTypes\#
------------------------------------------------------------------

		\#as_XXXX-Konstanten\#						\#ASCII-Steuercodes\#
		\#bf_XXXX-Konstanten\#						\#LÑnder-Kennungen\#
		\link("bsessb-Konstanten")bs_XXXX-Konstanten\#						\#Mausformen\#
		\#coXXXX-Konstanten\# 						\#MiNT-Signale\#
		\#cs_XXXX-Konstanten\#						\#Protokoll-Messages\#
		\#em_XXXX-Konstanten\#						\#SCF_XXXX-Konstanten\#
		\link("bsessb-Konstanten")es_XXXX-Konstanten\#            \#Tastatur-Werte\#
		\#id_XXXX-Konstanten\#
		\link("bsessb-Konstanten")sbs_XXXX-Konstanten\#           \#Sonstige Konstanten\#
		\link("bsessb-Konstanten")scs_XXXX-Konstanten\#
		\link("bsessb-Konstanten")sts_XXXX-Konstanten\#
		\#tf_XXXX-Konstanten\#
		\#voXXXX-Konstanten\#
		\#vsXXXX-Konstanten\#
		\#wb_XXXX-Konstanten\#
		\#ws_XXXX-Konstanten\#
		\#ws_ex_XXXX-Konstanten\#

\end


screen("as_XXXX-Konstanten","as_LoadFonts":sensitive,"as_GrowShrink":sensitive,
       "as_MenuSeparator":sensitive,"as_MoveDials":sensitive,"as_MoveTransparent":sensitive,
       "as_Rubbox":sensitive,"as_HandleShutdown":sensitive,"as_3DFlags":sensitive,
       "as_XInputMode":sensitive,"as_DesktopWindow":sensitive,"as_UseHomeDir":sensitive)
as_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Die folgenden Konstanten des Feldes \#TApplication.Attr.Style\#
bestimmen globale Eigenschaften jedes ObjectGEM-Programms.


	Konstante         Wert  Bedeutung

	as_LoadFonts      	 1	fÅr \#TApplication.vdiHandle\# werden die
	                        (Speedo)GDOS-Fonts mit \#vst_load_fonts\#
													nachgeladen (falls GDOS aktiv und Fonts
													vorhanden)
	as_GrowShrink     	 2	Fenster und Dialogboxen werden incl.
													Grow- und Shrinkboxen mit \#form_dial\#
													gezeichnet (default)
	as_MenuSeparator  	 4	die Trennstriche in Drop-Down- und
													Pop-Up-MenÅs werden als durchgÑngige
													Linien gezeichnet (default)
	as_MoveDials      	 8	modale Dialoge kînnen durch Anklicken
													verschoben werden (default)
	as_MoveTransparent	24	modale Dialoge werden transparent
													verschoben
	as_Rubbox         	32	auf dem Desktop kann durch Anklicken
													und Ziehen ein "Gummiband" aufgezogen
													werden; wurde das Aufziehen nicht mit
													der rechten Maustaste abgebrochen, wird
													danach \#TApplication.MURubbox\# aufgerufen
	as_HandleShutdown 	64	gibt an, ob die Applikation korrekt auf
													einen Shutdown von AES 4.0 reagieren
													kann (default)
	as_3DFlags         128  bewirkt, daû unter neueren TOS-Versionen
	                        (Falcon, MultiTOS) bei Dialogen 3D-
	                        Effekte verwendet werden (default)
	as_XInputMode      256  Tastatureingaben werden nicht an das
	                        oberste Fenster weitergeleitet, sondern
	                        an das Fenster, Åber dem sich der Maus-
	                        zeiger befindet (wie unter X/Unix)
	as_DesktopWindow   512  der Desktop wird in ein Fenster gelegt
	                        (bei Accessories default); z.Z. noch
	                        ohne Wirkung
	as_UseHomeDir     1024  bewirkt, daû \#Profiles\# ohne Pfadangabe
	                        im Verzeichnis $HOME/defaults angelegt
	                        werden, wenn die Environment-Variable
	                        HOME gesetzt ist und darin der Ordner
	                        defaults existiert


Querverweise	\#Konstanten\#  \#TApplication.Rubbox\#

\end


screen("bf_XXXX-Konstanten","bf_Unchecked":sensitive,"bf_Checked":sensitive,
       "bf_Grayed":sensitive,"bf_Enabled":sensitive,"bf_Disabled":sensitive)
bf_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Der Status von \#TControl\#, \#TButton\#, \#TCheckBox\#, \#TTriState\#,
\#TRadioButton\#, \#TPopup\# und \#TKeyMenu\# wird mit den folgenden
Konstanten beschrieben:


	Konstante    Wert  Bedeutung

	bf_Unchecked    1  SchaltflÑche ist nicht markiert
										 (nicht bei \#TButton\# und \#TControl\#)
	bf_Checked      2  SchaltflÑche ist markiert
										 (nicht bei \#TButton\# und \#TControl\#)
	bf_Grayed       3  SchaltflÑche ist grau; wird z.B. fÅr "Wert
										 beibehalten" verwendet (nur \#TTriState\#)
	bf_Enabled      4  Button ist anwÑhlbar
	bf_Disabled     5  Button ist nicht anwÑhlbar (hell dargestellt)


Querverweise	\#Konstanten\#

\end


screen("bsessb-Konstanten","bs_DefPushButton":sensitive,"sts_Fill":sensitive,
			 "es_ASCIIOnly":sensitive,"sbs_Horz":sensitive,"sbs_Vert":sensitive,
			 "es_KeyMenu":sensitive,"es_Icon":sensitive,"es_Popup":sensitive,
			 "es_Toolbar":sensitive,"scs_BitbltScrolling":sensitive,"es_Undo":sensitive)
bs/es/sbs/scs/sts_XXXX-Konstanten                      Unit \#OTypes\#
------------------------------------------------------------------

Diese Werte werden von Dialogelementobjekten in \#TControl.Style\#
eingetragen, um einen erweiterten Status anzuzeigen.


	Konstante         Wert  Bedeutung

	bs_DefPushButton  2048  \#TButton\# trÑgt diesen Wert in das Feld
													\#Style\# ein, wenn es sich bei dem zuge-
													hîrigen Dialogelement um den Default-
													PushButton handelt

	es_ASCIIOnly      2048  kann gesetzt werden, um bei \#TEdit\# nur
													ASCII-Zeichen (keine Umlaute!) zuzulassen
	es_Undo           4096  gibt an, daû TEdit den Undo-Puffer ver-
	                        wendet (default); s. \#TEdit.CanUndo\#

	sbs_Horz          2048  wird von \#TScrollBar\# eingetragen, wenn es
													sich um eine horizontale Bildlaufleiste
													handelt
	sbs_Vert          4096  wird von \#TScrollBar\# eingetragen, wenn es
													sich um eine vertikale Bildlaufleiste
													handelt

	sts_Fill          2048  wird von \#TStatic\# gesetzt; das Textfeld
	                        wird dann mit Leerzeichen aufgefÅllt,
	                        bis es eine LÑnge von \#TextLen\#-1 Zeichen
	                        hat, damit beim Neuzeichnen keine
	                        Probleme entstehen


Eine ganz andere Bedeutung haben die es_XXXX-Konstanten, die im
Feld \#TEvent.Style\# eingetragen sein kînnen. Sie dienen zur Unter-
scheidung folgender Objekttypen:

	es_KeyMenu           1  \#TKeyMenu\#
	es_Icon              2  \#TIcon\#
	es_Popup             4  \#TPopup\#
	es_Toolbar           8  \#TToolbar\#


Auch \#TScroller\# kann mit dem Feld \link("TScroller.Style")Style\# konfiguriert werden:

	scs_BitbltScrolling  1  wird von \#TTextWindow\# gesetzt, damit ein
	                        optimiertes Redraw durchgefÅhrt wird
	                        (funktioniert nur, wenn \#TrackMode\# true
	                        ist)
	                        WICHTIG: Beim Bitblt-Scrolling werden
	                        evtl. vorhandene Icons _nicht_ gezeich-
	                        net, deshalb ist diese Konstante nicht
	                        standardmÑûig gesetzt.


Querverweise	\#Konstanten\#  \#TScrollBar.IsHorizontal\#

\end


screen("coXXXX-Konstanten","coIndexError":sensitive,"coOverflow":sensitive)
coXXXX-Konstanten                                      Unit \#OTypes\#
------------------------------------------------------------------

Die coXXXX-Konstanten werden von \#TCollection\# im Fehlerfall als
Parameter Code an die Methode \#TCollection.Error\# Åbergeben.


	Konstante    Wert   Bedeutung

	coIndexError   -1   BereichsÅberschreitung des Indizes.
											Der an die Methode \#Error\# Åbergebene Wert
											Info entspricht dem ungÅltigen Index
	coOverflow     -2   öberlauf der Kollektion.
											\#TCollection.SetLimit\# konnte die Kollektion
											nicht auf die gewÅnschte Grîûe ausdehnen.
											Der an die Methode \#Error\# Åbergebene Wert
											Info gibt die angeforderte Grîûe an


Querverweise	\#Konstanten\#  \#MaxCollectionSize\#

\end


screen("voXXXX-Konstanten","voReserved":sensitive,"voFill":sensitive,
       "voOnEdit":sensitive,"voNotEmpty":sensitive,"voOnAppend":sensitive)
voXXXX-Konstanten                                      Unit \#OTypes\#
------------------------------------------------------------------

Die folgenden Konstanten beschreiben Eigenschaften der \#TValidator\#-
Objekte und werden in deren \link("TValidator.Options")Options\#-Feld gespeichert.


	Konstante   Wert  Bedeutung

	voFill         1  an die Eingabe werden evtl. fehlende Werte
	                  angehÑngt; wird von \#TPXPictureValidator\# ver-
	                  wendet
	voNotEmpty     2  das Eingabefeld darf nicht leer sein,
	                  sonst kann der Dialog nicht beendet werden
	voOnAppend     4  wird von TPXPictureValidator gesetzt
	voOnEdit       8  ist dieses Flag gesetzt, ruft \#TEdit.Edit\#
	                  die Methode \#TValidator.IsValidInput\# des
	                  zugehîrigen Validators auf, in der der
	                  Åbergebene Text korrigiert werden kann
	voReserved   240  reserviert fÅr Softdesign


Querverweise	\#Konstanten\#  \#vsXXXX-Konstanten\#

\end


screen("vsXXXX-Konstanten","vsOK":sensitive,"vsSyntax":sensitive)
vsXXXX-Konstanten                                      Unit \#OTypes\#
------------------------------------------------------------------

Die folgenden Konstanten zeigen den Zustand von \#TValidator\#-
Objekten an und werden in deren \link("TValidator.Status")Status\#-Feld gespeichert.


	Konstante  Wert  Bedeutung

	vsOK         0   alles OK, kein Fehler aufgetreten
	vsSyntax     1   ungÅltige Maske bei \#TPXPictureValidator\#


Querverweise	\#Konstanten\#  \#voXXXX-Konstanten\#

\end


screen("cs_XXXX-Konstanten","cs_ByteAlignClient":sensitive,"cs_ByteAlignWindow":sensitive,
       "cs_VerAlignClient":sensitive,"cs_VerAlignWindow":sensitive,"cs_FullRedraw":sensitive,
       "cs_HRedraw":sensitive,"cs_VRedraw":sensitive,"cs_SaveBits":sensitive,"cs_CancelOnClose":sensitive,
       "cs_Rubbox":sensitive,"cs_WorkBackground":sensitive,"cs_DblClks":sensitive,"cs_AutoCreate":sensitive,
       "cs_CreateOnAccOpen":sensitive,"cs_CheckBox":sensitive,"cs_AutoCheckBox":sensitive,
       "cs_3State":sensitive,"cs_Auto3State":sensitive,"cs_RadioButton":sensitive,"cs_AutoOpen":sensitive,
       "cs_AutoRadioButton":sensitive,"cs_PushButton":sensitive,"cs_GroupBox":sensitive,
       "cs_Static":sensitive,"cs_Edit":sensitive,"cs_ScrollBar":sensitive,"cs_ToolbarOpposite":sensitive,
       "cs_QuitOnClose":sensitive,"cs_ComboBox":sensitive,"cs_WindowMenuToolbar":sensitive)
cs_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Die cs_XXXX-Konstanten teilen sich in zwei gÑnzlich verschiedene
Gruppen auf, die Fensterklassen- und Control-Stile:


	\#TWindow.Class.Style\#
	Konstante           Wert   Bedeutung

	cs_ByteAlignClient     1   der linke Rand des Fenster-Arbeits-
														 bereichs wird horizontal auf Byte-
														 grenze gebracht
	cs_ByteAlignWindow     2   der linke Ñuûere Fensterrand wird
														 horizontal auf Bytegrenze gebracht
	cs_VerAlignClient      4   der obere Rand des Arbeitsbereichs
														 wird auf eine gerade Zeile gebracht
	cs_VerAlignWindow      8   der obere Ñuûere Fensterrand wird
														 auf eine gerade Zeile gebracht
	cs_FullRedraw         16   wenn die Fenstergrîûe geÑndert wurde
	                           und deshalb ein Teil des Fensters neu
	                           gezeichnet werden muû, wird automa-
	                           tisch ein Redraw Åber das komplette
														 Fenster ausgelîst
	cs_HRedraw            16     " (ObjectWindows-Konstante)
	cs_VRedraw            16     " (ObjectWindows-Konstante)
	cs_SaveBits           32   bei modalen Dialogen wird versucht,
														 den Hintergrund zu retten; dadurch
														 muû dann beim Verlassen des Dialogs
														 kein aufwendiges Redraw durchge-
														 fÅhrt werden (nur \#TDialog\#, default)
	cs_Rubbox             64   in dem Fenster kann innerhalb
														 eines angegebenen Bereichs ein
														 "Gummiband" aufgezogen werden;
														 danach wird \#TWindow.WMRubbox\#
														 aufgerufen
	cs_WorkBackground    128   Fenster und Dialoge kînnen auch im
														 Hintergrund bedient werden; statt
														 das Fenster in den Vordergrund zu 
														 bringen, wird dann die Methode
														 \#TWindow.WMButton\# aufgerufen (bei
														 \#TDialog\# default!);
														 WICHTIG: In AES-Versionen unter 4.0
														 werden Doppelklicks links in Hinter-
														 grund-Fenster nicht erkannt, auûerdem
														 wird dort ein Klick erst _nach_ Los-
														 lassen der Taste weitergeleitet
	cs_DblClks           256   das Fenster kann Doppelklicks ver-
														 arbeiten; in diesem Fall wird dann
														 die Methode \#TWindow.WMDblClick\#
														 aufgerufen (default)
	cs_CreateOnAccOpen   512   Fenster/Dialoge, zu denen Schnitt-
														 stellenobjekte existieren, werden bei
														 AC_OPEN automatisch mit \#Create\# er-
														 zeugt und geîffnet; ansonsten werden
														 nur Fenster bzw. Dialoge geîffnet,
														 die schon erzeugt wurden
														 (bei \#TWindow\# default)
	cs_CancelOnClose    1024   beim Schlieûen des Fenster-Dialogs mit
	                           dem Schlieûfeld wird nicht die OK-
	                           sondern die Cancel-Methode aufgerufen
	cs_AutoCreate       2048   ein Child-Fenster, bei dem dieses
	                           Flag gesetzt ist, wird zusammen mit
	                           dem Parent-Fenster erzeugt
	                           (bei TWindow default)
	cs_AutoOpen         4096   bewirkt, daû \#MakeWindow\# automatisch
	                           aufgerufen wird - bei TWindow von
	                           \link("TWindow.SetupWindow")SetupWindow\#, bei TDialog von \link("TDialog.Init")Init\#
	                           (bei TWindow default)
	cs_ToolbarOpposite  8192   wird von \#TWindow.LoadToolbar\# gesetzt,
	                           wenn die Toolbar nicht links oder
	                           oben, sondern rechts oder unten
	                           gezeichnet werden soll
	cs_QuitOnClose     16384   ist dieses Flag gesetzt, ruft
	                           \#WMClosed\# \#TApplication.Quit\# auf
	                           (bei TWindow default)
	cs_WindowMenuToolbar
	                   32768   wenn dieses Flag gesetzt ist, be-
	                           ziehen sich Anwender-konfigurierbare
	                           \#Toolbars\# auf die MenÅleiste im
	                           selben Fenster

	Die Konstanten cs_ByteAlignClient und cs_ByteAlignWindow bzw.
	cs_VerAlignClient und cs_VerAlignWindow dÅrfen nicht zusammen
	benutzt werden. cs_ToolbarOpposite darf nur gelesen werden!


	\#TControl.Style\# (nur lesen)
	Konstante           Wert   Bedeutung

	cs_CheckBox            1   wird von \#TCheckBox\# gesetzt
	cs_AutoCheckBox        1     " (ObjectWindows-Konstante)
	cs_3State              3   wird von \#TTriState\# gesetzt
	cs_Auto3State          3     " (ObjectWindows-Konstante)
	cs_RadioButton         4   wird von \#TRadioButton\# gesetzt
	cs_AutoRadioButton     4     " (ObjectWindows-Konstante)
	cs_PushButton          8   wird von \#TButton\# gesetzt
	cs_GroupBox           16   wird von \#TGroupBox\# gesetzt
	cs_Static             32   wird von \#TStatic\# gesetzt
	cs_Edit               64   wird von \#TEdit\# gesetzt
	cs_ScrollBar         128   wird von \#TScrollBar\# gesetzt
	cs_ComboBox          256   wird von \#TComboBox\# gesetzt

	Abgesehen von cs_CheckBox und cs_3State dÅrfen die
	Konstanten nicht zusammen verwendet werden.
	Von Kontrollelementen abgeleitete Objekte lîschen den alten
	Wert (z.B. lîscht \#TCheckBox\# den Wert cs_PushButton und
	trÑgt erst dann cs_CheckBox ein).


Querverweise	\#Konstanten\#  \#TWndClass\#  \link("bsessb-Konstanten")bs/es/sbs/sts_XXXX-Konstanten\#
							\#TApplication.Rubbox\#    \#TWindow.Attr.RBox\#
							\link("Hierarchie")Objekt-Hierarchie\#      \#TDialog.WMClosed\#
							\#TWindow.CreateChildren\#

\end


screen("em_XXXX-Konstanten","em_OK":sensitive,"em_OutOfMemory":sensitive,
       "em_InvalidWindow":sensitive,"em_InvalidMainWindow":sensitive,"em_AccInitFailure":sensitive,
       "em_GEMInitFailure":sensitive,"em_AESNotActive":sensitive,"em_WOpenFailure":sensitive,
       "em_WCloseFailure":sensitive,"em_WDestroyFailure":sensitive,"em_RscNotFound":sensitive,
       "em_InvalidMenu":sensitive,"em_InvalidDialog":sensitive,"em_Terminate":sensitive,
       "em_Quit":sensitive,"em_SpeedoLoadFailure":sensitive,"em_InvalidToolbar":sensitive)
em_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Die folgenden Konstanten werden von ObjectGEM entweder im Feld
\#TApplication.Status\# oder intern gesetzt, um Laufzeitfehler zu
signalisieren. Fatale Fehler kînnen in \#Status\# abgefragt werden
und fÅhren zum Programmabbruch, interne Fehler werden mit
\#TApplication.ChkError\# abgefragt.


	Konstante           Wert  Bedeutung

	em_OK                  0  kein Fehler aufgetreten; insbesondere
														wird \#TApplication.MessageLoop\# nur
														aufgerufen, wenn in \#TApplication.Init\#
														kein Fehler auftritt
	em_OutOfMemory        -1  eine Speicheranforderung mit \#new\# oder
														\#getmem\# konnte nicht erfÅllt werden;
														von der ObjectGEM-internen Routine wird
														dann ein \#nil\#-Pointer zurÅckgegeben
														und der interne Fehlerstatus auf
														em_OutOfMemory gesetzt
	em_InvalidWindow      -4  wird von \#Create\# gesetzt, wenn ein
														Schnittstellenobjekt kein GEM-Handle
														mittels \#wind_create\# belegen konnte
	em_InvalidMainWindow  -5  fatal; wird standardmÑûig von
														\#TApplication.InitMainWindow\# gesetzt,
														wenn Åberhaupt kein Fenster geîffnet
														werden konnte; kann und sollte Åber-
														schrieben werden
	em_AccInitFailure    -10  fatal; wird von \#TApplication.InitGEM\#
														gesetzt, wenn bei einem Accessory
														\#menu_register\# fehlschlÑgt
	em_GEMInitFailure    -11  fatal; wird von \#TApplication.InitGEM\#
														gesetzt, wenn \#appl_init\# oder \#v_opnvwk\#
														fehlschlÑgt
	em_AESNotActive      -12  fatal; wird von \#TApplication.InitGEM\#
														gesetzt, wenn die Applikation im AUTO-
														Ordner gestartet wird
	em_RscNotFound       -13  fatal; wird von \#TApplication.LoadResource\#
														gesetzt, wenn die Resource-Datei nicht
														gefunden werden konnte
	em_WOpenFailure      -20  wird von \#TWindow.OpenWindow\# gesetzt,
														wenn \#wind_open\# fehlschlÑgt
	em_WCloseFailure     -21  wird von \#TWindow.CloseWindow\# gesetzt,
														wenn \#wind_close\# fehlschlÑgt
	em_WDestroyFailure   -22  wird von \#TWindow.Destroy\# gesetzt,
														wenn \#wind_delete\# fehlschlÑgt
	em_InvalidMenu       -30  wird von \#LoadMenu\# gesetzt, wenn der
	                          MenÅbaum nicht existiert, bereits ein
														anderes MenÅ aktiv ist oder ein Fehler
														beim Zeichnen auftritt
	em_InvalidDialog     -31  wird von \#TApplication.ExecDialog\# und
														\#TApplication.Alert\# zurÅckgegeben,
														wenn ein Fehler aufgetreten ist;
														ferner setzt \#LoadDialog\# diesen Fehler,
														wenn der Dialogbaum nicht existiert
	em_InvalidToolbar    -32  wird von \#TWindow.LoadToolbar\# gesetzt,
	                          wenn der Objektbaum nicht existiert
	                          oder schon eine Toolbar aktiv ist
	em_SpeedoLoadFailure -40  wird von \#TApplication.SetupVDI\# gesetzt,
	                          wenn Speedo-Fonts nicht korrekt geladen
	                          werden konnten
	em_Terminate         -98  wird von ObjectGEM intern unter
														MultiTOS verschickt, um beim Eintreffen
														der \#MiNT-Signale\# \#SIGTERM\# und
														\#SIGQUIT\# bzw. beim Shutdown durch
														AP_TERM das Programm sauber (aber ohne
														den Benutzer zu fragen) abzubrechen;
														sollte ansonsten nicht gesetzt werden
	em_Quit              -99  das Programm wird beim nÑchsten Ende
														der \#MessageLoop\#-Schleife nach Aufruf
														von \#TApplication.CanClose\# verlassen;
														diese Konstante sollte nicht direkt
														gesetzt werden, statt dessen sollte
														\#TApplication.Quit\# aufgerufen werden


Querverweise	\#Konstanten\#
							\#TApplication.ChkError\#  \#TApplication.Error\#

\end


screen("id_XXXX-Konstanten","id_No":sensitive,"id_OK":sensitive,
       "id_Cancel":sensitive,"id_Help":sensitive,"id_Undo":sensitive,
       "id_Esc":sensitive,"id_NoExit":sensitive,"id_NewHandle":sensitive)
id_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Diese Konstanten werden im Feld \#TControl.ID\# gespeichert und
standardmÑûig nur von \#TButton\# und \#TScrollBar\# gesetzt.
Anders genutzte IDs sind weiter unten aufgelistet.


	Konstante Wert  Bedeutung

	id_No       -1  der PushButton hat keine besondere Bedeutung
	id_OK        0  der Button ist der "OK"-Button; bei Anwahl
									wird die Methode \#TDialog.OK\# aufgerufen
	id_Cancel    1  der Button ist der "Abbruch"-Button; bei Anwahl
									wird die Methode \#TDialog.Cancel\# aufgerufen
	id_Help      2  der Button ist der "Hilfe"-Button; bei Anwahl
									wird die Methode \#TDialog.Help\# aufgerufen
	id_Undo      3  der Button ist der "Undo"-Button; bei Anwahl
									wird die Methode \#TDialog.Undo\# aufgerufen
	id_Esc       4  der Button ist der "Esc"-Button; bei Anwahl
									wird die Methode \#TDialog.Esc\# aufgerufen
	id_NoExit   42  nach Anwahl dieses Dialogelements wird der
									Dialog nicht verlassen; wird z.B. von
									\#TScrollBar\# gesetzt, da die Applikation
									zwar auf die Bildlaufleiste reagieren,
									den Dialog aber nicht verlassen soll
									(der Button wird also im RCS auf "EXIT"
									gesetzt, da er mehr machen soll, als nur
									seinen Zustand wechseln; andererseits wird
									der Dialog aber von ObjectGEM durch diese
									Konstante nicht verlassen, was sonst nur
									durch öberschreiben von \#TDialog.ExitDlg\#
									mîglich wÑre); auch \#TComboBox\# nutzt dieses
									Flag



Folgende IDs werden _nicht_ (nur) von TControl verwendet:


	Konstante  Wert  Bedeutung

	id_No        -1  wird von recht vielen Routinen verwendet, um
	                 einen "negativen" Status anzuzeigen
	id_NewHandle -1  zeigt bei \#GetVDIHandle\# an, daû eine neue
	                 Workstation _automatisch_ geîffnet werden
	                 soll


Querverweise	\#Konstanten\#  \#TControl.TestID\#  \#TDialog.EndDlg\#

\end


screen("tf_XXXX-Konstanten","tf_GetData":sensitive,"tf_SetData":sensitive,"tf_SizeData":sensitive)
tf_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Die Methode \#Transfer\# einiger abgeleiteter \#TControl\#-Objekte benutzt
diese Konstanten, um die DatenÅbertragung zwischen der Applikation
und deren Dialogen mittels \#TDialog.TransferBuffer\# zu vereinfachen.


	Konstante  Wert   Bedeutung

	tf_GetData    0   ruft Daten aus dem Objekt ab
	tf_SetData    1   sendet Daten, um den Wert des
										Objekts zu setzen
	tf_SizeData   2   findet die Anzahl der vom Objekt
										Åbertragenen Bytes heraus


Querverweise	\#Konstanten\#  \#wb_Transfer\#
							\#TDialog.OK\#	\#TDialog.TransferData\#

\end


screen("wb_XXXX-Konstanten","wb_Transfer":sensitive,"wb_Lazy":sensitive)
wb_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Das Feld \#TControl.Flags\# beschreibt zusÑtzliche Eigenschaften
eines Dialogelementobjekts.


	Konstante  Wert   Bedeutung

	wb_Transfer   1   das Dialogelementobjekt nimmt am \#Transfer\#-
										Mechanismus teil; standardmÑûig wird dieses
										Flag von \#TCheckBox\#, \#TRadioButton\#, \#TTriState\#
										und \#TEdit\# gesetzt
	wb_Lazy       2   das Dialogelement wird nicht neu gezeichnet,
	                  wenn eine andere Applikation den Bildschirm
	                  blockiert hat (wichtig fÅr Statusanzeigen);
	                  wird von \#TControl.Paint\# beachtet


Querverweise	\#Konstanten\#
							\#TControl.DisableTransfer\#  \#TControl.EnableTransfer\#
							\#TDialog.TransferData\#			\#tf_XXXX-Konstanten\#

\end


screen("ws_XXXX-Konstanten","ws_NoWindow":sensitive,"ws_Created":sensitive,"ws_Open":sensitive)
ws_XXXX-Konstanten                                     Unit \#OTypes\#
------------------------------------------------------------------

Diese in \#TWindow.Attr.Status\# gespeicherten Werte geben den
Zustand eines Fensters an.


	Konstante  Wert   Bedeutung

	ws_NoWindow   1   das Schnittstellenobjekt belegt kein GEM-
										Handle, das Fenster ist also auch nicht offen;
										\#TWindow.Destroy\# und \#TWindow.RawDestroy\# setzen
										diesen ursprÅnglichen Status zurÅck
	ws_Created    2   das Schnittstellenobjekt besitzt ein GEM-
										Handle, das Fenster ist aber noch nicht
										offen; wird von \#TWindow.Create\# gesetzt bzw.
										von \#TWindow.CloseWindow\# zurÅckgesetzt
	ws_Open       3   das Fenster ist offen, es existiert also auch
										ein GEM-Handle; wird von \#TWindow.OpenWindow\#
										gesetzt


Querverweise	\#Konstanten\#  \#TWindowAttr\#

\end


screen("ws_ex_XXXX-Konstanten","ws_ex_Modeless":sensitive,"ws_ex_TryModeless":sensitive,
       "ws_ex_Popup":sensitive,"ws_ex_Center":sensitive,"ws_ex_CenterOnce":sensitive,
       "ws_ex_Center2Parent":sensitive,"ws_ex_MoveDial":sensitive,"ws_ex_MoveTransparent":sensitive,
       "ws_ex_Disabled":sensitive,"ws_ex_AppModal":sensitive,"ws_ex_ReadOnly":sensitive,
       "ws_ex_LoadFonts":sensitive)
ws_ex_XXXX-Konstanten                                  Unit \#OTypes\#
------------------------------------------------------------------

Im Gegensatz zum Feld \#TWindow.Attr.Style\#, das das Aussehen des
Fensters beschreibt, enthÑlt \#TWindow.Attr.ExStyle\# die erweiterten
Eigenschaften des Fensters. Die meisten Konstanten werden im
Zusammenhang mit \#TDialog\# benutzt.


	Konstante             Wert  Bedeutung

	ws_ex_Modeless           1  der Dialog muû nicht-modal sein;
															wenn kein Fenster mehr geîffnet
															werden kann, wird \#em_InvalidWindow\#
															gesetzt (default)
	ws_ex_TryModeless        3  es wird versucht, den Dialog
															nicht-modal zu îffnen; gelingt dies
															nicht, wird er modal ausgefÅhrt
															(bei \#TDialog\# default)
	ws_ex_AppModal           4  der Dialog ist fÅr die Applikation
															modal, obwohl er in einem Fenster
															und damit fÅr das System nicht-modal
															abgearbeitet wird; d.h. es kann kein
															anderes Fenster der Applikation ge-
															toppt werden, und die MenÅs sind
															gesperrt (z.Z. noch ohne Wirkung!)
	ws_ex_Popup              8  das Fenster erscheint zentriert
															um die aktuelle Mausposition
	ws_ex_Center            16  das Fenster wird auf dem Desktop
															zentriert
	ws_ex_CenterOnce        48  das Fenster wird nur beim ersten
															Aufruf zentriert, danach merkt es
															sich seine Position auch nach
															einem \#TWindow.CloseWindow\#
															(bei \#TDialog\# default)
	ws_ex_Center2Parent     80  das Fenster wird relativ zu seinem
															Parent zentriert; ist dieses \#nil\#,
															wird das Fenster auf dem Desktop
															zentriert
	ws_ex_MoveDial         128  ein modaler Dialog kann verschoben
															werden; wird von \#TDialog\# gesetzt,
															wenn \#as_MoveDials\# gesetzt ist
	ws_ex_MoveTransparent  384  ein modaler Dialog kann transparent
															verschoben werden; wird von \#TDialog\#
															gesetzt, wenn \#as_MoveTransparent\#
															gesetzt ist
	ws_ex_Disabled         512  ab AES 4.0 kann ein Fenster in
															den Hintergrund gebracht werden;
															ist dieser Wert gesetzt, wird
															dies von \#TWindow.OpenWindow\#
															sofort nach dem ôffnen ausgefÅhrt
	ws_ex_LoadFonts       1024  fÅr \#TWindow.vdiHandle\# werden GDOS-
	                            Fonts nachgeladen, sofern GDOS in-
	                            stalliert ist und Fonts vorhanden
	                            sind

	ws_ex_ReadOnly       32768  wird von \#TTextWindow\# und abgelei-
	                            teten Objekten genutzt, um anzu-
	                            zeigen, daû der Text im Fenster
	                            nicht verÑndert werden kann


Querverweise	\#Konstanten\#   \#TApplication.ExecDialog\#
							\#TWindowAttr\#  \#TApplication.Alert\#

\end


screen("Mausformen","IDC_ARROW":sensitive,"IDC_IBEAM":sensitive,"IDC_PENCIL":sensitive,
       "IDC_CROSS":sensitive,"IDC_WAIT":sensitive,"HOURGLASS":sensitive,"IDC_RUBBER":sensitive,
       "IDC_LOAD":sensitive,"IDC_SCISSORS":sensitive,"IDC_SLICE1":sensitive,"IDC_SLICE2":sensitive,
       "IDC_SLICE3":sensitive,"IDC_SLICE4":sensitive,"IDC_PASTE":sensitive,"IDC_HELP":sensitive)
ObjectGEM-Mausformen                                   Unit \#OTypes\#
------------------------------------------------------------------

ObjectGEM stellt mit \#SetMouse\# eine neue \#graf_mouse\#-Routine zur
VerfÅgung, so daû neben den Åblichen Mausformen auch noch neue,
z.T. Windows-kompatible Formen ausgewÑhlt werden kînnen.
Trotzdem sollten Sie die Maus so selten wie mîglich Ñndern (im
Hinblick auf MultiTOS). Auûerdem stellt ObjectGEM ihnen einige
Routinen zum éndern zur VerfÅgung (\#HideMouse\#, \#ShowMouse\#,
\#ArrowMouse\#, \#BusyMouse\#, \#LastMouse\# etc.), die Sie anstelle von
graf_mouse verwenden sollten.


	Konstante    Wert   Bedeutung
	IDC_ARROW       0   normaler Pfeil
	IDC_IBEAM       1   Text-Cursor
	IDC_CROSS       5   feines Fadenkreuz
	IDC_WAIT      100   die Windows-Sanduhr
	HOURGLASS     100     "
	IDC_LOAD      101   eine Diskette
	IDC_HELP      102   Pfeil mit Fragezeichen;
											wird von der BubbleHelp verwendet
	IDC_PENCIL    103   ein Zeichenstift
	IDC_RUBBER    104   ein Radiergummi
	IDC_SCISSORS  105   eine Schere
	IDC_PASTE     106   eine Klebetube
	IDC_SLICE1    107
	IDC_SLICE2    108   vier Konstanten fÅr die Routinen
	IDC_SLICE3    109   \#SliceMouse\# und \#SliceMouseNext\#
	IDC_SLICE4    110


Querverweise	\#Konstanten\#  \#TWndClass.hCursor\#

\end


screen("SCF_XXXX-Konstanten","SC_CHANGED":sensitive,"SCF_INDEF":sensitive,
       "SCF_DBASE":sensitive,"SCF_TEXT":sensitive,"SCF_VECTOR":sensitive,
       "SCF_RASTER":sensitive,"SCF_SHEET":sensitive,"SCF_SOUND":sensitive)
SCF_XXXX-Konstanten                                    Unit \#OTypes\#
------------------------------------------------------------------

Folgende Konstanten charakterisieren den Dateityp im Klemmbrett
und kînnen in der Bitmap von \#TApplication.SCChanged\# ausgewertet
werden (die angegebenen Extensions sind nur Beispiele):


	Konstante    Wert   Bedeutung

	SCF_INDEF   $0000   Die Datei paût auf keine der folgenden Typen
	SCF_DBASE   $0001   Daten, die in eine Datenbank geladen werden
	                    kînnen ('.DBF','.CSV')
	SCF_TEXT    $0002   Textdateien ('.TXT','.ASC','.RTF','.DOC')
	SCF_VECTOR  $0004   Vektorgrafik ('.GEM','.EPS','.CVG')
	SCF_RASTER  $0008   Rastergrafik ('.IMG','.TIF','.GIF','.PCX')
	SCF_SHEET   $0010   Tabellenkalkulation ('.DIF','.WKS')
	SCF_SOUND   $0020   Samples, MIDI-Files, KlÑnge ('.MOD')


Die zugehîrige Message ist folgendermaûen deklariert:

	SC_CHANGED  $0050


Querverweise	\#Konstanten\#

\end


screen("Protokoll-Messages","ACC_ID":sensitive,"ACC_OPEN":sensitive,
       "ACC_CLOSE":sensitive,"ACC_ACC":sensitive,"ACC_ACK":sensitive,
       "ACC_TEXT":sensitive,"ACC_KEY":sensitive,"ACC_META":sensitive,
       "ACC_IMG":sensitive,"ACC_EXIT":sensitive,"ACC_SPECIAL":sensitive,
       "AV_PROTOKOLL":sensitive,"VA_PROTOSTATUS":sensitive,"AV_GETSTATUS":sensitive,
       "AV_STATUS":sensitive,"VA_SETSTATUS":sensitive,"AV_SENDKEY":sensitive,
       "VA_START":sensitive,"AV_ASKFILEFONT":sensitive,"VA_FILEFONT":sensitive,
       "AV_ASKCONFONT":sensitive,"VA_CONFONT":sensitive,"AV_ASKOBJECT":sensitive,
       "VA_OBJECT":sensitive,"AV_OPENCONSOLE":sensitive,"VA_CONSOLEOPEN":sensitive,
       "AV_OPENWIND":sensitive,"VA_WINDOPEN":sensitive,"AV_STARTPROG":sensitive,
       "VA_PROGSTART":sensitive,"AV_ACCWINDOPEN":sensitive,"VA_DRAGACCWIND":sensitive,
       "AV_ACCWINDCLOSED":sensitive,"AV_COPY_DRAGGED":sensitive,"VA_COPY_COMPLETE":sensitive,
       "AV_PATH_UPDATE":sensitive,"AV_WHAT_IZIT":sensitive,"VA_THAT_IZIT":sensitive,
       "AV_DRAG_ON_WINDOW":sensitive,"AV_EXIT":sensitive,"VA_DRAG_COMPLETE":sensitive,
       "VA_OB_UNKNOWN":sensitive,"VA_OB_TRASHCAN":sensitive,"VA_OB_SHREDDER":sensitive,
       "VA_OB_CLIPBOARD":sensitive,"VA_OB_FILE":sensitive,"VA_OB_FOLDER":sensitive,
       "VA_OB_DRIVE":sensitive,"VA_OB_WINDOW":sensitive,
       "KOBOLD_JOB":sensitive,"KOBOLD_JOB_NO_WINDOW":sensitive,"KOBOLD_ANSWER":sensitive,
       "KOBOLD_CONFIG":sensitive,"KOBOLD_FIRST_SLCT":sensitive,"KOBOLD_NEXT_SLCT":sensitive,
       "KOBOLD_CLOSE":sensitive,"KOBOLD_FREE_DRIVES":sensitive,
       "WM_SAVE":sensitive,"WM_SAVEAS":sensitive,"WM_PRINT":sensitive,"WM_UNDO":sensitive,
       "WM_CUT":sensitive,"WM_COPY":sensitive,"WM_PASTE":sensitive,"WM_SELECTALL":sensitive,
       "WM_FIND":sensitive,"WM_REPLACE":sensitive,"WM_FINDNEXT":sensitive,"WM_HELP":sensitive,
       "WM_DELETE":sensitive,
       "MSG_SETSTATUS":sensitive,"MSG_START":sensitive,"MSG_SENDKEY":sensitive,"MSG_ASKFILEFONT":sensitive,
       "MSG_ASKCONFONT":sensitive,"MSG_ASKOBJECT":sensitive,"MSG_OPENWIND":sensitive,"MSG_STARTPROG":sensitive,
       "MSG_ACCWINDOPEN":sensitive,"MSG_STATUS":sensitive,"MSG_COPY_DRAGGED":sensitive,"MSG_PATH_UPDATE":sensitive,
       "MSG_EXIT":sensitive,
       "VIEW_FILE":sensitive,"VIEW_FAILED":sensitive,"VIEW_OPEN":sensitive,"VIEW_CLOSED":sensitive,
       "VIEW_DATA":sensitive,"VIEW_GETMFDB":sensitive,"VIEW_SETMFDB":sensitive,"VIEW_MFDB":sensitive,
       "VIEWERR_ERROR":sensitive,"VIEWERR_SIZE":sensitive,"VIEWERR_COLOR":sensitive,"VIEWERR_WID":sensitive,
       "VIEWERR_MEM":sensitive)
GEM-Protokoll-Messages                                 Unit \#OTypes\#
------------------------------------------------------------------

ObjectGEM erkennt die GEM-Messages des XAcc- und AV-Protokolls.
\#TApplication.MUMesag\# leitet die Messages an \#TApplication.HandleAV\#
und \#TApplication.HandleXAcc\# weiter. Beschreibungen der
Protokolle finden sich u.a in TOS 2/92 (XAcc) und in der
Dokumentation zur BenutzeroberflÑche Gemini (AV). Das Kobold-
Protokoll ist in der Anleitung des Dateikopierers beschrieben.
Das MenÅ-Protokoll ist erstmalig mit ObjectGEM verîffentlicht
und wird in Zukunft stÑrker unterstÅtzt.


	Konstante              Wert   Bedeutung

	ACC_ID                $0400   s. \#TApplication.XAccID\#
	ACC_OPEN              $0401
	ACC_CLOSE             $0402
	ACC_ACC               $0403   s. \#TApplication.XAccAcc\#
	ACC_EXIT              $0404   s. \#TApplication.XAccExit\#
	ACC_ACK               $0500
	ACC_TEXT              $0501   s. \#TApplication.XAccText\#
	ACC_KEY               $0502   s. \#TApplication.XAccKey\#
	ACC_META              $0503   s. \#TApplication.XAccMeta\#
	ACC_IMG               $0504   s. \#TApplication.XAccIMG\#
	ACC_SPECIAL           $0800   Beginn der privaten Messages


	AV_PROTOKOLL          $4700   s. \#TApplication.AVProtokoll\#
	VA_PROTOSTATUS        $4701   s. \#TApplication.VAProtoStatus\#
	AV_GETSTATUS          $4703
	AV_STATUS             $4704
	VA_SETSTATUS          $4705
	AV_SENDKEY            $4710   s. \#TApplication.AVSendKey\#
	VA_START              $4711   s. \#TApplication.VAStart\#
	AV_ASKFILEFONT        $4712
	VA_FILEFONT           $4713
	AV_ASKCONFONT         $4714
	VA_CONFONT            $4715
	AV_ASKOBJECT          $4716
	VA_OBJECT             $4717
	AV_OPENCONSOLE        $4718
	VA_CONSOLEOPEN        $4719
	AV_OPENWIND           $4720
	VA_WINDOPEN           $4721
	AV_STARTPROG          $4722   s. \#TApplication.AVStartProg\#
	VA_PROGSTART          $4723
	AV_ACCWINDOPEN        $4724
	VA_DRAGACCWIND        $4725
	AV_ACCWINDCLOSED      $4726
	AV_COPY_DRAGGED       $4728
	VA_COPY_COMPLETE      $4729
	AV_PATH_UPDATE        $4730
	AV_WHAT_IZIT          $4732
	VA_THAT_IZIT          $4733
	AV_DRAG_ON_WINDOW     $4734
	VA_DRAG_COMPLETE      $4735
	AV_EXIT               $4736   s. \#TApplication.AVExit\#

	VA_OB_UNKNOWN             0
	VA_OB_TRASHCAN            1
	VA_OB_SHREDDER            2
	VA_OB_CLIPBOARD           3
	VA_OB_FILE                4
	VA_OB_FOLDER              5
	VA_OB_DRIVE               6
	VA_OB_WINDOW              7

	MSG_SETSTATUS             1
	MSG_START                 2
	MSG_SENDKEY               1
	MSG_ASKFILEFONT           2
	MSG_ASKCONFONT            4
	MSG_ASKOBJECT             8
	MSG_OPENWIND             16
	MSG_STARTPROG            32
	MSG_ACCWINDOPEN          64
	MSG_STATUS              128
	MSG_COPY_DRAGGED        256
	MSG_PATH_UPDATE         512
	MSG_EXIT               1024


	KOBOLD_JOB            $2f10
	KOBOLD_JOB_NO_WINDOW  $2f11
	KOBOLD_ANSWER         $2f12
	KOBOLD_CONFIG         $2f13
	KOBOLD_FIRST_SLCT     $2f14
	KOBOLD_NEXT_SLCT      $2f15
	KOBOLD_CLOSE          $2f16
	KOBOLD_FREE_DRIVES    $2f17


	WM_SAVE               $1000
	WM_SAVEAS             $1001
	WM_PRINT              $1002   s. \#Print\#
	WM_UNDO               $1003
	WM_CUT                $1004   s. \#Cut\#
	WM_COPY               $1005   s. \#Copy\#
	WM_PASTE              $1006   s. \#Paste\#
	WM_SELECTALL          $1007   s. \#SelectAll\#
	WM_FIND               $1008
	WM_REPLACE            $1009
	WM_FINDNEXT           $100a
	WM_HELP               $100b
	WM_DELETE             $100c   s. \#Delete\#


	VIEW_FILE             $5600
	VIEW_FAILED           $5601
	VIEW_OPEN             $5602
	VIEW_CLOSED           $5603
	VIEW_DATA             $5604
	VIEW_GETMFDB          $5610	VIEW_SETMFDB          $5611	VIEW_MFDB             $5612

	VIEWERR_ERROR             0
	VIEWERR_SIZE              1
	VIEWERR_COLOR             2
	VIEWERR_WID               3
	VIEWERR_MEM               4


Querverweise	\#Konstanten\#

\end


screen("Tastatur-Werte","KsCAPS":sensitive,"KsALT":sensitive,
       "KsCONTROL":sensitive,"KsSHIFT":sensitive,"KsLSHIFT":sensitive,
       "KsRSHIFT":sensitive,"KbSCAN":sensitive,"KbNUM":sensitive,
       "KbALT":sensitive,"KbCONTROL":sensitive,"KbLSHIFT":sensitive,
       "KbRSHIFT":sensitive,"KbISO":sensitive,"KbF1":sensitive,
       "KbF2":sensitive,"KbF3":sensitive,"KbF4":sensitive,
       "KbF5":sensitive,"KbF6":sensitive,"KbF7":sensitive,
       "KbF8":sensitive,"KbF9":sensitive,"KbF10":sensitive,
       "KbF11":sensitive,"KbF12":sensitive,"KbF13":sensitive,
       "KbF14":sensitive,"KbF15":sensitive,"KbF16":sensitive,
       "KbF17":sensitive,"KbF18":sensitive,"KbF19":sensitive,
       "KbF20":sensitive,"KbUNDO":sensitive,"KbHELP":sensitive,
       "KbINSERT":sensitive,"KbHOME":sensitive,"KbUP":sensitive,
       "KbDOWN":sensitive,"KbLEFT":sensitive,"KbRIGHT":sensitive,
       "KbAlt1":sensitive,"KbAlt2":sensitive,"KbAlt3":sensitive,
       "KbAlt4":sensitive,"KbAlt5":sensitive,"KbAlt6":sensitive,
       "KbAlt7":sensitive,"KbAlt8":sensitive,"KbAlt9":sensitive,
       "KbAlt10":sensitive,"S_Esc":sensitive,"S_Undo":sensitive,
       "S_Help":sensitive,"KsNORMAL":sensitive,"K_NORMAL":sensitive,
       "K_SHIFT":sensitive)
Tastatur-Werte                                         Unit \#OTypes\#
------------------------------------------------------------------

Die folgenden Werte werden von \#MapKey\# zurÅckgeliefert.
Die Bezeichnungen sollten weitestgehend selbsterklÑrend sein.


	Konstante   Wert  Bedeutung

	KsCAPS     $0010  Bits zur Kennzeichnung des Shift-Status
	KsALT      $0008
	KsCONTROL  $0004
	KsSHIFT    $0003
	KsLSHIFT   $0002
	KsRSHIFT   $0001
	KsNORMAL   $0000

	KbSCAN     $8000  Masken fÅr Status-Bits, die im oberen
	KbNUM      $4000  Byte des von \#MapKey\# zurÅckgegebenen
	KbALT      $0800  Words plaziert sind
	KbCONTROL  $0400
	KbLSHIFT   $0200
	KbRSHIFT   $0100

	KbISO      $0037  ISO-Taste; erscheint, wenn eine Nicht-
										US-Tastatur mit US-TOS benutzt wird

	KbF1       $003b  Funktionstasten
	KbF2       $003c
	KbF3       $003d
	KbF4       $003e
	KbF5       $003f
	KbF6       $0040
	KbF7       $0041
	KbF8       $0042
	KbF9       $0043
	KbF10      $0044

	KbF11      $0054  Shift-Funktionstasten
	KbF12      $0055
	KbF13      $0056
	KbF14      $0057
	KbF15      $0058
	KbF16      $0059
	KbF17      $005a
	KbF18      $005b
	KbF19      $005c
	KbF20      $005d

	KbUNDO     $0061  Cursor-Bereich
	KbHELP     $0062
	KbINSERT   $0052
	KbHOME     $0047
	KbUP       $0048
	KbDOWN     $0050
	KbLEFT     $004b
	KbRIGHT    $004d

	KbAlt1     $0078  Alternate-numerische Taste
	KbAlt2     $0079
	KbAlt3     $007a
	KbAlt4     $007b
	KbAlt5     $007c
	KbAlt6     $007d
	KbAlt7     $007e
	KbAlt8     $007f
	KbAlt9     $0080
	KbAlt0     $0081


  Folgende Werte erleichtern die Programmierung/Wartung:

  K_NORMAL   $0000
  K_SHIFT    \#K_LSHIFT\#+\#K_RSHIFT\#


	Die folgenden Konstanten werden neu definiert, damit die
	Konstanten aus der Unit Gem nicht mit den \#TDialog\#-Methoden
	kollidieren.

	S_Esc      gem.Esc
	S_Undo     gem.Undo
	S_Help     gem.Help


Querverweise	\#Konstanten\#  ST/STE/TT-Profibuch

\end


screen("Sonstige Konstanten","GOVersion":sensitive,"GODate":sensitive,
       "DESK":sensitive,"CLIP_ON":sensitive,"HexArray":sensitive,
       "CLIP_OFF":sensitive,"PER_ON":sensitive,"PER_OFF":sensitive,
       "ME_DRAW":sensitive,"ME_ERASE":sensitive,"ME_INQUIRE":sensitive,
       "ME_CHECK":sensitive,"ME_UNCHECK":sensitive,"ME_DISABLE":sensitive,
       "ME_ENABLE":sensitive,"ME_NORMAL":sensitive,"ME_INVERT":sensitive,
       "NDC":sensitive,"RC":sensitive)
Sonstige ObjectGEM-Konstanten                          Unit \#OTypes\#
------------------------------------------------------------------

	Konstante          Wert       Bedeutung

	GOVersion          $0120      ObjectGEM-Version (\#VtoS\#)
	GODate             $10291994  ObjectGEM-Erstellungsdatum
																(Umwandlung mit \#DtoS\#)

	DESK               0   bezeichnet Fenster 0 (Desktop)

	CLIP_ON            1   Konstanten fÅr \#vs_clip\#
	CLIP_OFF           0

	PER_ON             1   Konstanten fÅr \#vsf_perimeter\#
	PER_OFF            0

	ME_DRAW            1   Konstanten fÅr \#menu_bar\#
	ME_ERASE           0   (ME_INQUIRE erst ab AES 4.0)
	ME_INQUIRE        -1

	ME_CHECK           1   Konstanten fÅr \#menu_icheck\#
	ME_UNCHECK         0

	ME_DISABLE         0   Konstanten fÅr \#menu_ienable\#
	ME_ENABLE          1

	ME_NORMAL          1   Konstanten fÅr \#menu_tnormal\#
	ME_INVERT          0

	NDC                0   Konstanten fÅr \#v_opnvwk\#
	RC                 2   (normalisiertes oder Raster-
													koordinatensystem)


	HexArray: array [0..15] of char = ('0','1','2','3','4','5','6','7',
	                                   '8','9','a','b','c','d','e','f');


Querverweise	\#Konstanten\#

\end


screen("ASCII-Steuercodes","ESC_const","NUL":sensitive,"EOS":sensitive,
       "STX":sensitive,"ETX":sensitive,"EOT":sensitive,"ENQ":sensitive,
       "ACK":sensitive,"BEL":sensitive,"BS":sensitive,"HT":sensitive,
       "LF":sensitive,"VT":sensitive,"FF":sensitive,"CR":sensitive,
       "SO":sensitive,"SI":sensitive,"DLE":sensitive,"DC1":sensitive,
       "DC2":sensitive,"DC3":sensitive,"DC4":sensitive,"NAK":sensitive,
       "SYN":sensitive,"ETB":sensitive,"CAN":sensitive,"EM":sensitive,
       "SUB":sensitive,"FS":sensitive,"GS":sensitive,"SOH":sensitive,
       "RS":sensitive,"US":sensitive,"SP":sensitive,"DEL":sensitive)
ASCII-Steuerzeichen                                    Unit \#OTypes\#
------------------------------------------------------------------

	Konstante Wert  Bedeutung

	NUL         0   Nil (Null)
	EOS         0   Ende der Zeichenkette (End of String)
									eigentlich kein vordefinierter ASCII-Steuercode!
	SOH         1   Anfang des Kopfes (Start of Heading)
	STX         2   Anfang des Textes (Start of Text)
	ETX         3   Ende des Textes (End of Text)
	EOT         4   Ende der öbertragung (End of Transmission)
	ENQ         5   Stationsaufforderung (Enquiry)
	ACK         6   Positive RÅckmeldung (Acknowledge)
	BEL         7   Klingel (BEL)
	BS          8   RÅckwÑrtsschritt (Backspace)
	HT          9   Horizontal-Tabulator (Horizontal Tabulation)
	LF         10   Zeilenvorschub (Line Feed)
	VT         11   Vertikal-Tabulator (Vertical Tabulation)
	FF         12   Formularvorschub (Form Feed)
	CR         13   WagenrÅcklauf (Carriage Return)
	SO         14   Dauerumschaltung (Shift-out)
	SI         15   RÅckschaltung (Shift-in)
	DLE        16   DatenÅbertragungsumschaltung (Data Link Escape)
	DC1        17   GerÑtesteuerung (Device Control)
	DC2        18     "
	DC3        19     "
	DC4        20     "
	NAK        21   Negative RÅckmeldung (Negative Acknowledge)
	SYN        22   Synchronisierung (Synchronous Idle)
	ETB        23   Ende des DatenÅbertragungsblocks
									(End of Transmission Block)
	CAN        24   UngÅltig (Cancel)
	EM         25   Ende der Aufzeichnung (End of Medium)
	SUB        26   Substitution (Substitute Character)
	ESC        27   Umschaltung (Escape)
	FS         28   Hauptgruppen-Trennung (File Separator)
	GS         29   Gruppen-Trennung (Group Separator)
	RS         30   Untergruppen-Trennung (Record Separator)
	US         31   Teilgruppen-Trennung (Unit Separator)
	SP         32   Leerzeichen (Space)
									eigentlich kein vordefinierter ASCII-Steuercode!
	DEL       127   Lîschen (Delete)


Querverweise	\#Konstanten\#  Informatik-Duden

\end


screen("LÑnder-Kennungen","USA":sensitive,"FRG":sensitive,"FRA":sensitive,
       "UK":sensitive,"SPA":sensitive,"ITA":sensitive,"SWE":sensitive,
       "SWF":sensitive,"SWG":sensitive,"TUR":sensitive,"FIN":sensitive,
       "NOR":sensitive,"DEN":sensitive,"SAU":sensitive,"HOL":sensitive,
       "CZE":sensitive,"HUN":sensitive)
TOS-LÑnder-Kennungen                                   Unit \#OTypes\#
------------------------------------------------------------------

Einen der folgenden aus dem System-Header bzw. dem _AKP-Cookie
ermittelten Werte trÑgt \#TApplication.Init\# in das Feld
\#TApplication.Attr.Country\# ein:


	Konstante Wert  Bedeutung

	USA          0  USA
	FRG          1  Bundesrepublik Deutschland
	FRA          2  Frankreich
	UK           3  Groûbritannien
	SPA          4  Spanien
	ITA          5  Italien
	SWE          6  Schweden
	SWF          7  Schweiz (franzîsisch)
	SWG          8  Schweiz (deutsch)
	TUR          9  TÅrkei
	FIN         10  Finnland
	NOR         11  Norwegen
	DEN         12  DÑnemark
	SAU         13  Saudi-Arabien
	HOL         14  Niederlande
	CZE         15  Tschechische Republik & Slowakei
	HUN         16  Ungarn


Querverweise	\#Konstanten\#  \#GetOSHeaderPtr\#

\end


screen("MiNT-Signale","SIGNULL":sensitive,"SIGHUP":sensitive,"SIGINT":sensitive,
       "SIGQUIT":sensitive,"SIGILL":sensitive,"SIGTRAP":sensitive,"SIGABRT":sensitive,
       "SIGPRIV":sensitive,"SIGFPE":sensitive,"SIGKILL":sensitive,"SIGBUS":sensitive,
       "SIGSEGV":sensitive,"SIGSYS":sensitive,"SIGPIPE":sensitive,"SIGALRM":sensitive,
       "SIGTERM":sensitive,"SIGSTOP":sensitive,"SIGTSTP":sensitive,"SIGCONT":sensitive,
       "SIGCHLD":sensitive,"SIGTTIN":sensitive,"SIGTTOU":sensitive,"SIGXCPU":sensitive,
       "SIGWINCH":sensitive,"SIGUSR1":sensitive,"SIGUSR2":sensitive,"SIG_DFL":sensitive,
       "SIG_IGN":sensitive)
MiNT-Signale                                           Unit \#OTypes\#
------------------------------------------------------------------

Im folgenden sind die Signale beschrieben, die MiNT/MultiTOS an
Prozesse schickt (oder die dieses untereinander verschicken).
ObjectGEM reagiert nur auf SIGTERM und SIGQUIT.


	Konstante Wert  Bedeutung

	SIGNULL      0  dies ist eigentlich kein Signal, da es nie an
									Prozesse verschickt wird; allerdings kann man
									damit die PrÑsenz eines Child-Prozesses testen
	SIGHUP       1  das Ein-/Ausgabe-Terminal ist nicht mehr gÅltig;
									wird vom Window Manager (z.B. MW) verschickt,
									wenn der Benutzer das Terminalfenster schlieût
	SIGINT       2  Unterbrechung;
									wird verschickt, wenn der Benutzer <Control>+<C>
									drÅckt; die aktuelle Aktion bzw. das Programm
									soll abgebrochen werden
	SIGQUIT      3  Abbruch;
									wird nach DrÅcken von <Control>+<\> verschickt;
									das Programm soll dringend beendet werden!
	SIGILL       4  ein illegaler Assembler-Befehl sollte
									ausgefÅhrt werden
	SIGTRAP      5  EinzelschrittausfÅhrung (z.B. fÅr Debugger)
	SIGABRT      6  "Grausamer Fehler"
									der aufgetretene Fehler ist so schwer, daû
									das Programm sofort und ohne "AufrÑumarbeiten"
									verlassen werden sollte (bzw. wird)
	SIGPRIV      7  es wurde versucht, einen Supervisor-Befehl
									im User-Modus auszufÅhren
	SIGFPE       8  Division durch Null oder öberlauf
	SIGKILL      9  Prozeûabbruch;
									kann nicht abgefangen werden; der
									Prozeû wird unwiderruflich entfernt
	SIGBUS      10  Bus-Fehler
	SIGSEGV     11  Adreû-Fehler; es wurde auf eine illegale
									Speicheradresse zugegriffen
	SIGSYS      12  bei einem Systemaufruf wurden falsche
									Werte Åbergeben
	SIGPIPE     13  es wurde versucht, in eine nicht existierende
									Pipe zu schreiben, bzw. die Pipe ist zerbrochen
	SIGALRM     14  die mit \#Talarm\# gesetzte Zeit ist abgelaufen
	SIGTERM     15  Prozeû bitte beenden;
									wird z.B. verschickt, wenn ein Prozeû aus
									U:\\PROC auf den Papierkorb gezogen wird
	SIGSTOP     17  der Prozeû wird angehalten
	SIGTSTP     18  der Prozeû wird "gebeten", anzuhalten
	SIGCONT     19  hebt SIGSTOP oder SIGTSTP auf
	SIGCHLD     20  ein Child-Prozeû wurde beendet
	SIGTTIN     21  Eingabe vom falschen Terminal
	SIGTTOU     22  Ausgabe auf falsches Terminal
	SIGXCPU     24  die erlaubte CPU-Zeit des Prozesses
									wurde Åberschritten
	SIGWINCH    28  die Fenstergrîûe wurde geÑndert;
									wird z.B. von MW verschickt
	SIGUSR1     29  User-Signal 1
	SIGUSR2     30  User-Signal 2


	Die folgenden Konstanten werden an \#Psignal\# statt
	eines Handlers Åbergeben:

	SIG_DFL     pointer(0)  setzt fÅr das angegebene Signal
													wieder die Default-Routine ein
	SIG_IGN     pointer(1)  das betreffende Signal wird von
													der Applikation ignoriert


Querverweise	\#Konstanten\#    \#TApplication.APDragDrop\#
							\#em_Terminate\#  MiNT-Dokumentation

\end


screen("TObject":sensitive,"PObject":sensitive)
TObject                                               Unit \#Objects\#
------------------------------------------------------------------

TObject ist das grundlegende Objekt von ObjectGEM.
Alle weiteren Objekte stammen letztendlich von TObject ab.
TObject besitzt keinen Vorfahren.


	Pointer
		PObject = ^TObject;

	Methoden
		\link("TObject.Init")Init\#
		\link("TObject.Free")Free\#
		\link("TObject.Done")Done\#

	Vorfahre
		---
	Nachfahren
		\#TCollection\#  \#TControl\#    \#TEventObject\#  \#TEvent\#
		\#TScroller\#    \#TValidator\#  \#TClipboard\#

\end


screen("TObject.Init":sensitive)
TObject.Init (Methode)                                Unit \#Objects\#
------------------------------------------------------------------

Deklaration   constructor Init;

Beschreibung  Initialisiert das Objekt.
              Wird von den Konstruktoren aller abgeleiteten
              Objekte aufgerufen.

Querverweise  \#TObject\#

\end


screen("TObject.Free":sensitive)
TObject.Free (Methode)                                Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Free;

Beschreibung  Ruft den Destruktor \link("TObject.Done")Done\# auf und entfernt
              das Objekt aus dem Speicher.

Querverweise  \#TObject\#

\end


screen("TObject.Done":sensitive)
TObject.Done (Methode)                                Unit \#Objects\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt den Speicher von dynamischen Objekten frei.

Querverweise  \#TObject\#

\end


screen("TEventObject":sensitive,"PEventObject":sensitive)
TEventObject                                         Unit \#OWindows\#
------------------------------------------------------------------

TEventObject definiert ein grundlegendes Objekt, das auf GEM-
Ereignisse ("Events", "Messages") reagieren kann. TEventObject
verwaltet mit EventList \#TEvent\#-Objekte, mit deren Methoden
die GÅltigkeit eines Ereignisses ÅberprÅft werden kann.


	Pointer
		PEventObject = ^TEventObject;

	Felder
		\#EventList\#

	Methoden
		\link("TEventObject.Init")Init\#
		\link("TEventObject.Done")Done\#

	Vorfahre
		\#TObject\#
	Nachfahren
		\#TApplication\#  \#TWindow\#

\end


screen("TEventObject.EventList":sensitive,"EventList":sensitive)
TEventObject.EventList (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   EventList: \#PEvent\#;  (nur lesen)

Beschreibung  EventList ist eine Liste von Zeigern auf \#TEvent\#-
              Objekte. Zwischen den Objekten bestehen Verweise
              mit \#TEvent.Previous\# und \#TEvent.Next\#,
              EventList zeigt auf das erste Element der Liste.
              TEvent-Objekte tragen sich bei ihrer Initiali-
              sierung automatisch in diese Liste ein.

Querverweise  \#TEventObject\#  \#TEvent.Init\#

\end


screen("TEventObject.Init":sensitive)
TEventObject.Init (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init;

Beschreibung  Init ruft den Vorfahren \#TObject.Init\# auf
              und initialisiert \#EventList\# mit nil.

Querverweise  \#TEventObject\#

\end


screen("TEventObject.Done":sensitive)
TEventObject.Done (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Entfernt alle in \#EventList\# eingetragenen Objekte
              mit ihrer \#Free\#-Methode und ruft dann \#TObject.Done\#
              auf.

Querverweise  \#TEventObject\#

\end


screen("TEvent":sensitive,"PEvent":sensitive)
TEvent                                               Unit \#OWindows\#
------------------------------------------------------------------

TEvent ÅberprÅft die GÅltigkeit von GEM-Ereignissen, die an
\#TApplication\#- und \#TWindow\#-Objekte gemeldet werden.
Wenn also z.B. ein Fenster auf eine spezielle Nachricht reagieren
soll, muû diesem Fenster ein abgeleitetes TEvent-Objekt zugeordnet
werden, das (in diesem Fall) auf TestMessage positiv antwortet.
Zur Abfrage einer MenÅanwahl existieren spezielle \#TKeyMenu\#-
Objekte.


	Pointer
		PEvent = ^TEvent;

	Felder
		\link("TEvent.Parent")Parent\#
		\link("TEvent.Style")Style\#

	Methoden
		\link("TEvent.Init")Init\#
		\link("TEvent.Done")Done\#
		\link("TEvent.Next")Next\#
		\link("TEvent.Previous")Previous\#
		\link("TEvent.TestButton")TestButton\#
		\link("TEvent.TestKey")TestKey\#
		\link("TEvent.TestMenu")TestMenu\#
		\link("TEvent.TestMessage")TestMessage\#
		\#TestMouse\#
		\link("TEvent.Work")Work\#

	Vorfahre
		\#TObject\#
	Nachfahren
		\#TIcon\#  \#TKeyMenu\#  \#TPopup\#  \#TToolbar\#

\end


screen("TEvent.Parent":sensitive)
TEvent.Parent (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Parent: PEventObject;  (nur lesen)

Beschreibung  EnthÑlt einen Zeiger auf das Zugehîrige
              \#TEventObject\# (d.h. \#TApplication\# oder \#TWindow\#).
              Wird von \#TEvent.Init\# gesetzt. 

Querverweise  \#TEvent\#

\end


screen("TEvent.Style":sensitive)
TEvent.Style (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Style: word;  (nur lesen)

Beschreibung  Wird von \#TEvent.Init\# mit Null initialisiert. Abge-
              leitete Objekte kînnen hier eine der \link("bsessb-Konstanten")es_XXXX\#-Kon-
              stanten eintragen, mit denen wichtige Objekttypen
              unterschieden werden kînnen.

Querverweise  \#TEvent\#

\end


screen("TEvent.Init":sensitive)
TEvent.Init (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject);

Beschreibung  Ruft den Vorfahren \#TObject.Init\# auf und setzt
              \link("TEvent.Parent")Parent\# auf AParent. Ist AParent=nil, wird Parent
              auf \#Application\# gesetzt. Danach installiert sich
              das Objekt in der \#EventList\# des durch Parent
              angegebenen \#TEventObject\#s. \link("TEvent.Style")Style\# wird auf Null
              gesetzt.

Querverweise  \#TEvent\#

\end


screen("TEvent.Done":sensitive)
TEvent.Done (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Entfernt sich selbst aus der \#EventList\# des durch
              \link("TEvent.Parent")Parent\# angegebenen \#TEventObject\#s und ruft dann
              \#TObject.Done\# auf.

Querverweise  \#TEvent\#

\end


screen("TEvent.Next":sensitive)
TEvent.Next (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Next: PEvent;

Beschreibung  Gibt einen Zeiger auf das nÑchste TEvent-Objekt
              in der \#EventList\# des zugehîrigen \#TEventObject\#s
              zurÅck. Ist kein weiteres Objekt vorhanden,
              erhÑlt man einen nil-Zeiger.

Querverweise  \#TEvent\#  \#TEvent.Previous\#

\end


screen("TEvent.Previous":sensitive)
TEvent.Previous (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Previous: PEvent;

Beschreibung  Gibt einen Zeiger auf das vorhergehende TEvent-
              Objekt in der \#EventList\# des zugehîrigen
              \#TEventObject\#s zurÅck. Ist kein weiteres Objekt
              vorhanden, erhÑlt man einen nil-Zeiger, d.h. in
              diesem Fall zeigt EventList genau auf das aktuelle
              Objekt.

Querverweise  \#TEvent\#  \#TEvent.Next\#

\end


screen("TEvent.TestKey":sensitive)
TEvent.TestKey (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestKey(Stat,Key: integer): boolean;
                                                   virtual;

Beschreibung  Gibt false zurÅck. Muû Åberschrieben werden, damit
              das Objekt TastendrÅcke ÅberprÅfen kann. Sollte
              dann true zurÅckgeben, wenn die in Stat und Key
              Åbergebenen Werte die gesuchten sind. Key ent-
              spricht der RÅckgabe von \#evnt_keybd\#, Stat dem
              Tastaturzustand von \#evnt_button\#.

Querverweise  \#TEvent\#  \#TKeyMenu.TestKey\#  \#TKey\#

\end


screen("TEvent.TestMenu":sensitive)
TEvent.TestMenu (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMenu(mNum: integer): boolean; virtual;

Beschreibung  Gibt false zurÅck. Muû Åberschrieben werden, damit
              das Objekt die Anwahl eines MenÅeintrags ÅberprÅfen
              kann. Sollte dann true zurÅckgeben, wenn mNum dem
              gewÅnschten Index des MenÅbaums entspricht.

Querverweise  \#TEvent\#  \#TKeyMenu.TestMenu\#  \#TMenu\#

\end


screen("TEvent.TestButton":sensitive)
TEvent.TestButton (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestButton(mX,mY,BStat,KStat,Clicks:
                                       integer): boolean; virtual;

Beschreibung  Gibt false zurÅck. Muû Åberschrieben werden, damit
              das Objekt Mausklicks ÅberprÅfen kann. Sollte dann
              true zurÅckgeben, wenn die gewÅnschten Werte Åber-
              geben werden. Die Variablen entsprechen denen von
              \#evnt_button\#, Clicks gibt die Anzahl der Maus-
              klicks an, die zu dem Ereignis gefÅhrt haben.

Querverweise  \#TEvent\#

\end


screen("TEvent.TestMouse":sensitive,"TestMouse":sensitive)
TEvent.TestMouse (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMouse(M,mX,mY,BStat,KStat: integer):
                                                 boolean; virtual;

Beschreibung  Gibt false zurÅck. Muû Åberschrieben werden, damit
              das Objekt ÅberprÅfen kann, ob die Maus einen recht-
              eckigen Bereich betritt oder verlÑût. Die Variablen
              sind wie bei \#evnt_mouse\# belegt, M gibt die Nummer
              des Rechtecks (\#MU_M1\#,\#MU_M2\#) an (siehe \#evnt_multi\#).
              WICHTIG: Diese Methode sollte nicht Åberschrieben
              werden, da die Rechtecke intern von ObjectGEM fÅr
              die Fensterklassen-Mauscursor verwendet werden.

Querverweise  \#TEvent\#

\end


screen("TEvent.TestMessage":sensitive)
TEvent.TestMessage (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMessage(Pipe: \#Pipearray\#): boolean;
                                                     virtual;

Beschreibung  Gibt false zurÅck. Muû Åberschrieben werden, damit
              das Objekt GEM-Nachrichten ÅberprÅfen kann. Sollte
              im Erfolgsfall true zurÅckgeben. Pipearray ent-
              spricht dem ARRAY_8 von \#evnt_mesag\#.

Querverweise  \#TEvent\#

\end


screen("TEvent.Work":sensitive)
TEvent.Work (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Work; virtual;

Beschreibung  Macht gar nichts. Kann aber z.B. von den TestXXXX-
              Methoden im Falle eines erfolgreichen Tests aufge-
              rufen werden, was u.a. von \#TKeyMenu\# getan wird.
              An dieser Stelle steht dann z.B. die Abarbeitung
              einer zu einem MenÅeintrag gehîrigen Dialogbox etc.

Querverweise  \#TEvent\#

\end


screen("TIcon":sensitive,"PIcon":sensitive)
TIcon                                                Unit \#OWindows\#
------------------------------------------------------------------

Mit diesem Objekttyp werden Icons verwaltet. Jedes Icon sollte
mit einem TIcon-Objekt verknÅpft werden, da hierdurch eine auto-
matische Selektion, Verschiebung etc. mîglich ist. Als Nachfahren
von TEvent hÑngen sich die Icons in die \#EventList\# ein. Zur Aus-
wertung stehen u.a. die Methoden \#IconSelect\#, \#FirstIcon\# und
\#NextIcon\# zur VerfÅgung.


	Pointer
		PIcon = ^TIcon;

	Felder
		\link("TIcon.ADialog")ADialog\#
		\#Click\#
		\#Shift\#
		\link("TIcon.VKey")VKey\#
		\link("TIcon.VStat")VStat\#
		\link("TIcon.XPos")XPos\#
		\link("TIcon.YPos")YPos\#

	Methoden
		\link("TIcon.Init")Init\#
		\link("TIcon.Done")Done\#
		\link("TIcon.Check")Check\#
		\link("TIcon.GetCheck")GetCheck\#
		\link("TIcon.GetHelp")GetHelp\#
		\#GetOutline\#
		\link("TIcon.GetText")GetText\#
		\link("TIcon.Hide")Hide\#
		\#IMMoved\#
		\link("TIcon.IsHelpAvailable")IsHelpAvailable\#
		\link("TIcon.IsHidden")IsHidden\#
		\#IsSelected\#
		\link("TIcon.Paint")Paint\#
		\link("TIcon.SetCheck")SetCheck\#
		\link("TIcon.SetHelp")SetHelp\#
		\#SetPos\#
		\link("TIcon.SetText")SetText\#
		\link("TIcon.TestButton")TestButton\#
		\link("TIcon.TestKey")TestKey\#
		\link("TIcon.Toggle")Toggle\#
		\link("TIcon.Uncheck")Uncheck\#
		\link("TIcon.Unhide")Unhide\#

	Vorfahre
		\#TEvent\#
	Nachfahre
		---

\end


screen("TIcon.ADialog":sensitive)
TIcon.ADialog (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ADialog: \#PDialog\#;

Beschreibung  Dies ist ein universeller Dialog-Pointer, der in
              \#TIcon.Init\# zunÑchst auf \#nil\# gesetzt wird. So ist
              jedes TIcon-Objekt bereits auf die Verwaltung eines
              Dialogs vorbereitet.
              In der \link("TEvent.Work")Work\#-Methode kann der Dialog dann initiali-
              siert bzw. abgearbeitet werden (siehe Beispiel-
              programme).

Querverweise  \#TIcon\#

\end


screen("TIcon.Click":sensitive,"Click":sensitive)
TIcon.Click (Feld)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Click: integer;  (nur lesen)

Beschreibung  Wenn die \link("TEvent.Work")Work\#-Methode aufgerufen wird, steht in
              diesem Feld die Anzahl der Mausklicks (kann bei
              Tastaturanwahl auch Null sein!).

Querverweise  \#TIcon\#  \#TIcon.Shift\#

\end


screen("TIcon.Shift":sensitive,"Shift":sensitive)
TIcon.Shift (Feld)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Shift: integer;  (nur lesen)

Beschreibung  Wenn die \link("TEvent.Work")Work\#-Methode aufgerufen wird, steht in
              diesem Feld der Status der Umschalttasten.

Querverweise  \#TIcon\#  \#TIcon.Click\#

\end


screen("TIcon.VKey":sensitive)
TIcon.VKey (Feld)                                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VKey: integer;

Beschreibung  Gibt zusammen mit \link("TIcon.VStat")VStat\# die Taste an, auf die
              \link("TIcon.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TIcon.Init\# auf -1 gesetzt, d.h. das Icon ist nicht
              per Tastatur anwÑhlbar.

Querverweise  \#TIcon\#

\end


screen("TIcon.VStat":sensitive)
TIcon.VStat (Feld)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VStat: integer;

Beschreibung  Gibt zusammen mit \link("TIcon.VKey")VKey\# die Taste an, auf die
              \link("TIcon.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TIcon.Init\# auf Null gesetzt.
              WICHTIG: Wenn egal ist, ob die linke oder die rechte
              <Shift>-Taste gedrÅckt ist, sollte hier \#K_SHIFT\# ein-
              getragen sein.

Querverweise  \#TIcon\#

\end


screen("TIcon.XPos":sensitive)
TIcon.XPos (Feld)                                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XPos: integer;  (nur lesen)

Beschreibung  Gibt die X-Position des Icons in Pixel relativ zum
              \link("TEvent.Parent")Parent\# an, d.h. entweder zum zugehîrigen Fenster-
              Arbeitsbereich oder zum Desktop.

Querverweise  \#TIcon\#  \#TIcon.YPos\#  \#TIcon.SetPos\#

\end


screen("TIcon.YPos":sensitive)
TIcon.YPos (Feld)                                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YPos: integer;  (nur lesen)

Beschreibung  Gibt die Y-Position des Icons in Pixel relativ zum
              \link("TEvent.Parent")Parent\# an, d.h. entweder zum zugehîrigen Fenster-
              Arbeitsbereich oder zum Desktop.

Querverweise  \#TIcon\#  \#TIcon.XPos\#  \#TIcon.SetPos\#

\end


screen("TIcon.Init":sensitive)
TIcon.Init (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject; ATree,
                               AnIndex,iX,iY: integer; Movable,
                               Selectble: boolean; AName,
                               Hlp: string);

Beschreibung  Ruft den Vorfahren \#TEvent.Init\# auf. Danach wird die
              Adresse des Icons mit ATree und AnIndex berechnet,
              \link("TEvent.Style")Style\# wird auf \#es_Icon\# gesetzt und \#SetPos\#(iX,iY)
              sowie \#SetText\#(AName) werden aufgerufen.
              Movable gibt an, ob das Icon bewegt werden darf,
              Selectble gilt entsprechend fÅr die Anwahl. Hlp
              enthÑlt den Text fÅr die BubbleHelp.
              WICHTIG: Im Moment sind nur Dialogelemente vom Typ
              \#G_IMAGE\# erlaubt. \#G_ICON\#, \#G_CICON\# und freie Images
              werden noch zurÅckgewiesen. Auûerdem sollten TIcon-
              Objekte z.Z. nur in Fenstern und _nicht_ auf dem
              Desktop verwendet werden, da das Objekt TDesktop
              noch nicht verfÅgbar ist.

Querverweise  \#TIcon\#

\end


screen("TIcon.Done":sensitive)
TIcon.Done (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Intern benîtigte Speicherstrukturen werden freige-
              geben. Danach wird \#TEvent.Done\# aufgerufen.

Querverweise  \#TIcon\#

\end


screen("TIcon.Check":sensitive)
TIcon.Check (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Check; virtual;

Beschreibung  Ruft \#SetCheck\#(\#bf_Checked\#) auf und selektiert damit
              das Icon.

Querverweise  \#TIcon\#  \#TIcon.Uncheck\#  \#TIcon.Toggle\#

\end


screen("TIcon.GetCheck":sensitive)
TIcon.GetCheck (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCheck: integer; virtual;

Beschreibung  Gibt \#bf_Checked\# bzw. \#bf_Unchecked\# zurÅck, je nachdem
              ob das Icon markiert ist oder nicht.

Querverweise  \#TIcon\#  \#TIcon.SetCheck\#

\end


screen("TIcon.GetHelp":sensitive)
TIcon.GetHelp (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetHelp: string; virtual;

Beschreibung  Gibt den Hilfstext fÅr die BubbleHelp zurÅck.

Querverweise  \#TIcon\#  \#TIcon.SetHelp\#  \#TIcon.IsHelpAvailable\#

\end


screen("TIcon.GetOutline":sensitive,"GetOutline":sensitive)
TIcon.GetOutline (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetOutline(var IcnRect,
                             TxtRect: \#GRECT\#): boolean; virtual;

Beschreibung  Gibt die Umriûrechtecke (absolute Koordinaten) fÅr
              das Icon und den Icontext zurÅck, was fÅr die Se-
              lektion und das Verschieben benîtigt wird.
              Wenn das Icon keinen Text besitzt, ist die RÅckgabe
              false und TxtRect sollte ein Rechteck _auûerhalb_
              des Bildschirms beschreiben (zur einfacheren Aus-
              wertung). Stehen in beiden GRECTs gÅltige Recht-
              ecke, wird true zurÅckgegeben.

Querverweise  \#TIcon\#  \#TIcon.IsSelected\#

\end


screen("TIcon.GetText":sensitive)
TIcon.GetText (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Gibt den Text des Icons zurÅck bzw. einen Leer-
              string, wenn das Icon keinen Text besitzt.

Querverweise  \#TIcon\#  \#TIcon.SetText\#

\end


screen("TIcon.Hide":sensitive)
TIcon.Hide (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Hide(Draw: boolean); virtual;

Beschreibung  Macht das Icon unsichtbar. Ist Draw true, wird dann
              das \link("TEvent.Parent")Parent\#-Objekt neu gezeichnet (d.h. der Fenster-
              Arbeitsbereich oder der Desktop), damit das Icon
              auch auf dem Bildschirm (und nicht nur logisch)
              verschwindet.
              Wenn man allerdings mehrere Icons versteckt und
              das komplette Fenster anschlieûend neu zeichnet,
              kann man Draw auf false setzen.
              Versteckte Icons kînnen (natÅrlich) nicht ange-
              wÑhlt bzw. verschoben werden.

Querverweise  \#TIcon\#  \#TIcon.Unhide\#  \#TIcon.IsHidden\#

\end


screen("TIcon.IMMoved":sensitive,"IMMoved":sensitive)
TIcon.IMMoved (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure IMMoved(X,Y: integer); virtual;

Beschreibung  Wird aufgerufen, nachdem das Icon vom Benutzer
              verschoben wurde.
              Intern wird \#SetPos\#(X,Y,true) aufgerufen.

Querverweise  \#TIcon\#

\end


screen("TIcon.IsHelpAvailable":sensitive)
TIcon.IsHelpAvailable (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsHelpAvailable: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das mit \link("TIcon.GetHelp")GetHelp\# ein Hilfs-
              text fÅr die BubbleHelp geliefert werden kann.

Querverweise  \#TIcon\#

\end


screen("TIcon.IsHidden":sensitive)
TIcon.IsHidden (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsHidden: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Icon unsichtbar ist,
              false sonst.
              Unsichtbare Icons kînnen weder angewÑhlt noch
              verschoben werden.

Querverweise  \#TIcon\#  \#TIcon.Hide\#  \#TIcon.Unhide\#

\end


screen("TIcon.IsSelected":sensitive,"IsSelected":sensitive)
TIcon.IsSelected (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsSelected(r: GRECT): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn sich das Rechteck in r und
              mind. eines der von \#GetOutline\# gelieferten Recht-
              ecke Åberschneiden.
              Wird fÅr die Selektion per Klick und durch die
              Methode \#TApplication.Rubbox\# benîtigt.

Querverweise  \#TIcon\#

\end


screen("TIcon.Paint":sensitive)
TIcon.Paint (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint; virtual;

Beschreibung  Zeichnet das Icon und den dazugehîrigen Text unter
              Beachtung der jeweiligen Rechteckliste. FÅr Dialog-
              elemente vom Typ \#G_IMAGE\# wird automatisch eine
              passende "Maske" erzeugt.
              Wenn das Icon unsichtbar ist, passiert in dieser
              Methode nichts!

Querverweise  \#TIcon\#  \#TIcon.IsHidden\#

\end


screen("TIcon.SetCheck":sensitive)
TIcon.SetCheck (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCheck(CheckFlag: integer); virtual;

Beschreibung  Bestimmt die Markierung des Icons, d.h.
              \#bf_Checked\# oder \#bf_Unchecked\#.

Querverweise  \#TIcon\#        \#TIcon.GetCheck\#  \#TIcon.Toggle\#
              \#TIcon.Check\#  \#TIcon.Uncheck\#

\end


screen("TIcon.SetHelp":sensitive)
TIcon.SetHelp (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetHelp(Hlp: string); virtual;

Beschreibung  Weist dem Icon einen neuen Hilfstext fÅr die
              BubbleHelp zu.

Querverweise  \#TIcon\#  \#TIcon.GetHelp\#

\end


screen("TIcon.SetPos":sensitive,"SetPos":sensitive)
TIcon.SetPos (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetPos(iX,iY: integer; Redraw: boolean);
                                                         virtual;

Beschreibung  Bringt das Icon an die neue Position iX,iY. Wenn
              Redraw true ist, wird das Icon vorher an der alten
              Stelle gelîscht und nachher an der neuen Position
              gezeichnet.

Querverweise  \#TIcon\#  \#TIcon.XPos\#  \#TIcon.YPos\#

\end


screen("TIcon.SetText":sensitive)
TIcon.SetText (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(AName: string); virtual;

Beschreibung  Weist dem Icon einen neuen Text zu und stellt
              diesen dar.

Querverweise  \#TIcon\#  \#TIcon.GetText\#

\end


screen("TIcon.TestButton":sensitive)
TIcon.TestButton (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestButton(mX,mY,BStat,KStat,
                               Clicks: integer): boolean; virtual;

Beschreibung  KÅmmert sich um die Icon-Selektion per Maus so, wie
              sie vom MultiTOS-Desktop her bekannt ist, d.h. An-
              wahl und Verschieben.
              Wenn das Icon _nicht_ verschoben wird, wird \link("TEvent.Work")Work\#
              aufgerufen, nachdem \#Click\# und \#Shift\# entsprechend
              gesetzt wurden.
              Wurde das Icon mit der rechten Maustaste ange-
              klickt, wird hier die BubbleHelp angezeigt.

Querverweise  \#TIcon\#  \#TIcon.TestKey\#  \#TIcon.IsHidden\#

\end


screen("TIcon.TestKey":sensitive)
TIcon.TestKey (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestKey(Stat,Key: integer): boolean;
                                                       virtual;

Beschreibung  Wenn \link("TIcon.VStat")VStat\# und \link("TIcon.VKey")VKey\# die zu Stat und Key passenden
              Werte enthalten, wird das Icon selektiert und dann
              \link("TEvent.Work")Work\# aufgerufen. Vorher werden noch \#Click\# und \#Shift\#
              auf Null gesetzt.

Querverweise  \#TIcon\#  \#TIcon.TestButton\#  \#TIcon.IsHidden\#

\end


screen("TIcon.Toggle":sensitive)
TIcon.Toggle (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Toggle; virtual;

Beschreibung  Wechselt bei dem Icon den Zustand der Markierung.

Querverweise  \#TIcon\#  \#TIcon.SetCheck\#

\end


screen("TIcon.Uncheck":sensitive)
TIcon.Uncheck (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Uncheck; virtual;

Beschreibung  Ruft \#SetCheck\#(\#bf_Unchecked\#) auf und deselektiert
              dadurch das Icon.

Querverweise  \#TIcon\#  \#TIcon.Check\#  \#TIcon.Toggle\#

\end


screen("TIcon.Unhide":sensitive)
TIcon.Unhide (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Unhide; virtual;

Beschreibung  Macht das Icon sichtbar und zeichnet es.

Querverweise  \#TIcon\#  \#TIcon.Hide\#  \#TIcon.IsHidden\#

\end


screen("TCollection":sensitive,"PCollection":sensitive)
TCollection                                           Unit \#Objects\#
------------------------------------------------------------------

TCollection ist ein Datentyp fÅr dynamische Arrays, der seine
Grîûe zur Laufzeit automatisch verÑndern kann. StandardmÑûig
werden Nachfahren von \#TObject\# verwaltet, abgeleitete Objekte
speichern z.B. Zeichenketten (\#TStringCollection\#). Routinen wie
das Iterieren von Elementen erleichtern die Programmierung.

	Pointer
		PCollection = ^TCollection;

	Felder
		\#Count\#
		\#Delta\#
		\#Items\#
		\#Limit\#

	Methoden
		\link("TCollection.Init")Init\#
		\link("TCollection.Done")Done\#
		\link("TCollection.At")At\#
		\#AtDelete\#
		\#AtFree\#
		\#AtInsert\#
		\#AtPut\#
		\link("TCollection.Delete")Delete\#
		\#DeleteAll\#
		\link("TCollection.Error")Error\#
		\link("TCollection.FirstThat")FirstThat\#
		\link("TCollection.ForEach")ForEach\#
		\link("TCollection.Free")Free\#
		\#FreeAll\#
		\link("TCollection.FreeItem")FreeItem\#
		\link("TCollection.IndexOf")IndexOf\#
		\link("TCollection.Insert")Insert\#
		\#LastThat\#
		\#Pack\#
		\#SetLimit\#

	Vorfahre
		\#TObject\#
	Nachfahre
		\#TSortedCollection\#

\end


screen("TCollection.Items":sensitive,"Items":sensitive)
TCollection.Items (Feld)                              Unit \#Objects\#
------------------------------------------------------------------

Deklaration   Items: PItemList;  (nur lesen)

Beschreibung  Ein Zeiger auf ein Array von Elementzeigern.

Querverweise  \#TCollection\#  \#TItemList\#

\end


screen("TCollection.Limit":sensitive,"Limit":sensitive)
TCollection.Limit (Feld)                              Unit \#Objects\#
------------------------------------------------------------------

Deklaration   Limit: longint;  (nur lesen)

Beschreibung  Die Anzahl der z.Z. reservierten Element-EintrÑge
              in der \#Items\#-Liste. Ist meistens grîûer als \#Count\#
              (leere EintrÑge!).

Querverweise  \#TCollection\#       \#SetLimit\#
              \#TCollection.Init\#  \#Delta\#

\end


screen("TCollection.Count":sensitive,"Count":sensitive)
TCollection.Count (Feld)                              Unit \#Objects\#
------------------------------------------------------------------

Deklaration   Count: longint;  (nur lesen)

Beschreibung  Die tatsÑchliche Anzahl der z.Z. gespeicherten
              Elemente in der \#Items\#-Liste, immer kleiner
              als \#MaxCollectionSize\#.

Querverweise  \#TCollection\#  \#Limit\#

\end


screen("TCollection.Delta":sensitive,"Delta":sensitive)
TCollection.Delta (Feld)                              Unit \#Objects\#
------------------------------------------------------------------

Deklaration   Delta: longint;  (nur lesen)

Beschreibung  Die Anzahl der Elemente, um die die \#Items\#-Liste
              vergrîûert wird, wenn sie voll ist. Ist Delta=0,
              kann die Kollektion nicht vergrîûert werden, sie
              ist dann also auf \#Limit\# beschrÑnkt.

Querverweise  \#TCollection\#  \#TCollection.Init\#

\end


screen("TCollection.Init":sensitive)
TCollection.Init (Methode)                            Unit \#Objects\#
------------------------------------------------------------------

Deklaration   constructor Init(ALimit,ADelta: longint);

Beschreibung  Ruft den Vorfahren \#TObject.Init\# auf und setzt
              \#Delta\# auf ADelta. Ist ADelta kleiner als Null, wird
              Delta auf Null gesetzt. Danach wird \#Items\# mit der
              Anfangsgrîûe von ALimit Elementen initialisiert.
              Die Kollektion kann sich danach bei Bedarf mit der
              Schrittweite Delta vergrîûern, bis kein Speicher
              mehr vorhanden ist oder \#MaxCollectionSize\# Elemente
              gespeichert sind.

Querverweise  \#TCollection\#

\end


screen("TCollection.Done":sensitive)
TCollection.Done (Methode)                            Unit \#Objects\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt alle Elemente mit \#FreeAll\# frei und lîscht
              danach die \#Items\#-Liste mit \#SetLimit\#(0). Zum
              Schluû wird \#TObject.Done\# aufgerufen.

Querverweise  \#TCollection\#

\end


screen("TCollection.At":sensitive)
TCollection.At (Methode)                              Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function At(Index: longint): pointer; virtual;

Beschreibung  Gibt einen Zeiger auf das Element mit der Nummer
              Index zurÅck, wodurch \#Items\# wie ein indiziertes
              Array behandelt werden kann. Ist Index kleiner als
              Null bzw. grîûer gleich \#Count\#, wird nil zurÅck-
              gegeben. Auûerdem wird dann \link("TCollection.Error")Error\# mit den Werten
              \#coIndexError\# und Index aufgerufen.

Querverweise  \#TCollection\#  \#TCollection.IndexOf\#

\end


screen("TCollection.AtDelete":sensitive,"AtDelete":sensitive)
TCollection.AtDelete (Methode)                        Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure AtDelete(Index: longint); virtual;

Beschreibung  Lîscht das Element mit der Nummer Index und schiebt
              alle folgenden Elemente um eine Position nach oben.
              \#Count\# wird um eins erniedrigt, \#Limit\# wird jedoch
              beibehalten. Ist Index kleiner als Null bzw. grîûer
              gleich \#Count\#, wird \link("TCollection.Error")Error\# mit den Werten
              \#coIndexError\# und Index aufgerufen.

Querverweise  \#TCollection\#       \#TCollection.Delete\#
              \#TCollection.Free\#  \#TCollection.FreeItem\#

\end


screen("TCollection.AtFree":sensitive,"AtFree":sensitive)
TCollection.AtFree (Methode)                          Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure AtFree(Index: longint); virtual;

Beschreibung  Lîscht das Element mit der Nummer Index und
              gibt es frei.

Querverweise  \#TCollection\#
              \#TCollection.AtDelete\#  \#TCollection.FreeItem\#

\end


screen("TCollection.AtInsert":sensitive,"AtInsert":sensitive)
TCollection.AtInsert (Methode)                        Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure AtInsert(Index: longint; Item: pointer);
                                                         virtual;

Beschreibung  FÅgt Item an der Position Index in \#Items\# ein und
              verschiebt alle folgenden Elemente um eins nach
              unten. Ist \#Count\# vor dem Aufruf gleich \#Limit\#, wird
              die Kollektion um \#Delta\# Elemente vergrîûert. Kann
              sie nicht vergrîûert werden, wird \link("TCollection.Error")Error\# mit dem Wert
              \#coOverflow\# aufgerufen (kann die Kollektion nicht
              vergrîûert werden, weil Delta=0 ist, wird Error mit
              dem Wert \#coIndexError\# aufgerufen). Ist Index kleiner
              als Null bzw. grîûer gleich Count, wird Error mit
              den Werten coIndexError und Index aufgerufen.

Querverweise  \#TCollection\#  \#TCollection.AtPut\#

\end


screen("TCollection.AtPut":sensitive,"AtPut":sensitive)
TCollection.AtPut (Methode)                           Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure AtPut(Index: longint; Item: pointer);
                                                       virtual;

Beschreibung  Ersetzt das Element mit der Nummer Index durch
              Item. Ist Index kleiner als Null bzw. grîûer gleich
              \#Count\#, wird \link("TCollection.Error")Error\# mit den Werten \#coIndexError\# und
              Index aufgerufen.

Querverweise  \#TCollection\#  \#TCollection.AtInsert\#

\end


screen("TCollection.Delete":sensitive)
TCollection.Delete (Methode)                          Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Delete(Item: pointer); virtual;

Beschreibung  Lîscht das Element, auf das Item zeigt, aus der
              Kollektion. Entspricht \#AtDelete\#(\#IndexOf\#(Item)).

Querverweise  \#TCollection\#  \#TCollection.DeleteAll\#

\end


screen("TCollection.DeleteAll":sensitive,"DeleteAll":sensitive)
TCollection.DeleteAll (Methode)                       Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure DeleteAll; virtual;

Beschreibung  Setzt \#Count\# auf Null und lîscht damit alle Elemente
              aus der Kollektion. WICHTIG: Die aktuelle, durch
              \#Limit\# angegebene Grîûe bleibt bestehen!

Querverweise  \#TCollection\#
              \#TCollection.Delete\#  \#TCollection.AtDelete\#

\end


screen("TCollection.Error":sensitive)
TCollection.Error (Methode)                           Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Error(Code,Info: longint); virtual;

Beschreibung  Wird aufgerufen, wenn z.B. einer Methode ein un-
              gÅltiger Index Åbergeben wird oder ein Speicher-
              Åberlauf innerhalb der Kollektion auftritt.
              StandardmÑûig erzeugt diese Methode einen
              Laufzeitfehler mit der Nummer 212-Code.

Querverweise  \#TCollection\#  \#coXXXX-Konstanten\#

\end


screen("TCollection.FirstThat":sensitive)
TCollection.FirstThat (Methode)                       Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function FirstThat(Test: \#PIterationFunc\#): pointer;

Beschreibung  FirstThat ruft fÅr jedes Element der Kollektion die
              durch Test bestimmte boolesche Funktion auf, bis
              Test true zurÅckgibt. FirstThat gibt dann den
              Elementzeiger zurÅck, fÅr den Test true zurÅckgege-
              ben hat, oder nil, falls Test immer false geliefert
              hat. Der Pointer Test sollte eine GLOBALE (Unter-
              schied zu ObjectWindows!) Funktion sein, der ein
              pointer-Parameter Åbergeben wird und die boolean
              zurÅckgibt.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Test-Funktion nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TCollection\#
              \#TCollection.ForEach\#  \#TCollection.LastThat\#


Beispiel      function Passt(p: pointer): boolean;
                { ... }

              Passt sollte eine globale Funktion sein.
              Sei Liste ein TCollection-Objekt:

              p:=Liste.FirstThat(@Passt);

\end


screen("TCollection.ForEach":sensitive)
TCollection.ForEach (Methode)                         Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure ForEach(Action: \#PIterationProc\#);

Beschreibung  ForEach ruft fÅr jedes Element der Kollektion die
              durch Action bestimmte Prozedur auf. Der Pointer
              Action sollte eine GLOBALE (Unterschied zu Object-
              Windows!) Prozedur sein, der ein pointer-Parameter
              Åbergeben wird.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Prozedur nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TCollection\#
              \#TCollection.FirstThat\#  \#TCollection.LastThat\#


Beispiel      procedure ZeigeAn(p: pointer);
                { ... }

              ZeigeAn sollte eine globale Prozedur sein.
              Sei Liste ein TCollection-Objekt:

              Liste.ForEach(@ZeigeAn);

\end


screen("TCollection.Free":sensitive)
TCollection.Free (Methode)                            Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Free(Item: pointer);

Beschreibung  Lîscht das Element, auf das Item zeigt, und gibt es
              frei. Entspricht \link("TCollection.Delete")Delete\#(Item); \#FreeItem\#(Item);.

Querverweise  \#TCollection\#

\end


screen("TCollection.FreeAll":sensitive,"FreeAll":sensitive)
TCollection.FreeAll (Methode)                         Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure FreeAll; virtual;

Beschreibung  Lîscht alle Elemente und gibt sie frei.

Querverweise  \#TCollection\#  \#TCollection.DeleteAll\#

\end


screen("TCollection.FreeItem":sensitive)
TCollection.FreeItem (Methode)                        Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure FreeItem(Item: pointer); virtual;

Beschreibung  Gibt das Element frei, auf das Item zeigt.
              StandardmÑûig geht diese Methode davon aus, daû
              die Elemente Nachfahren von \#TObject\# sind, d.h.
              das Element wird mit Dispose(PObject(Item),\#Done\#)
              freigegeben. Die Methode muû Åberschrieben werden,
              wenn andere Elemente verwaltet werden sollen (z.B.
              Strings, siehe \#TStringCollection.FreeItem\#).
              FreeItem wird von \link("TCollection.Free")Free\# und \#FreeAll\# aufgerufen
              und sollte niemals direkt aufgerufen werden!

Querverweise  \#TCollection\#

\end


screen("TCollection.IndexOf":sensitive)
TCollection.IndexOf (Methode)                         Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function IndexOf(Item: pointer): longint; virtual;

Beschreibung  Gibt die Nummer des Element zurÅck, auf das Item
              zeigt, und ist damit das GegenstÅck zu \link("TCollection.At")At\#. Befindet
              sich Item nicht in der Kollektion, wird -1 zurÅck-
              gegeben.

Querverweise  \#TCollection\#

\end


screen("TCollection.Insert":sensitive)
TCollection.Insert (Methode)                          Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Insert(Item: pointer); virtual;

Beschreibung  FÅgt das Element Item in die Kollektion ein.
              StandardmÑûig geschieht dies mit \#AtInsert\#(\#Count\#,
              Item) am Ende der Kollektion.

Querverweise  \#TCollection\#

\end


screen("TCollection.LastThat":sensitive,"LastThat":sensitive)
TCollection.LastThat (Methode)                        Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function LastThat(Test: \#PIterationFunc\#): pointer;
                                                       virtual;

Beschreibung  LastThat ruft in umgekehrter Reihenfolge fÅr jedes
              Element der Kollektion die durch Test bestimmte
              boolesche Funktion auf, bis Test true zurÅckgibt.
              LastThat gibt dann den Elementzeiger zurÅck, fÅr den
              Test true zurÅckgegeben hat, oder nil, falls Test
              immer false geliefert hat. Test sollte eine GLOBALE
              (Unterschied zu ObjectWindows!) Funktion sein, der
              ein pointer-Parameter Åbergeben wird und die boolean
              zurÅckgibt.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Test-Funktion nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TCollection\#
              \#TCollection.ForEach\#  \#TCollection.FirstThat\#


Beispiel      function Passt(p: pointer): boolean;
                { ... }

              Passt sollte eine globale Funktion sein.
              Sei Liste ein TCollection-Objekt:

              p:=Liste.LastThat(@Passt);

\end


screen("TCollection.Pack":sensitive,"Pack":sensitive)
TCollection.Pack (Methode)                            Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Pack; virtual;

Beschreibung  Lîscht alle nil-Zeiger in der Kollektion und
              setzt danach \#Limit\# auf den kleinstmîglichen
              Wert (d.h. auf \#Count\#).

Querverweise  \#TCollection\#

\end


screen("TCollection.SetLimit":sensitive,"SetLimit":sensitive)
TCollection.SetLimit (Methode)                        Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure SetLimit(ALimit: longint); virtual;

Beschreibung  Vergrîûert oder Verkleinert die Kollektion auf
              maximal ALimit Elemente. Ist ALimit kleiner als
              \#Count\#, wird die \#Limit\# auf Count gesetzt, ist ALimit
              grîûer als \#MaxCollectionSize\#, wird Limit auf
              MaxCollectionSize gesetzt.

Querverweise  \#TCollection\#

\end


screen("TSortedCollection":sensitive,"PSortedCollection":sensitive)
TSortedCollection                                     Unit \#Objects\#
------------------------------------------------------------------

TSortedCollection ist ein Nachfahre von \#TCollection\#, mit dem
sortierte Kollektionen verwaltet werden kînnen. Die Art der
Sortierung wird durch die Methode \#Compare\# bestimmt, die zu diesem
Zweck Åberschrieben werden MUSS. TSortedCollection kann Kollek-
tionen mit und ohne doppelte SchlÅssel verwalten, was durch
\#Duplicates\# angegeben wird.

	Pointer
		PSortedCollection = ^TSortedCollection;

	Felder
		\#Duplicates\#

	Methoden
		\link("TSortedCollection.Init")Init\#
		\link("TSortedCollection.Compare")Compare\#
		\link("TSortedCollection.IndexOf")IndexOf\#
		\link("TSortedCollection.Insert")Insert\#
		\#KeyOf\#
		\#Search\#

	Vorfahre
		\#TCollection\#
	Nachfahre
		\#TStringCollection\#

\end


screen("TSortedCollection.Duplicates":sensitive,"Duplicates":sensitive)
TSortedCollection.Duplicates (Feld)                   Unit \#Objects\#
------------------------------------------------------------------

Deklaration   Duplicates: boolean;

Beschreibung  Duplicates gibt an, ob Elemente mit gleichem
              SchlÅssel innerhalb der Kollektion erlaubt sind.
              StandardmÑûig wird das Feld von \link("TSortedCollection.Init")Init\# auf false
              gesetzt, d.h. es darf kein SchlÅssel mehrfach
              vorkommen.

Querverweise  \#TSortedCollection\#
              \#TSortedCollection.KeyOf\#  \#TSortedCollection.Insert\#

\end


screen("TSortedCollection.Init":sensitive)
TSortedCollection.Init (Methode)                      Unit \#Objects\#
------------------------------------------------------------------

Deklaration   constructor Init(ALimit,ADelta: longint);

Beschreibung  Ruft den Vorfahren \#TCollection.Init\# auf und
              setzt \#Duplicates\# auf false, d.h. es sind keine
              doppelten SchlÅssel erlaubt.

Querverweise  \#TSortedCollection\#

\end


screen("TSortedCollection.Compare":sensitive)
TSortedCollection.Compare (Methode)                   Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function Compare(Key1,Key2: pointer): integer;
                                                      virtual;

Beschreibung  Compare ist eine abstrakte Methode, die Åber-
              schrieben werden MUSS. Dabei werden mit \#KeyOf\#
              aus Key1 und Key2 zwei SchlÅsselwerte ermittelt,
              die dann verglichen werden. Die RÅckgabe ist wie
              folgt definiert: -1, wenn Key1<Key2; 0, wenn
              Key1=Key2; 1, wenn Key1>Key2.
              Wird Compare nicht Åberschrieben, wird die
              Prozedur \#Abstract\# aufgerufen, die einen Lauf-
              zeitfehler erzeugt.

Querverweise  \#TSortedCollection\#  \#TSortedCollection.Search\#

\end


screen("TSortedCollection.IndexOf":sensitive)
TSortedCollection.IndexOf (Methode)                   Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function IndexOf(Item: pointer): longint; virtual;

Beschreibung  Ermittelt mit \#Search\# die Nummer des Elements
              Item. Ist das gesuchte Element nicht vorhanden,
              gibt IndexOf -1 zurÅck.

Querverweise  \#TSortedCollection\#

\end


screen("TSortedCollection.Insert":sensitive)
TSortedCollection.Insert (Methode)                    Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure Insert(Item: pointer); virtual;

Beschreibung  Wenn das neue Element in der Kollektion noch nicht
              vorhanden ist, wird es an der richtigen Stelle ein-
              sortiert. Ist das Element schon vorhanden und
              \#Duplicates\# true, wird das Element vor dem bereits
              existierenden Element eingefÅgt. Ist das Element
              schon vorhanden, Duplicates aber false, wird das
              alte Element durch das neue ersetzt(!). Das alte
              Element wird in diesem Fall mit \#FreeItem\# freige-
              geben.

Querverweise  \#TSortedCollection\#  \#TSortedCollection.Search\#

\end


screen("TSortedCollection.KeyOf":sensitive,"KeyOf":sensitive)
TSortedCollection.KeyOf (Methode)                     Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function KeyOf(Item: pointer): pointer; virtual;

Beschreibung  Gibt fÅr das Element Item einen Zeiger auf den
              SchlÅssel des Elements zurÅck. StandardmÑûig ist
              dies Item selbst. Sollen andere Daten verwaltet
              werden (z.B. Records), muû KeyOf Åberschrieben
              werden, damit ein anderer Zeiger (in diesem Fall
              z.B. auf ein Feld des Records) zurÅckgegeben
              werden kann.

Querverweise  \#TSortedCollection\#


Beispiel      type PName = ^TName;
                   TName = record
                             Nachname, Vorname: string
                           end;
              { ... }

              function MySColl.KeyOf(Item: pointer): pointer;

                begin
                  KeyOf:=@PName(Item)^.Nachname
                end;

\end


screen("TSortedCollection.Search":sensitive,"Search":sensitive)
TSortedCollection.Search (Methode)                    Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function Search(Key: pointer; var Index: longint):
                                                 boolean; virtual;

Beschreibung  Sucht das Element mit dem SchlÅssel Key in der
              Kollektion. Konnte dies gefunden werden, liefert
              Search true zurÅck, und Index enthÑlt die Nummer
              des gefundenen Elements. Ansonsten wird false
              zurÅckgegeben und Index auf die Position gesetzt,
              bei der das angegebene Element eingefÅgt wÅrde.

Querverweise  \#TSortedCollection\#
              \#TSortedCollection.Compare\#  \#TSortedCollection.Insert\#

\end


screen("TStringCollection":sensitive,"PStringCollection":sensitive)
TStringCollection                                     Unit \#Objects\#
------------------------------------------------------------------

TStringCollection ist ein Nachfahre von \#TSortedCollection\# und
verwaltet sortierte Pascal-Zeichenketten (\#String\#s).

	Pointer
		PStringCollection = ^TStringCollection;

	Methoden
		\link("TStringCollection.Init")Init\#
		\link("TStringCollection.Compare")Compare\#
		\link("TStringCollection.FreeItem")FreeItem\#

	Vorfahre
		\#TSortedCollection\#
	Nachfahre
		\#TStrCollection\#

\end


screen("TStringCollection.Init":sensitive)
TStringCollection.Init (Methode)                      Unit \#Objects\#
------------------------------------------------------------------

Deklaration   constructor Init(ALimit,ADelta: longint);

Beschreibung  Ruft den Vorfahren \#TSortedCollection.Init\# auf und
              setzt \#Duplicates\# auf true, d.h. gleiche
              Zeichenketten kînnen mehrfach gespeichert werden.

Querverweise  \#TStringCollection\#

\end


screen("TStringCollection.Compare":sensitive)
TStringCollection.Compare (Methode)                   Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function Compare(Key1,Key2: pointer): integer;
                                                      virtual;

Beschreibung  Vergleicht PString(Key1)^ und PString(Key2)^.
              Die RÅckgabe ist bei \#TSortedCollection.Compare\#
              definiert.

Querverweise  \#TStringCollection\#

\end


screen("TStringCollection.FreeItem":sensitive)
TStringCollection.FreeItem (Methode)                  Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure FreeItem(Item: pointer); virtual;

Beschreibung  Lîscht das Element Item aus der Kollektion und
              gibt es mit \#DisposeStr\#(PString(Item)) frei.

Querverweise  \#TStringCollection\#

\end


screen("TStrCollection":sensitive,"PStrCollection":sensitive)
TStrCollection                                        Unit \#Objects\#
------------------------------------------------------------------

TStrCollection ist ein Nachfahre von \#TStringCollection\# und
verwaltet sortierte Null-terminierte \#PChar\#-Zeichenketten.

	Pointer
		PStrCollection = ^TStrCollection;

	Methoden
		\link("TStrCollection.Compare")Compare\#
		\link("TStrCollection.FreeItem")FreeItem\#

	Vorfahre
		\#TStringCollection\#
	Nachfahren
		---

\end


screen("TStrCollection.Compare":sensitive)
TStrCollection.Compare (Methode)                      Unit \#Objects\#
------------------------------------------------------------------

Deklaration   function Compare(Key1,Key2: pointer): integer;
                                                      virtual;

Beschreibung  Gibt \#Sgn\#(\#StrComp\#(Key1,Key2)) zurÅck.

Querverweise  \#TStrCollection\#  \#TSortedCollection.Compare\#

\end


screen("TStrCollection.FreeItem":sensitive)
TStrCollection.FreeItem (Methode)                     Unit \#Objects\#
------------------------------------------------------------------

Deklaration   procedure FreeItem(Item: pointer); virtual;

Beschreibung  Lîscht das Element Item aus der Kollektion und
              gibt es mit \#ChrDispose\#(PChar(Item)) frei.

Querverweise  \#TStrCollection\#

\end


screen("TControl":sensitive,"PControl":sensitive)
TControl                                             Unit \#OWindows\#
------------------------------------------------------------------

TControl ist das grundlegende Dialogelementobjekt von ObjectGEM,
d.h. jedem Element in einer Resource, das abgefragt oder verÑndert
werden soll (Buttons, Edit-Felder), sollte ein von TControl abge-
leitetes Objekt zugeordnet werden (durch die \link("TControl.Init")Init\#-Methode).
Dadurch kann dieses Element dann sehr einfach mit Hilfe der
TControl-Methoden behandelt werden (Status etc.).

	Pointer
		PControl = ^TControl;

	Felder
		\link("TControl.ID")ID\#
		\#Flags\#
		\link("TControl.ObjAddr")ObjAddr\#
		\link("TControl.ObjIndx")ObjIndx\#
		\link("TControl.Parent")Parent\#
		\link("TControl.Style")Style\#
		\#UsrBlk\#
		\#UsrDef\#

	Methoden
		\link("TControl.Init")Init\#
		\link("TControl.Done")Done\#
		\link("TControl.Changed")Changed\#
		\link("TControl.Disable")Disable\#
		\#DisableTransfer\#
		\link("TControl.Enable")Enable\#
		\#EnableTransfer\#
		\#GetColor\#
		\link("TControl.GetHelp")GetHelp\#
		\link("TControl.GetState")GetState\#
		\link("TControl.Hide")Hide\#
		\#IsFlagSet\#
		\link("TControl.IsHelpAvailable")IsHelpAvailable\#
		\link("TControl.IsHidden")IsHidden\#
		\link("TControl.Next")Next\#
		\link("TControl.Paint")Paint\#
		\link("TControl.Previous")Previous\#
		\link("TControl.SetColor")SetColor\#
		\#SetFlags\#
		\link("TControl.SetHelp")SetHelp\#
		\#SetShortCut\#
		\link("TControl.SetState")SetState\#
		\#TestID\#
		\link("TControl.TestIndex")TestIndex\#
		\#TestShortCut\#
		\link("TControl.Transfer")Transfer\#
		\link("TControl.Unhide")Unhide\#

	Vorfahre
		\#TObject\#
	Nachfahren
		\#TButton\#  \#TComboBox\#  \#TGroupBox\#  \#TScrollBar\#  \#TStatic\#

\end


screen("TControl.ID":sensitive)
TControl.ID (Feld)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ID: integer;

Beschreibung  Legt fest, ob dem Dialogelementobjekt beim Verlassen
              des Dialogs eine besondere Bedeutung zukommen soll.
              Wird von \#TControl.Init\# auf \#id_No\# gesetzt und
              von \#TButton\# bzw. \#TScrollBar\# verÑndert.

Querverweise  \#TControl\#  \#id_XXXX-Konstanten\#

\end


screen("TControl.Flags":sensitive,"Flags":sensitive)
TControl.Flags (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Flags: byte;

Beschreibung  Beschreibt zusÑtzliche Eigenschaften des Dialog-
              elementobjekts. Wird z.Z. nur von \#DisableTransfer\#
              bzw. \#EnableTransfer\# direkt verÑndert.
              \#TControl.Init\# nullt das Feld aus.

Querverweise  \#TControl\#           \#wb_XXXX-Konstanten\#
              \#TControl.SetFlags\#  \#TControl.IsFlagSet\#

\end


screen("TControl.ObjAddr":sensitive)
TControl.ObjAddr (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ObjAddr: PObj;  (nur lesen)

Beschreibung  \#TControl.Init\# setzt hier die zum Dialogelement
              \link("TControl.ObjIndx")ObjIndx\# gehîrige Adresse ein.

Querverweise  \#TControl\#
              \#TApplication.LoadResource\#  \#TApplication.InitResource\#

\end


screen("TControl.ObjIndx":sensitive)
TControl.ObjIndx (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ObjIndx: integer;  (nur lesen)

Beschreibung  EnthÑlt die Nummer des Dialogelementobjekts, die an
              \#TControl.Init\# Åbergeben wird. Aus diesem Index kann
              \link("TControl.ObjAddr")ObjAddr\# berechnet werden.

Querverweise  \#TControl\#

\end


screen("TControl.Parent":sensitive)
TControl.Parent (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Parent: PDialog;  (nur lesen)

Beschreibung  EnthÑlt einen Zeiger auf das Zugehîrige \#TDialog\#-
              Objekt. Dort werden alle Dialogelementobjekte in
              der durch \link("TControl.Previous")Previous\# und \link("TControl.Next")Next\# verketteten Liste
              \#CtrlList\# verwaltet.
              Parent wird von \#TControl.Init\# gesetzt.

Querverweise  \#TControl\#

\end


screen("TControl.Style":sensitive)
TControl.Style (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Style: word;  (nur lesen, s.u.)

Beschreibung  Wird von \#TControl.Init\# ausgenullt. Abgeleitete
              Objekte tragen hier Konstanten ein, durch die
              die Art des Dialogelementobjekts ermittelt werden
              kann. Abgesehen von \#es_ASCIIOnly\# und \#sts_Fill\# ist
              dieses Feld nur zum Lesen freigegeben.

Querverweise  \#TControl\#   \#cs_XXXX-Konstanten\#
              \link("bsessb-Konstanten")bs/es/sbs/sts_XXXX-Konstanten\#

\end


screen("TControl.UsrBlk":sensitive,"UsrBlk":sensitive)
TControl.UsrBlk (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   UsrBlk: \#USERBLK\#;  (nur lesen)

Beschreibung  Wenn \#UsrDef\# true ist, enthÑlt diese Struktur alle
              nîtigen Daten zum Zeichnen des neuen Dialogelements.
              \#TControl.Init\# nullt dieses Feld aus.

Querverweise  \#TControl\#

\end


screen("TControl.UsrDef":sensitive,"UsrDef":sensitive)
TControl.UsrDef (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   UsrDef: boolean;  (nur lesen)

Beschreibung  Ist dieses Feld true, verwendet das von TControl
              abgeleitete Objekt die \#UsrBlk\#-Struktur, d.h. das
              Dialogelement wird in einem ObjectGEM-eigenen
              Stil gezeichnet.
              Wird von \#TControl.Init\# auf false gesetzt.

Querverweise  \#TControl\#

\end


screen("TControl.Init":sensitive)
TControl.Init (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx: integer;
                                                   Hlp: string);

Beschreibung  Ruft den Vorfahren \#TObject.Init\# auf und setzt
              \link("TControl.ObjIndx")ObjIndx\# auf AnIndx, \link("TControl.ID")ID\# auf \#id_No\# und \link("TControl.Parent")Parent\# auf
              AParent. Hlp wird als Text fÅr die BubbleHelp ver-
              wendet, \link("TControl.Style")Style\# und \#Flags\# werden ausgenullt und der
              Shortcut gelîscht, so daû \#TestShortCut\# standardmÑûig
              false zurÅckliefert. Auûerdem wird das Dialogelement
              in die \#CtrlList\# des zugehîrigen \#TDialog\#-Objekts
              eingetragen.
              Wenn in AParent \#nil\# Åbergeben wird oder \link("TControl.ObjAddr")ObjAddr\#
              nicht ermittelt werden kann, bricht die Initiali-
              sierung ab und man erhÑlt einen Nullzeiger.
              Da Flags auf Null gesetzt wird, nehmen TControl-
              Objekte standardmÑûig _nicht_ am Datentransfer-
              mechanismus teil.
              Auûerdem werden \#UsrDef\# und \#UsrBlk\# initialisiert.

Querverweise  \#TControl\#  \#TControl.Transfer\#

\end


screen("TControl.Done":sensitive)
TControl.Done (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Lîscht das Dialogelement aus der \#CtrlList\# des zuge-
              hîrigen \#TDialog\#-Objekts und ruft \#TObject.Done\# auf.

Querverweise  \#TControl\#

\end


screen("TControl.TestIndex":sensitive)
TControl.TestIndex (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestIndex(AnIndx: integer): boolean;
                                                     virtual;

Beschreibung  Gibt true zurÅck, wenn der Åbergebene Index mit
              \link("TControl.ObjIndx")ObjIndx\# Åbereinstimmt. Wird benutzt um zu Åber-
              prÅfen, welches Dialogelement angewÑhlt wurde.

Querverweise  \#TControl\#

\end


screen("TControl.TestID":sensitive,"TestID":sensitive)
TControl.TestID (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestID(AnID: integer): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn AnID mit \link("TControl.ID")ID\# Åbereinstimmt.
              Wird beim Verlassen des Dialogs benutzt, um evtl.
              speziell auf das Exit-Objekt reagieren zu kînnen.

Querverweise  \#TControl\#  \#id_XXXX-Konstanten\#

\end


screen("TControl.TestShortCut":sensitive,"TestShortCut":sensitive)
TControl.TestShortCut (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestShortCut(Key: integer): boolean;
                                                     virtual;

Beschreibung  Gibt true zurÅck, wenn Key mit dem Shortcut des
              Dialogelementobjekts Åbereinstimmt. Key enthÑlt
              dabei den ASCII-Wert des Zeichens (ohne Alternate-
              Status), Kleinbuchstaben mÅssen vorher in Groû-
              buchstaben umgewandelt werden. Der Shortcut wird
              von der \#TButton.SetText\#-Methode gesetzt.

Querverweise  \#TControl\#  \#TControl.Init\#  \#TControl.SetShortCut\#

\end


screen("TControl.SetShortCut":sensitive,"SetShortCut":sensitive)
TControl.SetShortCut (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetShortCut(Key: char); virtual;

Beschreibung  Setz den Shortcut fÅr das TControl-Objekt, mit dem
              dieses (zusammen mit <Alternate>) angewÑhlt werden
              kann.
              Kleinbuchstaben werden automatisch in Groûbuch-
              staben umgewandelt. Mit #0 kann der Shortcut
              gelîscht werden.

Querverweise  \#TControl\#  \#TControl.TestShortCut\#

\end


screen("TControl.SetFlags":sensitive,"SetFlags":sensitive)
TControl.SetFlags (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetFlags(Mask: byte; OnOff: boolean);
                                                       virtual;

Beschreibung  Setzt oder lîscht die durch Mask angegebenen Bits
              in \#Flags\#, je nachdem ob OnOff true oder false ist.

Querverweise  \#TControl\#

\end


screen("TControl.IsFlagSet":sensitive,"IsFlagSet":sensitive)
TControl.IsFlagSet (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsFlagSet(Mask: byte): boolean;

Beschreibung  Gibt true zurÅck, wenn die in Mask angegebenen
              Bits in \#Flags\# gesetzt sind.

Querverweise  \#TControl\#  \#bTst\#

\end


screen("TControl.SetState":sensitive)
TControl.SetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetState(StateFlag: integer); virtual;

Beschreibung  Macht das Dialogelement anwÑhlbar bzw. nicht anwÑhl-
              bar. ZulÑssige Werte fÅr StateFlag sind \#bf_Enabled\#
              und \#bf_Disabled\#.

Querverweise  \#TControl\#  \#TControl.GetState\#

\end


screen("TControl.GetState":sensitive)
TControl.GetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetState: integer; virtual;

Beschreibung  Gibt den Zustand des Dialogelements zurÅck
              (\#bf_Enabled\#, \#bf_Disabled\#).

Querverweise  \#TControl\#  \#TControl.SetState\#

\end


screen("TControl.Disable":sensitive)
TControl.Disable (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Disable; virtual;

Beschreibung  Ruft \#SetState\#(\#bf_Disabled\#) auf und macht das
              Dialogelement somit nicht anwÑhlbar.

Querverweise  \#TControl\#  \#TControl.Enable\#

\end


screen("TControl.Enable":sensitive)
TControl.Enable (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Enable; virtual;

Beschreibung  Ruft \#SetState\#(\#bf_Enabled\#) auf und macht das
              Dialogelement dadurch anwÑhlbar.

Querverweise  \#TControl\#  \#TControl.Disable\#

\end


screen("TControl.EnableTransfer":sensitive,"EnableTransfer":sensitive)
TControl.EnableTransfer (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure EnableTransfer; virtual;

Beschreibung  Ruft \#SetFlags\#(\#wb_Transfer\#,true) auf und beteiligt
              das Dialogelement am Datentransfermechanismus.

Querverweise  \#TControl\#
              \#TControl.Transfer\#  \#TControl.DisableTransfer\#

\end


screen("TControl.DisableTransfer":sensitive,"DisableTransfer":sensitive)
TControl.DisableTransfer (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DisableTransfer; virtual;

Beschreibung  Ruft \#SetFlags\#(\#wb_Transfer\#,false) auf und nimmt das
              Dialogelement dadurch vom Datentransfermechanismus
              aus.

Querverweise  \#TControl\#
              \#TControl.Transfer\#  \#TControl.EnableTransfer\#

\end


screen("TControl.Transfer":sensitive)
TControl.Transfer (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Transfer(DataPtr: pointer;
                              TransferFlag: word): word; virtual;

Beschreibung  Dies ist eine abstrakte Methode, die nichts weiter
              macht als Null zurÅckzuliefern. Sie wird aber von
              anderen Objekten Åberschrieben, um Daten in das
              Element bzw. aus dem Element heraus zu Åbertragen.
              DataPtr zeigt dabei auf die zu setzenden Daten bzw.
              auf einen Puffer, der die ausgelesenen Daten auf-
              nimmt. TransferFlag muû eine der \#tf_XXXX-Konstanten\#
              enthalten.
              Die RÅckgabe entspricht der Anzahl der Åbertragenen
              Bytes, muû aber immer gerade sein (evtl. aufrunden).

Querverweise  \#TControl\#  \#TDialog.TransferBuffer\#

\end


screen("TControl.Changed":sensitive)
TControl.Changed (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Changed(AnIndx: integer;
                                  DblClick: boolean); virtual;

Beschreibung  Wird von \#TDialog.CallChanged\# aufgerufen, wenn das
              Dialogelement aufgerufen wird und dadurch seinen
              Status Ñndert. StandardmÑûig macht diese Methode
              nichts, durch sie kînnen Dialogboxen aber kontext-
              sensitiv werden, indem z.B. in dieser Methode der
              Zustand eines Buttons etc. in AbhÑngigkeit vom
              Zustand des Dialogelements geÑndert wird.
              AnIndx gibt den Index des angewÑhlten Dialog-
              elements an (sollte mit \link("TControl.ObjIndx")ObjIndx\# Åbereinstimmen),
              DblClick zeigt an, ob das Element mit Doppelklick
              angewÑhlt wurde.

Querverweise  \#TControl\#

\end


screen("TControl.Paint":sensitive)
TControl.Paint (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint; virtual;

Beschreibung  Ruft \link("TControl.Parent")Parent\#^.\#ObjcPaint\# auf, d.h. das Dialogelement
              wird gezeichnet. Befindet sich der zugehîrige Dialog
              in einem Fenster, wird die Rechteckliste automatisch
              beachtet.
              An ObjcPaint wird der Index des Dialogelements
              (\link("TControl.ObjIndx")ObjIndx\#) und ein boolean-Parameter Åbergeben,
              der true ist, wenn \#wb_Lazy\# gesetzt ist.

Querverweise  \#TControl\#

\end


screen("TControl.Hide":sensitive)
TControl.Hide (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Hide(Draw: boolean); virtual;

Beschreibung  Macht das Dialogelement unsichtbar. Ist Draw true,
              wird dann das _Åbergeordnete_ Dialogelement ge-
              zeichnet, damit das Element auch auf dem Bild-
              schirm (und nicht nur logisch) verschwindet.
              Wenn man allerdings direkt nach Hide ein anderes
              Dialogelement an derselben Stelle mit \link("TControl.Unhide")Unhide\#
              sichtbar macht, kann Draw auf false gesetzt
              werden (Achtung allerdings bei Elementen, die
              nicht deckend gezeichnet werden, z.B. Images).

Querverweise  \#TControl\#  \#TControl.IsHidden\#

\end


screen("TControl.Unhide":sensitive)
TControl.Unhide (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Unhide; virtual;

Beschreibung  Macht das Dialogelement sichtbar und zeichnet es.

Querverweise  \#TControl\#  \#TControl.Hide\#  \#TControl.IsHidden\#

\end


screen("TControl.IsHidden":sensitive)
TControl.IsHidden (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsHidden: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Dialogelement unsichtbar
              ist, false sonst.

Querverweise  \#TControl\#  \#TControl.Hide\#  \#TControl.Unhide\#

\end


screen("TControl.GetColor":sensitive,"GetColor":sensitive)
TControl.GetColor (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetColor: integer; virtual;

Beschreibung  Liefert den Farbindex (0..15) des Dialogelements
              zurÅck. Wenn es sich nicht um ein \#G_BOX\#-, \#G_IBOX\#-,
              \#G_BOXCHAR\#-, \#G_TEXT\#-, \#G_BOXTEXT\#-, \#G_FTEXT\#-, \#G_ICON\#-,
              \#G_FBOXTEXT\#- oder \#G_IMAGE\#-Objekt handelt, ist die
              RÅckgabe standardmÑûig \#Black\#.

Querverweise  \#TControl\#  \#TControl.SetColor\#

\end


screen("TControl.SetColor":sensitive)
TControl.SetColor (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetColor(Color: integer); virtual;

Beschreibung  Setzt die Farbe des Dialogelements neu. In Color
              wird dazu der entsprechende Farbindex (0..15) Åber-
              geben.
              Anschlieûend wird das Element neu gezeichnet.

Querverweise  \#TControl\#  \#TControl.GetColor\#

\end


screen("TControl.IsHelpAvailable":sensitive)
TControl.IsHelpAvailable (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsHelpAvailable: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Dialogelementobjekt
              mit \link("TControl.GetHelp")GetHelp\# einen Hilfstext fÅr die BubbleHelp
              liefern kann.

Querverweise  \#TControl\#

\end


screen("TControl.GetHelp":sensitive)
TControl.GetHelp (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetHelp: string; virtual;

Beschreibung  Gibt einen Hilfstext fÅr die BubbleHelp zurÅck.

Querverweise  \#TControl\#          \#TControl.IsHelpAvailable\#
              \#TControl.SetHelp\#

\end


screen("TControl.SetHelp":sensitive)
TControl.SetHelp (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetHelp(Hlp: string); virtual;

Beschreibung  Weist dem Dialogelementobjekt einen neuen Hilfs-
              text fÅr die BubbleHelp zu.

Querverweise  \#TControl\#       \#TControl.GetHelp\#
              \#TControl.Init\#

\end


screen("TControl.Previous":sensitive)
TControl.Previous (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Previous: PControl;

Beschreibung  Gibt einen Zeiger auf das vorhergehende TControl-
              Objekt in der \#CtrlList\# des zugehîrigen \#TDialog\#-
              Objekts zurÅck. Ist kein weiteres Objekt vorhanden,
              erhÑlt man einen nil-Zeiger, d.h. in diesem Fall
              zeigt CtrlList genau auf das aktuelle Objekt.

Querverweise  \#TControl\#  \#TControl.Next\#

\end


screen("TControl.Next":sensitive)
TControl.Next (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Next: PControl;

Beschreibung  Gibt einen Zeiger auf das nÑchste TControl-Objekt
              in der \#CtrlList\# des zugehîrigen \#TDialog\#-Objekts
              zurÅck. Ist kein weiteres Objekt vorhanden,
              erhÑlt man einen nil-Zeiger.

Querverweise  \#TControl\#  \#TControl.Previous\#

\end


screen("TScrollBar":sensitive,"PScrollBar":sensitive)
TScrollBar                                           Unit \#ODialogs\#
------------------------------------------------------------------

TScrollBar ist das Dialogelementobjekt fÅr Bildlaufleisten inner-
halb von Dialogen. Das Objekt kÅmmert sich automatisch um die Ab-
arbeitung und das Neuzeichnen des Sliders. Soll nach einer énde-
rung des Sliderwertes eine Aktion ausgefÅhrt werden, muû die
Methode \link("TScrollBar.Work")Work\# Åberschrieben werden.

	Pointer
		PScrollBar = ^TScrollBar;

	Felder
		\#IsHorizontal\#
		\#LineMagnitude\#
		\#PageMagnitude\#
		\link("TScrollBar.Size")Size\#

	Methoden
		\link("TScrollBar.Init")Init\#
		\link("TScrollBar.Changed")Changed\#
		\#DeltaPos\#
		\#GetPosition\#
		\#GetRange\#
		\#GetSBoxMin\#
		\#SetPosition\#
		\link("TScrollBar.SetRange")SetRange\#
		\link("TScrollBar.TestIndex")TestIndex\#
		\link("TScrollBar.Transfer")Transfer\#
		\link("TScrollBar.Work")Work\#

	Vorfahre
		\#TControl\#
	Nachfahren
		---

\end


screen("TScrollBar.IsHorizontal":sensitive,"IsHorizontal":sensitive)
TScrollBar.IsHorizontal (Feld)                       Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   IsHorizontal: boolean;  (nur lesen)

Beschreibung  Gibt an, ob es sich bei der Bildlaufleiste um einen
              vertikalen (false) oder horizontalen (true) Slider
              handelt. Dieser Wert wird von \#TScrollBar.Init\#
              _automatisch_ aus den Abmessungen des Sliders
              bestimmt.

Querverweise  \#TScrollBar\#  \link("bsessb-Konstanten")sbs_XXXX-Konstanten\#

\end


screen("TScrollBar.LineMagnitude":sensitive,"LineMagnitude":sensitive)
TScrollBar.LineMagnitude (Feld)                      Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   LineMagnitude: longint;

Beschreibung  Gibt an, um wieviele Einheiten der Slider verschoben
              wird, wenn einer der Pfeile einfach angeklickt wird.
              Wird von \#TScrollBar.Init\# auf 1 gesetzt.

Querverweise  \#TScrollBar\#  \#TScrollBar.Changed\#

\end


screen("TScrollBar.PageMagnitude":sensitive,"PageMagnitude":sensitive)
TScrollBar.PageMagnitude (Feld)                      Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   PageMagnitude: longint;

Beschreibung  Gibt an, um wieviele Einheiten der Slider verschoben
              wird, wenn der graue (bzw. schraffierte) Bereich
              einfach angeklickt wird. PageMagnitude wird von
              \#TScrollBar.Init\# zunÑchst auf \link("TScrollBar.Size")Size\# gesetzt.

Querverweise  \#TScrollBar\#  \#TScrollBar.Changed\#

\end


screen("TScrollBar.Size":sensitive)
TScrollBar.Size (Feld)                               Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   Size: longint;

Beschreibung  Size gibt an, wie groû der verschiebbare Kasten im
              Vergleich zum gesamten Slider sein soll. Man kann
              sich diese Zahl als Anzahl der EintrÑge einer Liste
              vorstellen, die gleichzeitig sichtbar sind. Wenn
              also fÅnf EintrÑge untereinander angezeigt werden,
              sollte Size 5 sein; wenn aber z.B. eine Adresse
              dargestellt wird, ist Size normalerweise 1.
              Size wird durch \#TScrollBar.Init\# gesetzt, der
              kleinstmîgliche Wert ist 1.

Querverweise  \#TScrollBar\#

\end


screen("TScrollBar.Init":sensitive)
TScrollBar.Init (Methode)                            Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; SIndx,DIndx,
                               IIndx: integer; TheSize,
                               TheRange: longint; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TControl.Init\# mit den Parametern
              AParent, SIndx und Hlp auf. SIndx muû der Index
              eines Dialogelements vom Typ \#G_BOX\# sein, das den
              grauen Hintergrund des Sliders darstellt. Innerhalb
              dieses Elements muû sich genau ein weiteres G_BOX-
              Element befinden, das zum Verschieben benutzt wird.
              Je nachdem ob SIndx eine grîûere Breite bzw. Hîhe
              besitzt, wird \#IsHorizontal\# auf true bzw. false ge-
              setzt und das Verschiebe-Element auf die maximale
              Hîhe bzw. Breite gebracht.
              DIndx und IIndx bezeichnen Elemente vom Typ
              \#G_BOXCHAR\#, die fÅr die Slider-Pfeile verwendet
              werden. Je nach Slidertyp werden die korrekten
              Pfeile _automatisch_ gesetzt (dies muû also nicht
              im RCS gemacht werden).
              \link("TControl.Style")Style\# wird auf \#cs_ScrollBar\# und eine der \link("bsessb-Konstanten")sbs_XXXX\#-
              Konstanten gesetzt, \link("TControl.ID")ID\# auf \#id_NoExit\#, \link("TScrollBar.Size")Size\# auf
              TheSize, \#PageMagnitude\# auf Size und \#LineMagnitude\#
              auf 1. TheRange gibt an, wieviele Einheiten der ge-
              samte Slider umfaût; Minimum ist 1.
              Auch TScrollBar-Objekte nehmen standardmÑûig nicht
              am Datentransfermechanismus teil.

Querverweise  \#TScrollBar\#  \#TScrollBar.GetRange\#

\end


screen("TScrollBar.TestIndex":sensitive)
TScrollBar.TestIndex (Methode)                       Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function TestIndex(AnIndx: integer): boolean;
                                                     virtual;

Beschreibung  Liefert true, wenn eines der vier Slider-Elemente
              (Hintergrund, Verschiebe-Element, zwei Pfeile)
              angewÑhlt wurde.

Querverweise  \#TScrollBar\#  \#TControl.TestIndex\#

\end


screen("TScrollBar.Transfer":sensitive)
TScrollBar.Transfer (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function Transfer(DataPtr: pointer;
                              TransferFlag: word): word; virtual;

Beschreibung  öbertrÑgt Daten mit Hilfe der Struktur
              \#TScrollBarTransferRec\#.

Querverweise  \#TScrollBar\#  \#TControl.Transfer\#

\end


screen("TScrollBar.Changed":sensitive)
TScrollBar.Changed (Methode)                         Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Changed(AnIndx: integer;
                                  DblClick: boolean); virtual;

Beschreibung  In dieser Methode wird der Sliderwert in AbhÑngig-
              keit vom angewÑhlten Dialogelement verÑndert und
              der Slider evtl. neu gezeichnet.
              Der neue Wert wird mit \#SetPosition\# gesetzt.

Querverweise  \#TScrollBar\#  \#TControl.Changed\#

\end


screen("TScrollBar.Work":sensitive)
TScrollBar.Work (Methode)                            Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Work; virtual;

Beschreibung  Dies ist eine abstrakte Methode, die zunÑchst
              nichts macht. Sie wird aber bei jeder WertÑnderung
              des Sliders aufgerufen, so daû hier z.B. die
              Anzeige des neuen Wertes stattfinden kann.

Querverweise  \#TScrollBar\#

\end


screen("TScrollBar.SetPosition":sensitive,"SetPosition":sensitive)
TScrollBar.SetPosition (Methode)                     Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetPosition(ThumbPos: longint); virtual;

Beschreibung  Setzt die Bildlaufleiste auf die neue Position
              ThumbPos. Es wird darauf geachtet, daû der mit
              \link("TScrollBar.SetRange")SetRange\# eingestellte Bereich nicht unter- bzw.
              Åberschritten wird.

Querverweise  \#TScrollBar\#  \#TScrollBar.GetPosition\#

\end


screen("TScrollBar.GetPosition":sensitive,"GetPosition":sensitive)
TScrollBar.GetPosition (Methode)                     Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetPosition: longint; virtual;

Beschreibung  Gibt den aktuellen Wert des Sliders zurÅck.

Querverweise  \#TScrollBar\#
              \#TScrollBar.SetPosition\#  \#TScrollBar.SetRange\#

\end


screen("TScrollBar.DeltaPos":sensitive,"DeltaPos":sensitive)
TScrollBar.DeltaPos (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function DeltaPos(Delta: longint): longint; virtual;

Beschreibung  éndert den Wert der Bildlaufleiste mit \#SetPosition\#
              um Delta Einheiten. Als RÅckgabe erhÑlt man den
              neuen Wert.

Querverweise  \#TScrollBar\#

\end


screen("TScrollBar.SetRange":sensitive)
TScrollBar.SetRange (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetRange(LoVal,HiVal: longint); virtual;

Beschreibung  Setzt den Wertebereich der Bildlaufleiste. In LoVal
              wird die untere, in HiVal die obere Grenze Åberge-
              ben. Die aktuelle Position wird an die neue untere
              Grenze angepaût.
              SetRange(-2,5) setzt z.B. die untere Grenze auf -2
              und die obere auf 5, d.h. der Slider umfaût einen
              Bereich von acht Einheiten.

Querverweise  \#TScrollBar\#  \#TScrollBar.GetRange\#

\end


screen("TScrollBar.GetRange":sensitive,"GetRange":sensitive)
TScrollBar.GetRange (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetRange(var LoVal,HiVal: longint):
                                            longint; virtual;

Beschreibung  Gibt in LoVal die untere Grenze, in HiVal die
              obere Grenze des Sliders zurÅck. Die RÅckgabe der
              Funktion ist der gesamte Bereich, den die Bild-
              laufleiste umfaût. Dieser Wert ist allerdings
              immer um eins erhîht, d.h. die RÅckgabe ent-
              spricht (HiVal-LoVal)+2.
              Wird \#TScrollBar.Init\# fÅr TheRange z.B. 100
              Åbergeben, gibt GetRange in diesem Fall also
              101 zurÅck.

Querverweise  \#TScrollBar\#  \#TScrollBar.SetRange\#

\end


screen("TScrollBar.GetSBoxMin":sensitive,"GetSBoxMin":sensitive)
TScrollBar.GetSBoxMin (Methode)                      Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetSBoxMin: integer; virtual;

Beschreibung  Gibt an, wie klein das Verschiebe-Element des
              Sliders minimal werden darf (in Pixeln).
              Voreingestellt ist z.Z. 8.

Querverweise  \#TScrollBar\#

\end


screen("TGroupBox":sensitive,"PGroupBox":sensitive)
TGroupBox                                            Unit \#ODialogs\#
------------------------------------------------------------------

Macht aus "normalen" Rechteck-Elementen eine Groupbox, d.h. es
wird eine öberschrift ausgegeben. Weitere Aktionen sind von
TGroupBox nicht nîtig, da die durch das Rechteck-Element vorge-
gebene Hierarchie automatisch vom GEM-Objekt-Manager beachtet
wird.

	Pointer
		PGroupBox = ^TGroupBox;

	Methoden
		\link("TGroupBox.Init")Init\#
		\link("TGroupBox.Done")Done\#
		\link("TGroupBox.GetText")GetText\#
		\link("TGroupBox.SetText")SetText\#

	Vorfahre
		\#TControl\#
	Nachfahren
		---

\end


screen("TGroupBox.Init":sensitive)
TGroupBox.Init (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx: integer;
                                              ATitle,Hlp: string);

Beschreibung  Ruft den Vorfahren \#TControl.Init\# auf.
              AnIndx muû dabei der Index eines \#G_BOX\#-Elements
              sein. ATitle ist der Titel der Groupbox.
              \link("TControl.Style")Style\# wird auf \#cs_GroupBox\# gesetzt.

Querverweise  \#TGroupBox\#

\end


screen("TGroupBox.Done":sensitive)
TGroupBox.Done (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Macht aus dem TGroupBox-Objekt wieder ein "normales"
              Rechteck-Element und ruft danach den Vorfahren
              \#TControl.Done\# auf.

Querverweise  \#TGroupBox\#

\end


screen("TGroupBox.SetText":sensitive)
TGroupBox.SetText (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  Gibt der GroupBox eine neue öberschrift und
              zeichnet das Dialogelement neu.

Querverweise  \#TGroupBox\#  \#TGroupBox.GetText\#

\end


screen("TGroupBox.GetText":sensitive)
TGroupBox.GetText (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Liefert den Titel der GroupBox.

Querverweise  \#TGroupBox\#  \#TGroupBox.SetText\#

\end


screen("TStatic":sensitive,"PStatic":sensitive)
TStatic                                              Unit \#OWindows\#
------------------------------------------------------------------

Mit TStatic kînnen beliebige Textelemente recht einfach ver-
waltet werden. Einfache String-Elemente kînnen auûerdem unter-
strichen werden.

	Pointer
		PStatic = ^TStatic;

	Felder
		\#TextLen\#

	Methoden
		\link("TStatic.Init")Init\#
		\link("TStatic.Done")Done\#
		\link("TStatic.Clear")Clear\#
		\link("TStatic.GetText")GetText\#
		\#GetTextLen\#
		\link("TStatic.SetText")SetText\#
		\link("TStatic.Transfer")Transfer\#

	Vorfahre
		\#TControl\#
	Nachfahre
		\#TEdit\#

\end


screen("TStatic.TextLen":sensitive,"TextLen":sensitive)
TStatic.TextLen (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   TextLen: integer;  (nur lesen)

Beschreibung  Gibt die maximal zulÑssige LÑnge des Textes+1
              (fÅr das Nullbyte am Ende) an. Wird von
              \#TStatic.Init\# gesetzt.

Querverweise  \#TStatic\#  \#TStatic.GetTextLen\#

\end


screen("TStatic.Init":sensitive)
TStatic.Init (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx,
                               ATextLen: integer;
                               UserDef: boolean; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TControl.Init\# auf und setzt
              \#TextLen\# auf ATextLen. Wird in ATextLen -1 Åber-
              geben und ist das Dialogelement ein G_[F][BOX]TEXT-
              Objekt, wird die LÑnge automatisch berechnet.
              Ist UserDef true und AnIndx der Index eines
              \#G_BUTTON\#-, \#G_STRING\#- oder \#G_TITLE\#-Objekts, wird
              \#UsrDef\# auf true gesetzt und der Text spÑter unter-
              strichen ausgegeben. Ansonsten muû AnIndx zu einem
              \#G_TEXT\#-, \#G_BOXTEXT\#-, \#G_FTEXT\#- oder \#G_FBOXTEXT\#-
              Element gehîren.
              \link("TControl.Style")Style\# wird auf \#cs_Static\# und \#sts_Fill\# gesetzt.

Querverweise  \#TStatic\#

\end


screen("TStatic.Done":sensitive)
TStatic.Done (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Deinstalliert das Dialogelementobjekt und ruft
              den Vorfahren \#TControl.Done\# auf.

Querverweise  \#TStatic\#

\end


screen("TStatic.Clear":sensitive)
TStatic.Clear (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Clear; virtual;

Beschreibung  Lîscht den Text des Dialogelementobjekts und
              zeichnet das Objekt neu. \#sts_Fill\# wird beachtet.

Querverweise  \#TStatic\#

\end


screen("TStatic.GetText":sensitive)
TStatic.GetText (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Gibt den Text des Dialogelementobjekts zurÅck.
              Wichtig: Leerzeichen, die evtl. wegen \#sts_Fill\#
              angehÑngt wurden, werden _nicht_ abgeschnitten!

Querverweise  \#TStatic\#  \#TStatic.GetTextLen\#  \#TStatic.SetText\#

\end


screen("TStatic.GetTextLen":sensitive,"GetTextLen":sensitive)
TStatic.GetTextLen (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetTextLen: integer; virtual;

Beschreibung  Gibt length(\link("TStatic.GetText")GetText\#) zurÅck.

Querverweise  \#TStatic\#

\end


screen("TStatic.SetText":sensitive)
TStatic.SetText (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  Setzt den Text eines Dialogelementobjekts neu und
              zeichnet dieses. Ist das zugehîrige Textobjekt ein
              formatierter Text und das erste Zeichen in AText-
              String gleich '@', wird der Text gelîscht.
              \#sts_Fill\# wird beachtet.

Querverweise  \#TStatic\#  \#TStatic.GetText\#

\end


screen("TStatic.Transfer":sensitive)
TStatic.Transfer (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Transfer(DataPtr: pointer;
                              TransferFlag: word): word; virtual;

Beschreibung  öbertrÑgt die Daten des Objekts (d.h. den Text)
              mittels \link("TStatic.SetText")SetText\# und \link("TStatic.GetText")GetText\#. Wichtig: Die RÅckgabe
              ist immer _gerade_; bei ungeraden TextlÑngen wird
              1 addiert. Im \#TransferBuffer\# werden die Daten
              in einem string[x] abgelegt, wobei x _ungerade_(!)
              sein muû (damit die StringlÑnge incl. Nullbyte
              wieder gerade ist). D.h. x entspricht der Text-
              lÑnge, wenn diese ungerade ist; ansonsten muû
              x auf TextlÑnge+1 gesetzt werden.

Querverweise  \#TStatic\#  \#TControl.Transfer\#

\end


screen("TButton":sensitive,"PButton":sensitive)
TButton                                              Unit \#OWindows\#
------------------------------------------------------------------

Objekte dieses Typs verwalten sog. Push-Buttons, die normaler-
weise zum Verlassen des Dialogs fÅhren (z.B. "OK", "Abbruch").
Aber auch die speziellen Aktions-Buttons (z.B. "Help") kînnen
hiermit recht einfach behandelt werden.

	Pointer
		PButton = ^TButton;

	Methoden
		\link("TButton.Init")Init\#
		\link("TButton.Done")Done\#
		\link("TButton.Deinstall")Deinstall\#
		\link("TButton.GetText")GetText\#
		\link("TButton.Install")Install\#
		\link("TButton.SetText")SetText\#

	Vorfahre
		\#TControl\#
	Nachfahre
		\#TCheckBox\#

\end


screen("TButton.Init":sensitive)
TButton.Init (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog;
                               AnIndx,AnID: integer;
                               UserDef: boolean; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TControl.Init\# auf und setzt
              \link("TControl.Style")Style\# auf \#cs_PushButton\# (or \#bs_DefPushButton\#, falls
              es sich um den Default-Exit-Button handelt). Ist
              UserDef true und AnIndx der Index eines \#G_BUTTON\#-
              Objekts, wird \link("TButton.Install")Install\# aufgerufen, \#UsrDef\# auf true
              gesetzt und der Button im 3D-Look gezeichnet.
              Wenn UsrDef false ist und AnID eine der Konstanten
              \#id_OK\#..\#id_Esc\# enthÑlt, wird aus dem Button ein
              spezieller Aktions-Button, der in \#TDialog\# gesondert
              behandelt wird. Ist der Button vom Typ \#G_BOXTEXT\#,
              wird er im Farbmodus dann automatisch gelb darge-
              stellt. Soll dem Button keine spezielle Bedeutung
              zukommen, muû AnID gleich \#id_No\# sein.

Querverweise  \#TButton\#  \#TDialog.EndDlg\#

\end


screen("TButton.Done":sensitive)
TButton.Done (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Macht alle VerÑnderungen von \link("TButton.Install")Install\# rÅckgÑngig und
              ruft den Vorfahren \#TControl.Done\# auf.
              Wenn \#UsrDef\# true ist, wird vorher noch \#Deinstall\#
              aufgerufen.

Querverweise  \#TButton\#

\end


screen("TButton.Install":sensitive)
TButton.Install (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Install: boolean; virtual;

Beschreibung  Wenn das Dialogelement vom Typ \#G_BUTTON\# ist, wird
              \#UsrDef\# auf true gesetzt und ein benutzerdefiniertes
              3D-Button-Objekt installiert.
              Wenn die Funktion false zurÅckliefert, wird die
              Installation von \link("TButton.Init")Init\# abgebrochen. StandardmÑûig
              wird allerdings immer true zurÅckgegeben.

Querverweise  \#TButton\#  \#TButton.Deinstall\#

\end


screen("TButton.Deinstall":sensitive)
TButton.Deinstall (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Deinstall; virtual;

Beschreibung  Macht die énderungen von \#TButton.Install\# rÅck-
              gÑngig. Wird von \#TButton.Done\# aufgerufen.

Querverweise  \#TButton\#

\end


screen("TButton.GetText":sensitive)
TButton.GetText (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Gibt den Text des Dialogelementobjekts zurÅck.
              Wichtig: Eine evtl. vorhandene Shortcut-Markierung
              ('&') wird aus der Zeichenkette entfernt!

Querverweise  \#TButton\#  \#TButton.SetText\#

\end


screen("TButton.SetText":sensitive)
TButton.SetText (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  éndert den Text des Buttons. Der Shortcut fÅr den
              Button muû mit '&' markiert werden (z.B. '&OK'),
              dieser braucht nicht mit dem frÅheren Shortcut
              identisch zu sein! Anschlieûend wird der Button
              neu gezeichnet.

Querverweise  \#TButton\#  \#TButton.GetText\#

\end


screen("TCheckBox":sensitive,"PCheckBox":sensitive)
TCheckBox                                            Unit \#ODialogs\#
------------------------------------------------------------------

Mit TCheckBox werden Buttons verwaltet, die jeder fÅr sich einen
Zustand reprÑsentieren ("an", "aus"). Der angeschaltete Zustand
wird dabei normalerweise durch ein HÑkchen gekennzeichnet.

	Pointer
		PCheckBox = ^TCheckBox;

	Methoden
		\link("TCheckBox.Init")Init\#
		\link("TCheckBox.Check")Check\#
		\link("TCheckBox.Deinstall")Deinstall\#
		\link("TCheckBox.GetCheck")GetCheck\#
		\link("TCheckBox.Install")Install\#
		\link("TCheckBox.SetCheck")SetCheck\#
		\link("TCheckBox.Toggle")Toggle\#
		\link("TCheckBox.Transfer")Transfer\#
		\link("TCheckBox.Uncheck")Uncheck\#

	Vorfahre
		\#TButton\#
	Nachfahren
		\#TRadioButton\#  \#TTriState\#

\end


screen("TCheckBox.Init":sensitive)
TCheckBox.Init (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx: integer;
                                   UserDef: boolean; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TButton.Init\# auf, setzt
              \link("TControl.Style")Style\# auf \#cs_CheckBox\# und schaltet den Transfer-
              Mechanismus ein. Ist UserDef true, wird die
              Checkbox im 3D-Look gezeichnet.

Querverweise  \#TCheckBox\#  \#TCheckBox.Transfer\#  \#TCheckBox.Install\#

\end


screen("TCheckBox.Install":sensitive)
TCheckBox.Install (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function Install: boolean; virtual;

Beschreibung  Wenn das Dialogelement vom Typ \#G_BUTTON\# ist, wird
              \#UsrDef\# auf true gesetzt und die Checkbox im 3D-Look
              gezeichnet.
              Wenn die Funktion false zurÅckliefert, wird die
              Installation von \link("TCheckBox.Init")Init\# abgebrochen. StandardmÑûig
              wird allerdings immer true zurÅckgegeben.

Querverweise  \#TCheckBox\#  \#TCheckBox.Deinstall\#

\end


screen("TCheckBox.Deinstall":sensitive)
TCheckBox.Deinstall (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Deinstall; virtual;

Beschreibung  Hier kînnen énderungen von \#TCheckBox.Install\# rÅck-
              gÑngig gemacht werden.
              StandardmÑûig wird \#TButton.Deinstall\# aber nur mit
              einer Leermethode Åberschrieben und damit in-
              effektiv gemacht.

Querverweise  \#TButton\#

\end


screen("TCheckBox.Transfer":sensitive)
TCheckBox.Transfer (Methode)                         Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function Transfer(DataPtr: pointer;
                              TransferFlag: word): word; virtual;

Beschreibung  öbertrÑgt den Zustand der Checkbox (siehe
              \#bf_XXXX-Konstanten\#) vom und in das Word, auf
              das DataPtr zeigt. RÅckgabe ist immer 2.

Querverweise  \#TCheckBox\#  \#TControl.Transfer\#

\end


screen("TCheckBox.SetCheck":sensitive)
TCheckBox.SetCheck (Methode)                         Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetCheck(CheckFlag: integer); virtual;

Beschreibung  Setzt den Zustand der Checkbox, d.h. \#bf_Checked\#
              oder \#bf_Unchecked\# (bzw. bei \#TTriState\# evtl. auch
              \#bf_Grayed\#).

Querverweise  \#TCheckBox\#  \#TCheckBox.GetCheck\#  \#TCheckBox.Check\#
                         \#TCheckBox.Uncheck\#   \#TCheckBox.Toggle\#

\end


screen("TCheckBox.GetCheck":sensitive)
TCheckBox.GetCheck (Methode)                         Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetCheck: integer; virtual;

Beschreibung  Gibt den Zustand der Checkbox zurÅck.

Querverweise  \#TCheckBox\#  \#TCheckBox.SetCheck\#  \#bf_XXXX-Konstanten\#

\end


screen("TCheckBox.Check":sensitive)
TCheckBox.Check (Methode)                            Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Check; virtual;

Beschreibung  Ruft \link("TCheckBox.SetCheck")SetCheck\#(\#bf_Checked\#) auf und markiert dadurch
              das Dialogelement.

Querverweise  \#TCheckBox\#  \#TCheckBox.Uncheck\#

\end


screen("TCheckBox.Uncheck":sensitive)
TCheckBox.Uncheck (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Uncheck; virtual;

Beschreibung  Ruft \link("TCheckBox.SetCheck")SetCheck\#(\#bf_Unchecked\#) auf und versetzt das
              Dialogelement dadurch in den nichtmarkierten
              Zustand.

Querverweise  \#TCheckBox\#  \#TCheckBox.Check\#

\end


screen("TCheckBox.Toggle":sensitive)
TCheckBox.Toggle (Methode)                           Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Toggle; virtual;

Beschreibung  Der Objektstatus wird zwischen \#bf_Unchecked\# und
              \#bf_Checked\# gewechselt (bzw. bei \#TTriState\# in der
              Reihenfolge bf_Unchecked, bf_Checked, \#bf_Grayed\#
              zyklisch durchlaufen).

Querverweise  \#TCheckBox\#  \#TCheckBox.SetCheck\#

\end


screen("TTriState":sensitive,"PTriState":sensitive)
TTriState                                            Unit \#ODialogs\#
------------------------------------------------------------------

TTriState verhÑlt sich genauso wie eine Checkbox. ZusÑtzlich gibt
es allerdings noch einen dritten Zustand (\#bf_Grayed\#), der z.B.
fÅr "Wert nicht verÑndert" benutzt werden kann.

	Pointer
		PTriState = ^TTriState;

	Methoden
		\link("TTriState.Init")Init\#
		\#Gray\#

	Vorfahre
		\#TCheckBox\#
	Nachfahren
		---

\end


screen("TTriState.Init":sensitive)
TTriState.Init (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx: integer;
                                                     Hlp: string);

Beschreibung  Ruft den Vorfahren \#TCheckBox.Init\# auf und setzt
              \link("TControl.Style")Style\# auf \#cs_3State\#.

Querverweise  \#TTriState\#

\end


screen("TTriState.Gray":sensitive,"Gray":sensitive)
TTriState.Gray (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Gray; virtual;

Beschreibung  Ruft \link("TCheckBox.SetCheck")SetCheck\#(\#bf_Grayed\#) auf und versetzt die
              Checkbox damit in den "neutralen" Zustand.

Querverweise  \#TTriState\#

\end


screen("TRadioButton":sensitive,"PRadioButton":sensitive)
TRadioButton                                         Unit \#ODialogs\#
------------------------------------------------------------------

RadioButtons werden in RCS-Hierarchiestufen zusammengefaût, d.h.
alle Buttons innerhalb eines Rahmens o.Ñ. gehîren zusammen. Von
diesen Buttons kann dann pro Hierarchiestufe nur einer aktiv
sein. Es empfiehlt sich, den zugehîrigen Rahmen mit einem
\#TGroupBox\#-Objekt zu verknÅpfen.

	Pointer
		PRadioButton = ^TRadioButton;

	Methoden
		\link("TRadioButton.Init")Init\#
		\link("TRadioButton.Install")Install\#
		\link("TRadioButton.SetState")SetState\#

	Vorfahre
		\#TCheckBox\#
	Nachfahren
		---

\end


screen("TRadioButton.Init":sensitive)
TRadioButton.Init (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx: integer;
                                   UserDef: boolean; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TCheckBox.Init\# auf und setzt
              \link("TControl.Style")Style\# auf \#cs_RadioButton\#.

Querverweise  \#TRadioButton\#

\end


screen("TRadioButton.Install":sensitive)
TRadioButton.Install (Methode)                       Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function Install: boolean;

Beschreibung  Wenn das Dialogelement vom Typ \#G_BUTTON\# ist, wird
              \#UsrDef\# auf true gesetzt und der RadioButton im 3D-
              Look gezeichnet.
              Wenn die Funktion false zurÅckliefert, wird die
              Installation von \link("TRadioButton.Init")Init\# abgebrochen. StandardmÑûig
              wird allerdings immer true zurÅckgegeben.

Querverweise  \#TRadioButton\#

\end


screen("TRadioButton.SetState":sensitive)
TRadioButton.SetState (Methode)                      Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetState(StateFlag: integer); virtual;

Beschreibung  Wenn in StateFlag \#bf_Disabled\# Åbergeben wird, wird
              zunÑchst \link("TCheckBox.Uncheck")Uncheck\# aufgerufen. Danach wird immer der
              Vorfahre \#TControl.SetState\# aufgerufen.

Querverweise  \#TRadioButton\#

\end


screen("TEdit":sensitive,"PEdit":sensitive)
TEdit                                                Unit \#OWindows\#
------------------------------------------------------------------

Mit TEdit werden einzeilig Eingabefelder verwaltet, die zum Ein-
lesen von beliebigen Zeichenketten verwendet werden. ZusÑtzlich
kann eine EingabeprÅfung mit Hilfe der Validierungsobjekte vor-
genommen werden.

	Pointer
		PEdit = ^TEdit;

	Felder
		\link("TEdit.Clipboard")Clipboard\#
		\#Validator\#

	Methoden
		\link("TEdit.Init")Init\#
		\link("TEdit.Done")Done\#
		\link("TEdit.CanClose")CanClose\#
		\#CanUndo\#
		\link("TEdit.Clear")Clear\#
		\#ClearModify\#
		\link("TEdit.Copy")Copy\#
		\link("TEdit.Cut")Cut\#
		\#Edit\#
		\#Focus\#
		\link("TEdit.GetClipboard")GetClipboard\#
		\#GetCursor\#
		\#IsModified\#
		\link("TEdit.IsValid")IsValid\#
		\link("TEdit.Paint")Paint\#
		\link("TEdit.Paste")Paste\#
		\link("TEdit.SetColor")SetColor\#
		\link("TEdit.SetCursor")SetCursor\#
		\link("TEdit.SetState")SetState\#
		\link("TEdit.SetText")SetText\#
		\#SetValidator\#
		\link("TEdit.Undo")Undo\#

	Vorfahre
		\#TStatic\#
	Nachfahren
		---

\end


screen("TEdit.Validator":sensitive,"Validator":sensitive)
TEdit.Validator (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Validator: \#PValidator\#;  (nur lesen)

Beschreibung  Zeigt auf das mit diesem Objekt verbundene Vali-
              dierungsobjekt. Ist ein solches nicht vorhanden,
              hat Validator den Wert \#nil\#.
              Ein Validierungsobjekt sollte einem TEdit-Objekt
              nur mittels \#SetValidator\# zugeordnet werden.

Querverweise  \#TEdit\#

\end


screen("TEdit.Clipboard":sensitive)
TEdit.Clipboard (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Clipboard: \#PClipboard\#;  (nur lesen)

Beschreibung  Zeigt auf das mit dem TEdit-Objekt verknÅpfte
              TClipboard-Objekt (oder ist \#nil\#, wenn ein solches
              nicht existiert).
              Wird mit \#TEdit.GetClipboard\# gesetzt.

Querverweise  \#TEdit\#

\end


screen("TEdit.Init":sensitive)
TEdit.Init (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx,
                                 ATextLen: integer; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TStatic.Init\# auf, setzt \link("TControl.Style")Style\#
              auf \#cs_Edit\#+\#es_Undo\# und beteiligt das Objekt am
              Transfermechanismus. Danach wird \#Validator\# auf nil
              gesetzt, \#ClearModify\# aufgerufen und der Undo-Puffer
              vorbereitet.
              Wenn das zugehîrige Dialogelement nicht vom Typ
              \#G_FTEXT\# oder \#G_FBOXTEXT\# ist oder \#TextLen\# kleiner
              als 2 ist, wird die Initialisierung abgebrochen.
              ATextLen gibt die LÑnge des editierbaren Textes
              plus 1 an. Wird hier ein zu kleiner Wert Åbergeben,
              funktioniert die Eingabe u.U. nicht korrekt.

Querverweise  \#TEdit\#  \#TEdit.CanUndo\#

\end


screen("TEdit.Done":sensitive)
TEdit.Done (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt den Speicher des Undo-Puffers frei, entfernt
              das Validierungsobjekt mit \#SetValidator\#(\#nil\#) und
              gibt \link("TEdit.Clipboard")Clipboard\# frei, wenn ein neues Klemmbrett-
              Objekt installiert wurde.
              Zum Schluû wird \#TStatic.Done\# aufgerufen.

Querverweise  \#TEdit\#

\end


screen("TEdit.CanClose":sensitive)
TEdit.CanClose (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function CanClose: boolean; virtual;

Beschreibung  Liefert normalerweise true zurÅck, d.h. der Dialog
              darf beendet werden. Gibt allerdings \link("TEdit.IsValid")IsValid\#(true)
              false zurÅck und ist das Dialogelement nicht dis-
              abled, liefert CanClose false, und der Cursor wird
              mittels \#Focus\# zu diesem Objekt bewegt.

Querverweise  \#TEdit\#

\end


screen("TEdit.CanUndo":sensitive,"CanUndo":sensitive)
TEdit.CanUndo (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function CanUndo: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn der Undo-Puffer Zeichen
              enthÑlt, d.h. wenn die letzte Bearbeitung rÅck-
              gÑngig gemacht werden kann.
              Wenn \#es_Undo\# _nicht_ gesetzt ist, wird immer
              false zurÅckgegeben.

Querverweise  \#TEdit\#  \#TEdit.Undo\#

\end


screen("TEdit.Clear":sensitive)
TEdit.Clear (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Clear; virtual;

Beschreibung  Ruft den Vorfahren \#TStatic.Clear\# auf, beachtet
              aber zusÑtzlich den Eingabe-Cursor.

Querverweise  \#TEdit\#

\end


screen("TEdit.Paint":sensitive)
TEdit.Paint (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint; virtual;

Beschreibung  Ruft den Vorfahren \#TControl.Paint\# auf, beachtet
              aber zusÑtzlich den Eingabe-Cursor.

Querverweise  \#TEdit\#

\end


screen("TEdit.ClearModify":sensitive,"ClearModify":sensitive)
TEdit.ClearModify (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ClearModify; virtual;

Beschreibung  Setzt das énderungsflag fÅr das Eingabefeld zurÅck.

Querverweise  \#TEdit\#  \#TEdit.IsModified\#

\end


screen("TEdit.Cut":sensitive)
TEdit.Cut (Methode)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Cut; virtual;

Beschreibung  Lîscht den Text im Eingabefeld und legt ihn im
              \link("Clipboard-Verwaltung")Klemmbrett\# ab. Wird von \#TDialog.Cut\# aufgerufen.

Querverweise  \#TEdit\#

\end


screen("TEdit.Copy":sensitive)
TEdit.Copy (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Copy; virtual;

Beschreibung  Kopiert den Text des Eingabefeldes ins \link("Clipboard-Verwaltung")Klemmbrett\#.
              Wird von \#TDialog.Copy\# aufgerufen.

Querverweise  \#TEdit\#

\end


screen("TEdit.Paste":sensitive)
TEdit.Paste (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paste; virtual;

Beschreibung  FÅgt die erste Zeile des Textes im \link("Clipboard-Verwaltung")Klemmbrett\# an
              der aktuellen Cursorposition im Eingabefeld ein.
              Wird von \#TDialog.Paste\# aufgerufen.

Querverweise  \#TEdit\#

\end


screen("TEdit.Edit":sensitive)
TEdit.Edit (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Edit; virtual;

Beschreibung  Wird bei _jedem_ Zeichen aufgerufen, das in das
              Eingabefeld eingefÅgt wird. In dieser Methode wird
              der Undo-Puffer und das énderungsflag gesetzt und
              das Validierungsobjekt abgefragt, wenn bei diesem
              das Flag \#voOnEdit\# gesetzt ist.
              Wenn diese Methode Åberschrieben wird, muû als
              erstes die ursprÅngliche Methode aufgerufen werden.

Querverweise  \#TEdit\#  \#TEdit.IsModified\#  \#TEdit.Undo\#

\end


screen("TEdit.Focus":sensitive,"Focus":sensitive)
TEdit.Focus (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Focus; virtual;

Beschreibung  Ruft \link("TControl.Parent")Parent\#^.\#SetFocus\#(\link("TControl.ObjIndx")ObjIndx\#) auf und bewegt damit
              den Eingabe-Cursor auf dieses Dialogelement.

Querverweise  \#TEdit\#

\end


screen("TEdit.GetClipboard":sensitive)
TEdit.GetClipboard (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClipboard: \#PClipboard\#; virtual;

Beschreibung  Liefert das TClipboard-Objekt, das mit dem TEdit-
              Objekt verknÅpft wird.
              StandardmÑûig wird \link("TControl.Parent")Parent\#^.\link("TWindow.Clipboard")Clipboard\# zurÅckge-
              geben. Will man ein spezialisiertes Klemmbrett-
              Objekt installieren, muû man diese Methode Åber-
              schreiben. WICHTIG: Ein solches Objekt wird
              dann von \#TEdit.Done\# _freigegeben_!

Querverweise  \#TEdit\#  \#TEdit.Clipboard\#

\end


screen("TEdit.GetCursor":sensitive,"GetCursor":sensitive)
TEdit.GetCursor (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCursor: integer; virtual;

Beschreibung  Gibt die Position des Eingabe-Cursors zurÅck:
              0=ganz am Anfang (vor dem Text), TextlÑnge=am Ende
              (hinter dem Text). Wichtig: Dies sagt nichts da-
              rÅber aus, ob dieses Eingabefeld auch aktiv ist.
              Dazu muû \link("TControl.ObjIndx")ObjIndx\# mit \#TDialog.GetFocus\# des zuge-
              hîrigen Dialogobjekts verglichen werden, und
              zusÑtzlich muû \link("TWindow.Attr.Status")TDialog.Attr.Status\#=\#ws_Open\# sein.
              ObjectGEM verwaltet nÑmlich pro Eingabefeld einen
              eigenen Cursor, und dessen Position wird solange
              gespeichert, bis das entsprechende Dialogelement-
              objekt aus dem Speicher entfernt wird.

Querverweise  \#TEdit\#  \#TEdit.SetCursor\#  \#TControl.Parent\#

\end


screen("TEdit.IsModified":sensitive,"IsModified":sensitive)
TEdit.IsModified (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsModified: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn der Text im Eingabefeld ge-
              Ñndert wurde. Wichtig: Das énderungsflag wird
              _nicht_ automatisch auf false gesetzt, dazu muû
              \#ClearModify\# aufgerufen werden.

Querverweise  \#TEdit\#

\end


screen("TEdit.IsValid":sensitive)
TEdit.IsValid (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsValid(ReportError: boolean): boolean;
                                                         virtual;

Beschreibung  Gibt true zurÅck, wenn der Text des Eingabefeldes
              gÅltig ist. IsValid gibt immer true zurÅck, wenn
              kein Validierungsobjekt mit diesem TEdit-Objekt
              verknÅpft ist. Andernfalls wird, wenn ReportError
              true ist, die RÅckgabe von \#TValidator.Valid\# weiter-
              gereicht, ansonsten die von \#TValidator.IsValid\#.

Querverweise  \#TEdit\#

\end


screen("TEdit.SetColor":sensitive)
TEdit.SetColor (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetColor(Color: integer); virtual;

Beschreibung  Ruft den Vorfahren \#TControl.SetColor\# auf, beachtet
              aber zusÑtzlich den Eingabe-Cursor.

Querverweise  \#TEdit\#

\end


screen("TEdit.SetCursor":sensitive)
TEdit.SetCursor (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCursor(CPos: integer); virtual;

Beschreibung  Setzt den Eingabe-Cursor an die Position CPos
              (0..TextlÑnge). Wenn es sich um das aktive Ein-
              gabefeld eines sichtbaren Dialogs handelt, wird
              der Cursor an der neuen Position gezeichnet.

Querverweise  \#TEdit\#  \#TEdit.GetCursor\#

\end


screen("TEdit.SetValidator":sensitive,"SetValidator":sensitive)
TEdit.SetValidator (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetValidator(AValid: PValidator); virtual;

Beschreibung  Gibt das eventuell schon vorhandene Validierungs-
              objekt frei und setzt dann \#Validator\# auf AValid.

Querverweise  \#TEdit\#  \#TValidator\#

\end


screen("TEdit.SetState":sensitive)
TEdit.SetState (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetState(StateFlag: integer); virtual;

Beschreibung  Ruft den Vorfahren \#TControl.SetState\# auf, beachtet
              aber zusÑtzlich den Eingabecursor.

Querverweise  \#TEdit\#

\end


screen("TEdit.SetText":sensitive)
TEdit.SetText (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  Setzt den Text des Eingabefeldes. Muûte Åber-
              schrieben werden, damit der Undo-Puffer, das
              énderungsflag und der Cursor korrekt behandelt
              werden. Intern wird trotzdem noch \#TStatic.SetText\#
              aufgerufen (hierbei ist es vielleicht interessant
              zu wissen, daû bei TEdit-Objekten \#sts_Fill\# nor-
              malerweise _nicht_ gesetzt ist).

Querverweise  \#TEdit\#

\end


screen("TEdit.Undo":sensitive)
TEdit.Undo (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Undo; virtual;

Beschreibung  Macht die letzte énderung rÅckgÑngig, wenn im
              Undo-Puffer eine entsprechende Zeichenkette vor-
              handen ist.

Querverweise  \#TEdit\#  \#TEdit.CanUndo\#

\end


screen("TValidator":sensitive,"PValidator":sensitive)
TValidator                                           Unit \#OWindows\#
------------------------------------------------------------------

TValidator definiert ein weitestgehend abstraktes Validierungs-
objekt. Es ist nicht sinnvoll, dieses Objekt zu instantiieren,
auûer man mîchte nur verhindern, daû das zugehîrige Eingabefeld
leer ist (s. \#voNotEmpty\#). Jedoch bietet es die Basis fÅr weiter-
reichende Validierungsobjekte, da es die wichtigsten dafÅr not-
wendigen Methoden vordefiniert.

	Pointer
		PValidator = ^TValidator;

	Felder
		\#Options\#
		\link("TValidator.Status")Status\#
		\link("TValidator.Window")Window\#

	Methoden
		\link("TValidator.Init")Init\#
		\link("TValidator.Error")Error\#
		\link("TValidator.IsValid")IsValid\#
		\link("TValidator.IsValidInput")IsValidInput\#
		\#Valid\#

	Vorfahre
		\#TObject\#
	Nachfahren
		\#TFilterValidator\#  \#TLookupValidator\#  \#TPXPictureValidator\#

\end


screen("TValidator.Options":sensitive,"Options":sensitive)
TValidator.Options (Feld)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Options: word;

Beschreibung  Options ist ein Bitmap-Feld, das die Optionen fÅr
              verschiedene Nachkommen von TValidator kontrol-
              liert. StandardmÑûig wird Options mit 0 initiali-
              siert.

Querverweise  \#TValidator\#  \#voXXXX-Konstanten\#

\end


screen("TValidator.Status":sensitive)
TValidator.Status (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Status: word;

Beschreibung  Bezeichnet den Status des Validierungsobjekts. Ist
              Status gleich \#vsOK\#, wurde das Objekt korrekt initi-
              alisiert. Jeder andere Wert bedeutet, daû ein
              Fehler aufgetreten ist.

Querverweise  \#TValidator\#  \#vsXXXX-Konstanten\#

\end


screen("TValidator.Window":sensitive)
TValidator.Window (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Window: PDialog;

Beschreibung  Wird zunÑchst mil \#nil\# initialisiert und dann von
              \#TEdit.SetValidator\# mit einem Zeiger auf den Dialog
              besetzt, zu dem das Eingabefeld gehîrt.

Querverweise  \#TValidator\#

\end


screen("TValidator.Init":sensitive)
TValidator.Init (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init;

Beschreibung  Ruft \#TObject.Init\# auf und setzt danach \#Options\# auf
              Null, \link("TValidator.Status")Status\# auf \#vsOK\# und \link("TValidator.Window")Window\# auf nil.

Querverweise  \#TValidator\#

\end


screen("TValidator.Error":sensitive)
TValidator.Error (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration		procedure Error; virtual;

Beschreibung  Error wird von \#Valid\# aufgerufen, wenn diese Methode
              feststellt, daû der Anwender ungÅltige Werte ein-
              gegeben hat. Diese Instanz vor Error zeigt eine
              Fehlermeldung an, wenn \#voNotEmpty\# gesetzt ist, die
              Eingabe aber leer ist.

Querverweise  \#TValidator\#  \#TValidator.Options\#

\end


screen("TValidator.IsValid":sensitive)
TValidator.IsValid (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration		function IsValid(s: string): boolean; virtual;

Beschreibung  Gibt an, ob die in s Åbergebene Zeichenkette eine
              gÅltige Eingabe fÅr das zugehîrige Eingabefeld
              darstellt.
              Normalerweise gibt IsValid true zurÅck, nur wenn
              \#voNotEmpty\# gesetzt ist, wird vorher noch geprÅft,
              ob s nicht leer ist.

Querverweise  \#TValidator\#  \#TEdit.IsValid\#

\end


screen("TValidator.IsValidInput":sensitive)
TValidator.IsValidInput (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration		function IsValidInput(var s: string;
                        SuppressFill: boolean): boolean; virtual;

Beschreibung  Ein Eingabefeld, das mit einem Validierungsobjekt
              verbunden ist, ruft, wenn bei letzterem \#voOnEdit\#
              gesetzt ist, IsValidInput auf, wÑhrend es in seiner
              \link("TEdit.Edit")Edit\#-Methode die Eingabe eines Zeichens bearbeitet.
              Dadurch haben Validierungsobjekte die Mîglichkeit,
              fehlerhafte Eingaben zu ermitteln (und zu korri-
              gieren), bevor der Anwender die Eingabe abgeschlos-
              sen hat.
              TValidator.IsValidInput selbst gibt immer true
              zurÅck. Um dieses Verhalten zu Ñndern, d.h. eine
              öberprÅfung zu ermîglichen, muû die Methode Åber-
              schrieben werden.
              s ist der aktuelle Eingabestring. SuppressFill
              legt fest, ob das Validierungsobjekt vor der
              öberprÅfung evtl. fehlende Zeichen ergÑnzen soll
              (z.B. Leerzeichen, Datumsformatierung etc.).
              Ist SuppressFill true, wird s unverÑndert geprÅft,
              ansonsten sollten vom Objekt - sofern dies vorge-
              sehen ist - die entsprechenden énderungen vorge-
              nommen werden.
              Da s ein var-Parameter ist, kann ihn IsValidInput
              verÑndern (z.B. Klein- in Groûbuchstaben umwan-
              deln). Es sollten jedoch niemals ungÅltige Zeichen
              aus dem String gelîscht werden. Dadurch, daû in
              diesem Fall false zurÅckgegeben wird, erfÑhrt das
              Eingabefeld von der Existenz ungÅltiger Zeichen
              und kann sich selbst um deren Eliminierung kÅmmern.

Querverweise  \#TValidator\#

\end


screen("TValidator.Valid":sensitive,"Valid":sensitive)
TValidator.Valid (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration		function Valid(s: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn auch \link("TValidator.IsValid")IsValid\#(s) true zurÅck-
              gibt. Andernfalls wird \link("TValidator.Error")Error\# aufgerufen und false
              geliefert. Wird von \#TEdit.IsValid\# aufgerufen.

Querverweise  \#TValidator\#

\end


screen("TFilterValidator":sensitive,"PFilterValidator":sensitive)
TFilterValidator                                     Unit \#OValidat\#
------------------------------------------------------------------

Das Objekt TFilterValidator Åberwacht ein Eingabefeld, in das der
Anwender Zeichen eingibt, und vergleicht die Eingabe mit einem
Satz erlaubter Zeichen. Wurde ein Zeichen eingegeben, das nicht
in diesem Satz enthalten ist, wird eine ungÅltige Eingabe ge-
meldet. Teilweise wird dieses Verhalten schon vom GEM abgedeckt
(siehe \#TEDINFO\#-Struktur), allerdings ist dieses Validierungs-
objekt wesentlich flexibler, da eine beliebige Menge an er-
laubten Zeichen angegeben werden kann.

	Pointer
		PFilterValidator = ^TFilterValidator;

	Felder
		\#ValidChars\#

	Methoden
		\link("TFilterValidator.Init")Init\#
		\link("TFilterValidator.Error")Error\#
		\link("TFilterValidator.IsValid")IsValid\#
		\link("TFilterValidator.IsValidInput")IsValidInput\#

	Vorfahre
		\#TValidator\#
	Nachfahre
		\#TRangeValidator\#

\end


screen("TFilterValidator.ValidChars":sensitive,"ValidChars":sensitive)
TFilterValidator.ValidChars (Feld)                   Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   ValidChars: \#TCharSet\#;

Beschreibung  Speichert den Satz fÅr die Eingabe gÅltiger Zeichen.
              Sollen z.B. nur Ziffern erlaubt sein, muû ValidChars
              den Wert ['0'..'9'] haben.
              Wird von \#TFilterValidator.Init\# gesetzt.

Querverweise  \#TFilterValidator\#

\end


screen("TFilterValidator.Init":sensitive)
TFilterValidator.Init (Methode)                      Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   constructor Init(ValidCharSet: TCharSet);

Beschreibung  Ruft \#TValidator.Init\# auf und setzt dann \#ValidChars\#
              auf ValidCharSet und \#Options\# auf \#voOnEdit\#.

Querverweise  \#TFilterValidator\#

\end


screen("TFilterValidator.Error":sensitive)
TFilterValidator.Error (Methode)                     Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		procedure Error; virtual;

Beschreibung  Zeigt die Fehlermeldung an, daû die Eingabe un-
              gÅltige Zeichen enthÑlt.

Querverweise  \#TFilterValidator\#

\end


screen("TFilterValidator.IsValid":sensitive)
TFilterValidator.IsValid (Methode)                   Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValid(s: string): boolean; virtual;

Beschreibung  Vergleicht jedes Zeichen in s mit \#ValidChars\#. Ist
              jedes Zeichen gÅltig und liefert \#TValidator.IsValid\#
              true, wird true zurÅckgegeben.

Querverweise  \#TFilterValidator\#

\end


screen("TFilterValidator.IsValidInput":sensitive)
TFilterValidator.IsValidInput (Methode)              Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValidInput(var s: string;
                        SuppressFill: boolean): boolean; virtual;

Beschreibung  Vergleicht jedes Zeichen in s mit \#ValidChars\#.
              Ist jedes Zeichen gÅltig (evtl. werden dazu Klein-
              in Groûbuchstaben umgewandelt), wird true zurÅck-
              gegeben, sonst false.
              Ist s ein Leerstring, ist die RÅckgabe immer true.

Querverweise  \#TFilterValidator\#  \#TValidator.IsValidInput\#

\end


screen("TRangeValidator":sensitive,"PRangeValidator":sensitive)
TRangeValidator                                      Unit \#OValidat\#
------------------------------------------------------------------

TRangeValidator ÅberprÅft, ob eine vom Anwender eingegebene Zahl
innerhalb eines festgelegten ganzzahligen Bereichs liegt.

	Pointer
		PRangeValidator = ^TRangeValidator;

	Felder
		\link("TRangeValidator.Max")Max\#
		\link("TRangeValidator.Min")Min\#

	Methoden
		\link("TRangeValidator.Init")Init\#
		\link("TRangeValidator.Error")Error\#
		\link("TRangeValidator.IsValid")IsValid\#
		\link("TRangeValidator.IsValidInput")IsValidInput\#

	Vorfahre
		\#TFilterValidator\#
	Nachfahren
		---

\end


screen("TRangeValidator.Min":sensitive)
TRangeValidator.Min (Feld)                           Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   Min: longint;

Beschreibung  Bestimmt den kleinstmîglichen ganzzahligen Wert
              fÅr die Eingabe.

Querverweise  \#TRangeValidator\#

\end


screen("TRangeValidator.Max":sensitive)
TRangeValidator.Max (Feld)                           Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   Max: longint;

Beschreibung  Bestimmt den grîûtmîglichen ganzzahligen Wert
              fÅr die Eingabe.

Querverweise  \#TRangeValidator\#

\end


screen("TRangeValidator.Init":sensitive)
TRangeValidator.Init (Methode)                       Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   constructor Init(AMin,AMax: longint);

Beschreibung  Ruft \#TFilterValidator.Init\#(['0'..'9','+','-']) auf,
              d.h. in dem Eingabefeld sind nur positive oder
              negative Dezimalzahlen erlaubt. Wenn AMin grîûer
              gleich Null ist, wird '-' aus \#ValidChars\# wieder
              entfernt. Dann wird \link("TRangeValidator.Min")Min\# auf AMin und \link("TRangeValidator.Max")Max\# auf AMax
              gesetzt und \#voOnEdit\# aus \#Options\# gelîscht.

Querverweise  \#TRangeValidator\#

\end


screen("TRangeValidator.Error":sensitive)
TRangeValidator.Error (Methode)                      Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		procedure Error; virtual;

Beschreibung  Zeigt die Fehlermeldung an, daû der eingegebene
              Wert nicht innerhalb des zulÑssigen Bereichs liegt.

Querverweise  \#TRangeValidator\#
              \#TRangeValidator.Min\#  \#TRangeValidator.Max\#

\end


screen("TRangeValidator.IsValid":sensitive)
TRangeValidator.IsValid (Methode)                    Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValid(s: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn s (in eine longint-Zahl
              umgewandelt) innerhalb des Intervalls [\link("TRangeValidator.Min")Min\#,\link("TRangeValidator.Max")Max\#]
              liegt und \#TFilterValidator.IsValid\# ebenfalls
              true liefert.
              Evtl. vorhandene Leerzeichen werden vor der
              Umwandlung abgeschnitten.

Querverweise  \#TRangeValidator\#

\end


screen("TRangeValidator.IsValidInput":sensitive)
TRangeValidator.IsValidInput (Methode)               Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValidInput(var s: string;
                        SuppressFill: boolean): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn s (in eine longint-Zahl
              umgewandelt) innerhalb des Intervalls [\link("TRangeValidator.Min")Min\#,\link("TRangeValidator.Max")Max\#]
              liegt und \#TFilterValidator.IsValidInput\# ebenfalls
              true liefert.

Querverweise  \#TRangeValidator\#  \#TValidator.IsValidInput\#

\end


screen("TLookupValidator":sensitive,"PLookupValidator":sensitive)
TLookupValidator                                     Unit \#OValidat\#
------------------------------------------------------------------

TLookupValidator vergleicht einen gegebenen String mit einer
Liste gÅltiger Werte. Es ist ein abstrakter Objekttyp, d.h. es
macht nicht sehr viel Sinn, ihn zu instantiieren. Er kann aber
als Grundlage neuer Objekttypen verwendet werden, die Åber eine
entsprechende Liste gÅltiger Werte verfÅgen. Dazu muû dann auch
die Methode Lookup Åberschrieben werden.

	Pointer
		PLookupValidator = ^TLookupValidator;

	Methoden
		\link("TLookupValidator.IsValid")IsValid\#
		\link("TLookupValidator.Lookup")Lookup\#

	Vorfahre
		\#TValidator\#
	Nachfahre
		\#TStringLookupValidator\#

\end


screen("TLookupValidator.IsValid":sensitive)
TLookupValidator.IsValid (Methode)                   Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValid(s: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn \link("TLookupValidator.Lookup")Lookup\# true liefert. Wenn
              \#voNotEmpty\# gesetzt ist, darf die Eingabe auûerdem
              nicht leer sein, sonst wird false zurÅckgegeben.

Querverweise  \#TLookupValidator\#

\end


screen("TLookupValidator.Lookup":sensitive)
TLookupValidator.Lookup (Methode)                    Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function Lookup(s: string): boolean; virtual;

Beschreibung  Vergleicht die Zeichenkette s mit einer Liste
              gÅltiger Elemente und gibt true zurÅck, wenn s
              einem dieser Elemente entspricht, sonst false.
              TLookupValidator.Lookup ist allerdings eine
              abstrakte Methode, die immer _true_ zurÅckgibt.

Querverweise  \#TLookupValidator\#  \#TStringLookupValidator.Lookup\#

\end


screen("TStringLookupValidator":sensitive,"PStringLookupValidator":sensitive)
TStringLookupValidator                               Unit \#OValidat\#
------------------------------------------------------------------

TStringLookupValidator vergleicht die Zeichenkette eines \#TEdit\#-
Objektes mit einer Liste gÅltiger Strings, so daû eine Eingabe
auf bestimmte, aber evtl. komplett verschiedenen Zeichenketten
beschrÑnkt werden kann.

	Pointer
		PStringLookupValidator = ^TStringLookupValidator;

	Felder
		\#Strings\#

	Methoden
		\link("TStringLookupValidator.Init")Init\#
		\link("TStringLookupValidator.Done")Done\#
		\link("TStringLookupValidator.Error")Error\#
		\link("TStringLookupValidator.Lookup")Lookup\#
		\#NewStringList\#

	Vorfahre
		\#TLookupValidator\#
	Nachfahren
		---

\end


screen("TStringLookupValidator.Strings":sensitive,"Strings":sensitive)
TStringLookupValidator.Strings (Feld)                Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   Strings: \#PStringCollection\#;

Beschreibung  Zeigt auf eine String-Kollektion, die alle akzep-
              tablen Zeichenketten enthÑlt. Ist Strings \#nil\#, wird
              jede Eingabe _zurÅckgewiesen_.
              Wird von \#TStringLookupValidator.Init\# gesetzt
              und kann mit \#NewStringList\# ersetzt werden.

Querverweise  \#TStringLookupValidator\#

\end


screen("TStringLookupValidator.Init":sensitive)
TStringLookupValidator.Init (Methode)                Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   constructor Init(AString: PStringCollection);

Beschreibung  Ruft den geerbten \link("TValidator.Init")Init\#-Konstruktor auf und setzt
              dann \#Strings\# auf AString.

Querverweise  \#TStringLookupValidator\#

\end


screen("TStringLookupValidator.Done":sensitive)
TStringLookupValidator.Done (Methode)                Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Ruft \#NewStringList\#(nil) auf und gibt damit die
              Kollektion, auf die \#Strings\# zeigt, frei.

Querverweise  \#TStringLookupValidator\#

\end


screen("TStringLookupValidator.Error":sensitive)
TStringLookupValidator.Error (Methode)               Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   procedure Error; virtual;

Beschreibung  Zeigt die Fehlermeldung an, daû die Eingabe nicht
              in der GÅltigkeitsliste vorhanden ist.

Querverweise  \#TStringLookupValidator\#

\end


screen("TStringLookupValidator.Lookup":sensitive)
TStringLookupValidator.Lookup (Methode)              Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   function Lookup(s: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn s einem der in der Kollektion
              \#Strings\# gespeicherten Zeichenketten entspricht. Zur
              Suche wird die Kollektion-Methode \#Search\# verwendet.
              Ist Strings \#nil\#, wird immer _false_ zurÅckgegeben.

Querverweise  \#TStringLookupValidator\#

\end


screen("TStringLookupValidator.NewStringList":sensitive,"NewStringList":sensitive)
TStringLookupValidator.NewStringList (Methode)       Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   procedure NewStringList(AString: PStringCollection);
                                                         virtual;

Beschreibung  Gibt eine evtl. schon vorhandene GÅltigkeitsliste
              frei und setzt dann \#Strings\# auf AString. Wird in
              AString \#nil\# Åbergeben, besitzt das Validierungs-
              objekt fortan keine GÅltigkeitsliste mehr und
              nimmt somit auch _keine_ Eingabe mehr an.

Querverweise  \#TStringLookupValidator\#

\end


screen("TPXPictureValidator":sensitive,"PPXPictureValidator":sensitive)
TPXPictureValidator                                  Unit \#OValidat\#
------------------------------------------------------------------

Mit diesem Objekt kînnen Eingabefelder mit Datenbank-Masken, die
kompatibel zu Paradox (Borland) sind, auf GÅltigkeit ÅberprÅft
werden. Die Mîglichkeiten sind sehr komplex und gehen weit Åber
die vom GEM bereitgestellten Masken hinaus.

	Pointer
		PPXPictureValidator = ^TPXPictureValidator;

	Felder
		\#Pic\#

	Methoden
		\link("TPXPictureValidator.Init")Init\#
		\link("TPXPictureValidator.Done")Done\#
		\link("TPXPictureValidator.Error")Error\#
		\link("TPXPictureValidator.IsValid")IsValid\#
		\link("TPXPictureValidator.IsValidInput")IsValidInput\#
		\#Picture\#

	Vorfahre
		\#TValidator\#
	Nachfahren
		---

\end


screen("TPXPictureValidator.Pic":sensitive,"Pic":sensitive)
TPXPictureValidator.Pic (Feld)                       Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   Pic: PString;

Beschreibung  EnthÑlt die Paradox-Maske zur öberprÅfung der
              Eingabe. Wird von \#TPXPictureValidator.Init\# gesetzt
              und von \#Picture\# aus gewertet.
              Die Masken setzen sich aus folgenden Elementen
              zusammen:

                #   Akzeptiert nur eine Ziffer
                ?   Akzeptiert einen beliebigen Buchstaben
                &   Akzeptiert Buchstaben und wandelt sie
                    in Groûbuchstaben um
                @   Akzeptiert jedes Zeichen
                !   Akzeptiert jedes Zeichen und wandelt
                    Klein- in Groûbuchstaben um
                ;   Das folgende Zeichen wird buchstÑblich
                    Åbernommen
                *   WiederholungszÑhler
                []  Der Maskenteil ist optional
                {}  markiert eine Gruppe, mit
                ,   werden die Alternativen getrennt

              Alle anderen Zeichen werden buchstÑblich Åbernommen.
              Bei Gruppierungen mit Alternativen kann es vorkom-
              men, daû spÑtere Alternativen nicht erkannt werden,
              weil die jeweilige Eingabe schon als Anfangsteil
              einer frÅheren Maske aufgetaucht ist. In diesem
              fall muû man versuchen, die Gruppe anders zu
              sortieren.

Beispiele     DM*#;,##;@       StÅckpreis, z.B. DM345,67@
              ???;;;#          z.B. ABC;#
              *5#              fÅnf Ziffern (#####)
              *#               beliebig viele (auch Null) Ziffern
              &*?              Wort mit groûem Anfangsbuchstaben
              *3{##:}          = ##:##:##:
              *3{5}#           = 555#
              *35#             35 Wiederholungen von #
              {20,75,100}W     Wattzahlen von GlÅhbirnen
              *{&[*?][@][ ]}   bel. Anzahl Wîrter mit groûem
                               Anfangsbuchstaben
              ROT,BLAU         eines der beiden Worte
              ###,##           zwei- oder dreistellige Zahl;
                               ##,### hÑtte _nicht_ den ge-
                               wÅnschten Effekt!

Querverweise  \#TPXPictureValidator\#

\end


screen("TPXPictureValidator.Init":sensitive)
TPXPictureValidator.Init (Methode)                   Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   constructor Init(APic: string; AutoFill: boolean);

Beschreibung  Ruft \#TValidator.Init\# auf und setzt \#Pic\# auf APic.
              Dann wird \#Options\# auf \#voOnAppend\# und, wenn in
              AutoFill true Åbergeben wurde, zusÑtzlich auf
              \#voFill\# gesetzt. Danach wird die in APic Åber-
              gebene Maske auf GÅltigkeit getestet. Wenn ein
              Fehler auftritt, wird \link("TValidator.Status")Status\# auf \#vsSyntax\#
              gesetzt.
              WICHTIG: AutoFill hat z.Z. noch KEINE Wirkung!

Querverweise  \#TPXPictureValidator\#

\end


screen("TPXPictureValidator.Done":sensitive)
TPXPictureValidator.Done (Methode)                   Unit \#OValidat\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  \#Pic\# wird freigegeben, danach wird der Destruktor
              des Vorfahren aufgerufen.

Querverweise  \#TPXPictureValidator\#

\end


screen("TPXPictureValidator.Error":sensitive)
TPXPictureValidator.Error (Methode)                  Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		procedure Error; virtual;

Beschreibung  Zeigt die Fehlermeldung an, daû die Eingabe nicht
              zur Maske in \#Pic\# paût.

Querverweise  \#TPXPictureValidator\#

\end


screen("TPXPictureValidator.IsValid":sensitive)
TPXPictureValidator.IsValid (Methode)                Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValid(s: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn die Eingabe korrekt oder
              leer ist (letzteres nur dann, wenn \#voNotEmpty\#
              _nicht_ gesetzt ist).

Querverweise  \#TPXPictureValidator\#  \#TPXPictureValidator.Picture\#

\end


screen("TPXPictureValidator.IsValidInput":sensitive)
TPXPictureValidator.IsValidInput (Methode)           Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function IsValidInput(var s: string;
                        SuppressFill: boolean): boolean; virtual;

Beschreibung  Liefert true, wenn \#Pic\# keine Maske zugewiesen ist
              oder wenn \#Picture\# keinen Fehler in der Eingabe
              feststellen kann.

Querverweise  \#TPXPictureValidator\#

\end


screen("TPXPictureValidator.Picture":sensitive,"Picture":sensitive,
       "PPicResult":sensitive,"TPicResult":sensitive,"prComplete":sensitive,
       "prIncomplete":sensitive,"prEmpty":sensitive,"prError":sensitive,
       "prSyntax":sensitive,"prAmbiguous":sensitive,"prIncompNoFill":sensitive)
TPXPictureValidator.Picture (Methode)                Unit \#OValidat\#
------------------------------------------------------------------

Deklaration		function Picture(var Input: string;
                          AutoFill: boolean): TPicResult; virtual;

Beschreibung  PrÅft den in Input Åbergebenen String auf öberein-
              stimmung mit der Maske in \#Pic\#. Dabei werden notfalls
              Korrekturen (z.B. Groû-/Kleinwandlung) vorgenommen.
              Ist AutoFill true, wird die Eingabe mit evtl.
              fehlenden Zeichen aufgefÅllt, sofern diese ein-
              deutig bestimmt sind. WICHTIG: Diese Option ist
              z.Z. noch ohne Wirkung!
              TPicResult ist wie folgt deklariert:

								PPicResult = ^TPicResult;
								TPicResult = (prComplete, prIncomplete, prEmpty,
								              prError, prSyntax, prAmbiguous,
								              prIncompNoFill);

              Als RÅckgabe erhÑlt man einen der folgenden Werte
              (nicht beschriebene Werte werden nur intern ver-
              wendet):

              	prComplete     Die Eingabe ist korrekt
              	prIncomplete   Die Eingabe ist soweit korrekt,
              	               erfÅllt die Maske aber nicht voll-
              	               stÑndig
              	prEmpty        Die Eingabe ist leer
              	prError        Die Eingabe paût nicht zur Maske
              	prSyntax       Die Maske ist falsch (meistens
              	               falsche Klammerung)
              	prAmbiguous    Tritt auf, wenn die Eingabe die
              	               Maske erfÅllt, aber am Ende der
              	               Eingabe noch Zeichen Åbrig bleiben

Querverweise  \#TPXPictureValidator\#

\end


screen("TPopup":sensitive,"PPopup":sensitive)
TPopup                                               Unit \#OWindows\#
------------------------------------------------------------------

Popup-MenÅs erscheinen an einer beliebigen Bildschirmposition
(z.B. beim Mauscursor) und lassen den Benutzer aus einer festen
Liste von Werten, Aktionen etc. auswÑhlen. Zur Zeit kînnen nur
in einer Resourcedatei vordefinierte Popups bearbeitet werden,
spÑter kommen noch dynamische Popups dazu (die dann zur Lauf-
zeit erstellt werden). Eine einfache Bearbeitung von Popup-
MenÅs kann mit \#TApplication.Popup\# erfolgen.
Eine Beschreibung der Tastatursteuerung und der weitergehenden
Programmierung findet sich unter \#Popup-MenÅs\#.

	Pointer
		PPopup = ^TPopup;

	Felder
		\#pFlag\#
		\#pIndex\#
		\#pMax\#
		\#PopTree\#
		\#pRows\#
		\#pX\#
		\#pY\#

	Methoden
		\link("TPopup.Init")Init\#
		\link("TPopup.Done")Done\#
		\link("TPopup.Check")Check\#
		\link("TPopup.Disable")Disable\#
		\link("TPopup.Enable")Enable\#
		\link("TPopup.Execute")Execute\#
		\#ExitPop\#
		\link("TPopup.GetCheck")GetCheck\#
		\link("TPopup.GetSelection")GetSelection\#
		\link("TPopup.GetState")GetState\#
		\link("TPopup.GetText")GetText\#
		\#KeyExit\#
		\link("TPopup.SetCheck")SetCheck\#
		\#SetPopTree\#
		\link("TPopup.SetSelection")SetSelection\#
		\link("TPopup.SetState")SetState\#
		\link("TPopup.SetText")SetText\#
		\link("TPopup.Toggle")Toggle\#
		\link("TPopup.Uncheck")Uncheck\#

	Vorfahre
		\#TEvent\#
	Nachfahren
		---

\end


screen("TPopup.pFlag":sensitive,"pFlag":sensitive,"POP_LEFTOP":sensitive,"POP_CENTER":sensitive)
TPopup.pFlag (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pFlag: integer;

Beschreibung  Gibt an, auf welche Position sich die Koordinaten
              \#pX\# und \#pY\# beziehen. Wird mit \#POP_LEFTOP\# (0) ini-
              tialisiert, d.h. pX und pY entsprechen der linken
              oberen Ecke des Popup-MenÅs. Der andere mîgliche
              Wert ist \#POP_CENTER\# (1), pX und pY entsprechen
              dann der Mitte des Popups.

Querverweise  \#TPopup\#

\end


screen("TPopup.pIndex":sensitive,"pIndex":sensitive)
TPopup.pIndex (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pIndex: integer;  (nur lesen)

Beschreibung  Entspricht dem Index des Popup-Hintergrundrechtecks
              im Objektbaum \#PopTree\#. Wird von \#TPopup.Init\# gesetzt.
              Kann auch \#ROOT\# sein (dann wÑre der gesamte Baum
              das Popup-MenÅ).

Querverweise  \#TPopup\#

\end


screen("TPopup.pMax":sensitive,"pMax":sensitive)
TPopup.pMax (Feld)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pMax: integer;  (nur lesen)

Beschreibung  Gibt an, wieviele EintrÑge das Popup-MenÅ maximal
              enthÑlt. Ist im Moment identisch mit \#pRows\#, da
              der Wert aus der Resource ermittelt wird. Bei den
              spÑter verfÅgbaren dynamischen Popups kann das
              MenÅ aber durchaus mehr EintrÑge besitzen, als
              gerade sichtbar sind.

Querverweise  \#TPopup\#

\end


screen("TPopup.PopTree":sensitive,"PopTree":sensitive)
TPopup.PopTree (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   PopTree: \#PTree\#;  (nur lesen)

Beschreibung  PopTree zeigt auf den Objektbaum, in dem man prak-
              tischerweise alle Popup-MenÅs eines Programms zu-
              sammenfassen kann (allerdings nicht muû). Die MenÅs
              bestehen aus einem \#G_BOX\#-Objekt als Hintergrund,
              das von oben nach unten sortierte \#G_STRING\#-EintrÑge
              enthÑlt.
              Wird von \#TPopup.Init\# gesetzt.

Querverweise  \#TPopup\#  \#pIndex\#

\end


screen("TPopup.pRows":sensitive,"pRows":sensitive)
TPopup.pRows (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pRows: integer;  (nur lesen)

Beschreibung  Gibt an, wieviele EintrÑge angezeigt werden, d.h.
              aus wieviele Zeilen das Popup-MenÅ besteht. Ist
              im Moment immer identisch mit \#pMax\#.
              Beim Entwurf im RCS muû bedacht werden, daû nicht
              mehr als z.Z. 19 EintrÑge erlaubt sind!

Querverweise  \#TPopup\#

\end


screen("TPopup.pX":sensitive,"pX":sensitive)
TPopup.pX (Feld)                                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pX: integer;

Beschreibung  Gibt die X-Position des Popup-MenÅs an. Wird mit 0
              initialisiert und sollte deshalb geÑndert werden
              (das macht z.B. \#TApplication.Popup\#).

Querverweise  \#TPopup\#  \#TPopup.pFlag\#

\end


screen("TPopup.pY":sensitive,"pY":sensitive)
TPopup.pY (Feld)                                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   pY: integer;

Beschreibung  Gibt die Y-Position des Popup-MenÅs an. Wird mit 0
              initialisiert und sollte deshalb geÑndert werden
              (das macht z.B. \#TApplication.Popup\#).

Querverweise  \#TPopup\#  \#TPopup.pFlag\#

\end


screen("TPopup.Init":sensitive)
TPopup.Init (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject;
                                   tIndx,oIndx: integer);

Beschreibung  Ruft den Vorfahren \#TEvent.Init\# auf und setzt dann
              PopTree auf den durch tIndx angegebenen Objektbaum.
              Danach werden \#pMax\# und pRows berechnet. Entspricht
              das MenÅ nicht den Konventionen (siehe \#PopTree\# und
              \#pRows\#), wird die Initialisierung abgebrochen.
              Schlieûlich wird noch \#pIndex\# auf oIndx gesetzt,
              und \#pFlag\#, \#pX\# und \#pY\# werden initialisiert.
              Wenn in tIndx \#id_No\# Åbergeben wird, kann mit der
              Methode \#SetPopTree\# z.B. ein im Speicher erzeugter
              Objektbaum gesetzt werden, andernfalls wird das
              Åbergebene MenÅ _umkopiert_! oIndx muû aber trotz-
              dem korrekt gesetzt sein (d.h. grîûer gleich \#ROOT\#
              sein)!

Querverweise  \#TPopup\#

\end


screen("TPopup.Done":sensitive)
TPopup.Done (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt den Speicherplatz der kopierten Resource frei
              und ruft den Vorfahren \#TEvent.Done\# auf.

Querverweise  \#TPopup\#

\end


screen("TPopup.Check":sensitive)
TPopup.Check (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Check(nr: integer); virtual;

Beschreibung  Ruft \link("TPopup.SetCheck")SetCheck\#(nr,\#bf_Checked\#) auf und markiert
              damit den Eintrag nr mit einem HÑkchen.

Querverweise  \#TPopup\#  \#TPopup.Uncheck\#

\end


screen("TPopup.Disable":sensitive)
TPopup.Disable (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Disable(nr: integer); virtual;

Beschreibung  Ruft \link("TPopup.SetState")SetState\#(nr,\#bf_Disabled\#) auf und macht den
              Eintrag nr damit nicht anwÑhlbar (hell dargstellt).

Querverweise  \#TPopup\#  \#TPopup.Enable\#

\end


screen("TPopup.Enable":sensitive)
TPopup.Enable (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Enable(nr: integer); virtual;

Beschreibung  Ruft \link("TPopup.SetState")SetState\#(nr,\#bf_Enabled\#) auf und macht den
              Eintrag nr damit wieder anwÑhlbar.

Querverweise  \#TPopup\#  \#TPopup.Disable\#

\end


screen("TPopup.Execute":sensitive)
TPopup.Execute (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Execute: integer; virtual;

Beschreibung  Execute Åbernimmt die eigentliche Bearbeitung des
              Popup-MenÅs (Zeichnen, Abarbeiten, Auswerten). Als
              RÅckgabe erhÑlt man \#id_No\#, wenn die Bearbeitung
              abgebrochen wurde, oder einen Wert zwischen 0 und
              \#pRows\#-1 (inklusive), der die Nummer des angewÑhlten
              Eintrags angibt.
              Die Anwahl der EintrÑge kann mit der linken Maus-
              taste, <Return>, <Enter> oder <Space> erfolgen.
              Das MenÅ kann mit der rechten Maustaste, <Undo>
              oder <Esc> abgebrochen werden. Zur Steuerung
              innerhalb des MenÅs kînnen (neben der Maus) die
              Tasten <Cursor hoch,runter> und [<Shift>+]<Home>
              benutzt werden.
              Sind in dem MenÅ alle EintrÑge disabled, wird
              es zwar angezeigt, als RÅckgabe erhÑlt man aber
              immer id_No.

Querverweise  \#TPopup\#       \#TPopup.ExitPop\#  \#TApplication.Popup\#
              \#Popup-MenÅs\#  \#TPopup.KeyExit\#

\end


screen("TPopup.GetCheck":sensitive)
TPopup.GetCheck (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCheck(nr: integer): integer; virtual;

Beschreibung  Liefert \#bf_Checked\# oder \#bf_Unchecked\#, je nachdem
              ob der MenÅ-Eintrag nr markiert ist oder nicht.
              Ist nr kleiner Null oder grîûer gleich \#pRows\#,
              wird \#id_No\# zurÅckgegeben.

Querverweise  \#TPopup\#  \#TPopup.SetCheck\#

\end


screen("TPopup.GetState":sensitive)
TPopup.GetState (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetState(nr: integer): integer; virtual;

Beschreibung  Liefert \#bf_Enabled\# oder \#bf_Disabled\#, je nachdem
              ob der MenÅ-Eintrag nr anwÑhlbar ist oder nicht.
              Ist nr kleiner Null oder grîûer gleich \#pRows\#,
              wird \#id_No\# zurÅckgegeben.

Querverweise  \#TPopup\#  \#TPopup.SetState\#

\end


screen("TPopup.GetText":sensitive)
TPopup.GetText (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetText(nr: integer): string; virtual;

Beschreibung  Gibt den Text des MenÅ-Eintrags nr zurÅck. Ist nr
              kleiner Null oder grîûer gleich \#pRows\#, wird ein
              Leerstring zurÅckgegeben.

Querverweise  \#TPopup\#  \#TPopup.SetText\#

\end


screen("TPopup.SetCheck":sensitive)
TPopup.SetCheck (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCheck(nr,CheckFlag: integer); virtual;

Beschreibung  Wenn nr im Intervall [0,\#pRows\#) liegt, wird der
              entsprechende MenÅ-Eintrag markiert (CheckFlag=
              \#bf_Checked\#) oder die Markierung zurÅckgesetzt
              (CheckFlag=\#bf_Unchecked\#).

Querverweise  \#TPopup\#  \#TPopup.GetCheck\#  \#TPopup.Toggle\#
                      \#TPopup.Check\#     \#TPopup.Uncheck\#

\end


screen("TPopup.SetState":sensitive)
TPopup.SetState (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetState(nr,StateFlag: integer); virtual;

Beschreibung  Wenn nr im Intervall [0,\#pRows\#) liegt, wird der
              entsprechende MenÅ-Eintrag anwÑhlbar gemacht
              (StateFlag=\#bf_Enabled\#) oder nicht (StateFlag=
              \#bf_Disabled\#).

Querverweise  \#TPopup\#  \#TPopup.GetState\#

\end


screen("TPopup.SetText":sensitive)
TPopup.SetText (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(nr: integer; ATextString: string);
                                                         virtual;

Beschreibung  Wenn nr im Intervall [0,\#pRows\#) liegt, wird dem
              entsprechenden MenÅ-Eintrag der Text ATextString
              zugewiesen.

Querverweise  \#TPopup\#  \#TPopup.GetText\#

\end


screen("TPopup.Toggle":sensitive)
TPopup.Toggle (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Toggle(nr: integer); virtual;

Beschreibung  Wenn der Eintrag nr (0..\#pRows\#-1) nicht markiert
              ist, wird er markiert, ansonsten wird die Markie-
              rung zurÅckgesetzt.

Querverweise  \#TPopup\#  \#TPopup.SetCheck\#

\end


screen("TPopup.Uncheck":sensitive)
TPopup.Uncheck (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Uncheck(nr: integer); virtual;

Beschreibung  Ruft \link("TPopup.SetCheck")SetCheck\#(nr,\#bf_Unchecked\#) auf und nimmt damit
              die Markierung des Eintrags zurÅck.

Querverweise  \#TPopup\#  \#TPopup.Check\#

\end


screen("TPopup.SetPopTree":sensitive,"SetPopTree":sensitive)
TPopup.SetPopTree (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetPopTree(tree: PTree); virtual;

Beschreibung  Setzt den in tree Åbergebenen Objektbaum als Baum
              fÅr das Popup-MenÅ. Auûerdem werden einige interne
              Variablen ermittelt.
							Wird von \#TPopup.Init\# aufgerufen, wenn als Tree-
							Index ein Wert ungleich \#id_No\# Åbergeben wurde.
							Normalerweise ruft man diese Methode _nicht_
							selbst auf.

Querverweise  \#TPopup\#

\end


screen("TPopup.ExitPop":sensitive,"ExitPop":sensitive)
TPopup.ExitPop (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ExitPop(mX,mY: integer): integer; virtual;

Beschreibung  Wird von \#TPopup.Execute\# aufgerufen, solange sich der
              Mauscursor _auûerhalb_ des Popup-MenÅs befindet. In
              mX und mY erhÑlt man die aktuellen Mauskoordinaten.
              Gibt man einen Wert ungleich \#id_No\# zurÅck, wird das
              Popup-MenÅ mit dem von ExitPop gelieferten Wert ab-
              gebrochen.

Querverweise  \#TPopup\#  \#TPopup.KeyExit\#

\end


screen("TPopup.KeyExit":sensitive,"KeyExit":sensitive)
TPopup.KeyExit (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function KeyExit(Stat,Key: integer): integer;
                                                     virtual;

Beschreibung  Wird von \#TPopup.Execute\# aufgerufen, wenn eine
              Taste gedrÅckt wird, die nicht zur Steuerung des
              Popup-MenÅs benutzt wird. Hier kînnen solche
              Tasten nun ausgewertet werden.
              Gibt man einen Wert ungleich \#id_No\# zurÅck, wird das
              Popup-MenÅ mit dem von KeyExit gelieferten Wert ab-
              gebrochen.

Querverweise  \#TPopup\#  \#TPopup.ExitPop\#

\end


screen("TPopup.SetSelection":sensitive)
TPopup.SetSelection (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetSelection(nr: integer); virtual;

Beschreibung  Setzt den Mauscursor auf den Popup-MenÅ-Eintrag
              mit der Nummer nr (0..\#pMax\#-1).

Querverweise  \#TPopup\#  \#TPopup.GetSelection\#

\end


screen("TPopup.GetSelection":sensitive)
TPopup.GetSelection (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetSelection: integer; virtual;

Beschreibung  Wenn ein Eintrag des Popup-MenÅs markiert ist,
              erhÑlt man von dieser Routine dessen Nummer
              (0..\#pMax\#-1).
              Ansonsten wird \#id_No\# zurÅckgegeben.

Querverweise  \#TPopup\#  \#TPopup.SetSelection\#

\end


screen("TScroller":sensitive,"PScroller":sensitive)
TScroller                                            Unit \#OWindows\#
------------------------------------------------------------------

TScroller-Objekte werden Åber das \#TWindow.Scroller\#-Feld verwaltet.
Das Objekt bietet einem Fenster die automatische Bearbeitung der
Bildlaufleisten (Slider), d.h. man braucht sich nicht mehr um die
Abfrage und Aktualisierung der Slider (und standardmÑûig auch
nicht um das Neuzeichnen des Fensters) kÅmmern!
Normalerweise initialisieren und manipulieren Sie TScroller-
Objekte von den Methoden der Fenster-Objekte aus, zu denen Sie
gehîren.

	Pointer
		PScroller = ^TScroller;

	Felder
		\#HasHScrollBar\#
		\#HasVScrollBar\#
		\link("TScroller.Style")Style\#
		\#TrackMode\#
		\link("TScroller.Window")Window\#
		\#XLine\#
		\#XPage\#
		\link("TScroller.XPos")XPos\#
		\#XRange\#
		\#XUnit\#
		\#YLine\#
		\#YPage\#
		\link("TScroller.YPos")YPos\#
		\#YRange\#
		\#YUnit\#

	Methoden
		\link("TScroller.Init")Init\#
		\link("TScroller.Done")Done\#
		\#GetXOrg\#
		\#GetYOrg\#
		\#HScroll\#
		\#IsVisibleRect\#
		\#ScrollBy\#
		\#ScrollTo\#
		\#SetPageSize\#
		\link("TScroller.SetRange")SetRange\#
		\#SetSBarRange\#
		\#SetUnits\#
		\#VScroll\#

	Vorfahre
		\#TObject\#
	Nachfahren
		---

\end


screen("TScroller.HasHScrollBar":sensitive,"HasHScrollBar":sensitive)
TScroller.HasHScrollBar (Feld)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   HasHScrollBar: boolean;  (nur lesen)

Beschreibung  Wenn das zugehîrige Fenster Åber einen horizontalen
              Slider verfÅgt, ist HasHScrollBar true.

Querverweise  \#TScroller\#  \#TScroller.HasVScrollBar\#

\end


screen("TScroller.HasVScrollBar":sensitive,"HasVScrollBar":sensitive)
TScroller.HasVScrollBar (Feld)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   HasVScrollBar: boolean;  (nur lesen)

Beschreibung  Wenn das zugehîrige Fenster Åber einen vertikalen
              Slider verfÅgt, ist HasVScrollBar true.

Querverweise  \#TScroller\#  \#TScroller.HasHScrollBar\#

\end


screen("TScroller.Style":sensitive)
TScroller.Style (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Style: word;

Beschreibung  Gibt erweiterte FÑhigkeiten des TScroller-Objektes
              an. Wird von \#TScroller.Init\# auf Null gesetzt, z.Z.
              kann nur \#scs_BitbltScrolling\# verwendet werden.

Querverweise  \#TScroller\#

\end


screen("TScroller.TrackMode":sensitive,"TrackMode":sensitive)
TScroller.TrackMode (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   TrackMode: boolean;

Beschreibung  Ist TrackMode true, wird das Fenster bei VerÑnde-
              rungen der Sliderpositionen automatisch neu ge-
              zeichnet, indem TScroller-intern eine \#wind_update\#-
              Schachtelung durchgefÅhrt und \#WMRedraw\# direkt auf-
              gerufen wird. Ansonsten wird \#ForceRedraw\# verwendet.
              \#scs_BitbltScrolling\# funktioniert nur, wenn TrackMode
              true ist.
              StandardmÑûig wird TrackMode mit true initialisiert.

Querverweise  \#TScroller\#  \#TScroller.ScrollBy\#  \#TScroller.ScrollTo\#

\end


screen("TScroller.Window":sensitive)
TScroller.Window (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Window: PWindow;  (nur lesen)

Beschreibung  Window zeigt auf das Fenster, das TScroller be-
              sitzt. Wird von \#TScroller.Init\# gesetzt.

Querverweise  \#TScroller\#

\end


screen("TScroller.XLine":sensitive,"XLine":sensitive)
TScroller.XLine (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XLine: longint;

Beschreibung  XLine ist die Anzahl der \#XUnit\#-Einheiten, um die
              - als Reaktion auf ein Anklicken eines der beiden
              horizontalen Pfeile - der Slider verschoben werden
              soll. Der voreingestellte Wert ist 1.

Querverweise  \#TScroller\#  \#TScroller.YLine\#

\end


screen("TScroller.XPage":sensitive,"XPage":sensitive)
TScroller.XPage (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XPage: longint;

Beschreibung  XPage ist die Anzahl von \#XUnit\#-Einheiten, um die
              der horizontale Slider verschoben wird, wenn in
              den grauen Bereich geklickt wird.
							Wird von \#TScroller.Init\# auf die aktuelle Breite
							des Fensters in XUnit-Einheiten gesetzt und beim
							éndern der Fenstergrîûe mittels \#SetPageSize\# ent-
							sprechend angepaût.

Querverweise  \#TScroller\#  \#TScroller.YPage\#

\end


screen("TScroller.XPos":sensitive)
TScroller.XPos (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XPos: longint;  (nur lesen)

Beschreibung  XPos ist die aktuelle horizontale Position,
              angegeben in \#XUnit\#-Einheiten.

Querverweise  \#TScroller\#  \#TScroller.YPos\#

\end


screen("TScroller.XRange":sensitive,"XRange":sensitive)
TScroller.XRange (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XRange: longint;  (nur lesen)

Beschreibung  XRange ist die Gesamtzahl von \#XUnit\#-Einheiten, um
              die das Fenster horizontal gescrollt werden kann.
              Wird von \#TScroller.Init\# gesetzt.

Querverweise  \#TScroller\#  \#TScroller.SetRange\#  \#TScroller.YRange\#

\end


screen("TScroller.XUnit":sensitive,"XUnit":sensitive)
TScroller.XUnit (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XUnit: integer;  (nur lesen)

Beschreibung  XUnit ist die kleinste Anzahl von Pixeln, um die
              das Fenster horizontal gescrollt werden kann.
              Soll das Fenster Text anzeigen, kann XUnit mit
              \#SetUnits\# auf z.B. \#charWidth\# gesetzt werden.
              Wird von \#TScroller.Init\# gesetzt.

Querverweise  \#TScroller\#  \#TScroller.YUnit\#

\end


screen("TScroller.YLine":sensitive,"YLine":sensitive)
TScroller.YLine (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YLine: longint;

Beschreibung  YLine ist die Anzahl der \#YUnit\#-Einheiten, um die
              - als Reaktion auf ein Anklicken eines der beiden
              vertikalen Pfeile - der Slider verschoben werden
              soll. Der voreingestellte Wert ist 1.

Querverweise  \#TScroller\#  \#TScroller.XLine\#

\end


screen("TScroller.YPage":sensitive,"YPage":sensitive)
TScroller.YPage (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YPage: longint;

Beschreibung  YPage ist die Anzahl von \#YUnit\#-Einheiten, um die
              der vertikale Slider verschoben wird, wenn in den
              grauen Bereich geklickt wird.
							Wird von \#TScroller.Init\# auf die aktuelle Hîhe
							des Fensters in YUnit-Einheiten gesetzt und beim
							éndern der Fenstergrîûe mittels \#SetPageSize\# ent-
							sprechend angepaût.

Querverweise  \#TScroller\#  \#TScroller.XPage\#

\end


screen("TScroller.YPos":sensitive)
TScroller.YPos (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YPos: longint;  (nur lesen)

Beschreibung  YPos ist die aktuelle vertikale Position, ange-
              geben in \#YUnit\#-Einheiten.

Querverweise  \#TScroller\#  \#TScroller.XPos\#

\end


screen("TScroller.YRange":sensitive,"YRange":sensitive)
TScroller.YRange (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YRange: longint;  (nur lesen)

Beschreibung  YRange ist die Gesamtzahl von \#YUnit\#-Einheiten, um
              die das Fenster vertikal gescrollt werden kann.
              Wird von \#TScroller.Init\# gesetzt.

Querverweise  \#TScroller\#  \#TScroller.SetRange\#  \#TScroller.XRange\#

\end


screen("TScroller.YUnit":sensitive,"YUnit":sensitive)
TScroller.YUnit (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   YUnit: integer;  (nur lesen)

Beschreibung  YUnit ist die kleinste Anzahl von Pixeln, um die
              das Fenster vertikal gescrollt werden kann.
              Soll das Fenster Text anzeigen, kann YUnit mit
              \#SetUnits\# auf z.B. \#charHeight\# gesetzt werden.
              Wird von \#TScroller.Init\# gesetzt.

Querverweise  \#TScroller\#  \#TScroller.XUnit\#

\end


screen("TScroller.Init":sensitive)
TScroller.Init (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(TheWindow: PWindow; TheXUnit,
                 TheYUnit: integer; TheXRange,TheYRange: longint);

Beschreibung  Initialisiert ein neues TScroller-Objekt mit
              \#Window\# (=TheWindow) als dem besitzenden Fenster,
              wozu auch \#TObject.Init\# aufgerufen wird. Danach
              wird das \#Scroller\#-Feld des zugehîrigen Fensters
              auf @\#self\#, \#TrackMode\# auf true, \#XLine\# und \#YLine\#
              auf 1, \link("TScroller.XPos")XPos\# und \link("TScroller.YPos")YPos\# auf 0, \#XUnit\# auf TheXUnit
              und \#YUnit\# auf TheYUnit gesetzt. \#HasHScrollBar\#
              und \#HasVScrollBar\# werden ermittelt. Schlieûlich
              werden noch \#SetPageSize\# und \#SetRange\#(TheXRange,
              TheYRange) aufgerufen, womit alle Felder initi-
              alisiert wÑren.

Querverweise  \#TScroller\#

\end


screen("TScroller.Done":sensitive)
TScroller.Done (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Das \#Scroller\#-Feld des zugehîrigen Fensters wird
              auf nil gesetzt, dann wird \#TObject.Done\# aufgerufen.

Querverweise  \#TScroller\#

\end


screen("TScroller.GetXOrg":sensitive,"GetXOrg":sensitive)
TScroller.GetXOrg (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetXOrg: longint; virtual;

Beschreibung  Gibt den (virtuellen) X-Ursprung relativ zur linken
              Kante des Fenster-Arbeitsbereichs zurÅck. Wenn der
              Slider nicht ganz links ist, ist die RÅckgabe also
              negativ.
              Wenn die Ausgaben an diesen neuen Ursprung angepaût
              werden, kÅmmert sich TScroller automatisch darum,
              daû immer der richtige Ausschnitt im Fenster ge-
              zeigt wird!

Querverweise  \#TScroller\#  \#TScroller.GetYOrg\#  \#TWindow.Work\#

\end


screen("TScroller.GetYOrg":sensitive,"GetYOrg":sensitive)
TScroller.GetYOrg (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetYOrg: longint; virtual;

Beschreibung  Gibt den (virtuellen) Y-Ursprung relativ zur oberen
              Kante des Fenster-Arbeitsbereichs zurÅck. Wenn der
              Slider nicht ganz oben ist, ist die RÅckgabe also
              negativ.
              Wenn die Ausgaben an diesen neuen Ursprung angepaût
              werden, kÅmmert sich TScroller automatisch darum,
              daû immer der richtige Ausschnitt im Fenster ge-
              zeigt wird!

Querverweise  \#TScroller\#  \#TScroller.GetXOrg\#  \#TWindow.Work\#

\end


screen("TScroller.HScroll":sensitive,"HScroll":sensitive)
TScroller.HScroll (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HScroll; virtual;

Beschreibung  Berechnet die neue Sliderposition, wenn \link("TScroller.XPos")XPos\# geÑn-
              dert wurde. Wird intern von \#ScrollTo\# und \#ScrollBy\#
              verwendet und braucht nicht direkt aufgerufen
              werden.

Querverweise  \#TScroller\#  \#TScroller.VScroll\#

\end


screen("TScroller.IsVisibleRect":sensitive,"IsVisibleRect":sensitive)
TScroller.IsVisibleRect (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsVisibleRect(X,Y,XExt,
                                YExt: longint): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn ein Teil des in \#XUnit\#- bzw.
              \#YUnit\#-Einheiten Åbergebenen Rechtecks gegenwÑrtig
              im Arbeitsbereich des besitzenden Fensters sicht-
              bar ist.

Querverweise  \#TScroller\#  \#TWindow.Work\#

\end


screen("TScroller.ScrollBy":sensitive,"ScrollBy":sensitive)
TScroller.ScrollBy (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ScrollBy(dX,dY: longint); virtual;

Beschreibung  Scrollt um den durch dX und dY angegebenen Betrag
              und aktualisiert die Slider. Ist \#TrackMode\# true,
              wird der Fensterinhalt sofort neu gezeichnet,
              ansonsten wird nur \#ForceRedraw\# des zugehîrigen
              Fensters aufgerufen.

Querverweise  \#TScroller\#  \#TScroller.ScrollTo\#  \#TScroller.XPos\#
                                             \#TScroller.YPos\#

\end


screen("TScroller.ScrollTo":sensitive,"ScrollTo":sensitive)
TScroller.ScrollTo (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ScrollTo(X,Y: longint); virtual;

Beschreibung  Scrollt zur Position (X,Y) und aktualisiert die
              Slider. Ist \#TrackMode\# true, wird der Fensterinhalt
              sofort neu gezeichnet, ansonsten wird nur die
              Methode \#ForceRedraw\# des zugehîrigen Fensters
              aufgerufen.

Querverweise  \#TScroller\#  \#TScroller.ScrollBy\#  \#TScroller.XPos\#
                                             \#TScroller.YPos\#

\end


screen("TScroller.SetPageSize":sensitive,"SetPageSize":sensitive)
TScroller.SetPageSize (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetPageSize; virtual;

Beschreibung  Setzt die Felder \#XPage\# und \#YPage\# entsprechend der
              aktuellen Breite und Hîhe des Fensters, die in
              \#XUnit\#- bzw. \#YUnit\#-Einheiten umgerechnet werden.

Querverweise  \#TScroller\#

\end


screen("TScroller.SetRange":sensitive)
TScroller.SetRange (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetRange(TheXRange,TheYRange: longint);
                                                         virtual;

Beschreibung  Setzt \#XRange\# und \#YRange\# neu, wobei darauf geachtet
              wird, daû die Mindestgrîûe von 1 nicht unterschrit-
              ten wird. Dann wird \#SetSBarRange\# aufgerufen.

Querverweise  \#TScroller\#

\end


screen("TScroller.SetSBarRange":sensitive,"SetSBarRange":sensitive)
TScroller.SetSBarRange (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetSBarRange; virtual;

Beschreibung  öberprÅft die TScroller-Werte auf ihre GÅltigkeit
              und paût die Slider (Position und Grîûe) dann an
              diese Werte an. Wenn nîtig, wird auch der Fenster-
              inhalt neu gezeichnet.

Querverweise  \#TScroller\#  \#TScroller.HScroll\#  \#TScroller.VScroll\#

\end


screen("TScroller.SetUnits":sensitive,"SetUnits":sensitive)
TScroller.SetUnits (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetUnits(TheXUnit,TheYUnit: integer);
                                                        virtual;

Beschreibung  Setzt \#XUnit\# und \#YUnit\# auf die Åbergebenen Werte,
              wobei auf die Mindestgrîûe von 1 geachtet wird.
              Dann wird der Fensterinhalt neu gezeichnet.

Querverweise  \#TScroller\#

\end


screen("TScroller.VScroll":sensitive,"VScroll":sensitive)
TScroller.VScroll (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure VScroll; virtual;

Beschreibung  Berechnet die neue Sliderposition, wenn \link("TScroller.YPos")YPos\# geÑn-
              dert wurde. Wird intern von \#ScrollTo\# und \#ScrollBy\#
              verwendet und braucht nicht direkt aufgerufen
              werden.

Querverweise  \#TScroller\#  \#TScroller.HScroll\#

\end


screen("TWindow":sensitive,"PWindow":sensitive)
TWindow                                              Unit \#OWindows\#
------------------------------------------------------------------

TWindow definiert das grundlegende Fensterobjekt, das sich um
die komplette GEM-Fensterverwaltung kÅmmert. StandardmÑûig wird
ein leeres Fenster erzeugt, das aber bereits auf Maus- und Ta-
staturereignisse reagiert. Durch öberschreiben der entsprechen-
den Methoden kînnen Fenster fÅr bestimmte Aufgaben spezialisiert
werden.

	Pointer
		PWindow = ^TWindow;

	Felder
		\link("TWindow.Attr")Attr\#
		\#ChildList\#
		\#Class\#
		\link("TWindow.Clipboard")Clipboard\#
		\#Curr\#
		\#DlgTree\#
		\#Full\#
		\link("TWindow.Icon")Icon\#
		\#IconClass\#
		\link("TWindow.Parent")Parent\#
		\#Scroller\#
		\link("TWindow.vdiHandle")vdiHandle\#
		\link("TWindow.Work")Work\#
		\link("TWindow.workIn")workIn\#
		\link("TWindow.workOut")workOut\#

	Methoden
		\link("TWindow.Init")Init\#
		\link("TWindow.Done")Done\#
		\link("TWindow.At")At\#
    \#Calc\#
    \link("TWindow.CanClose")CanClose\#
    \#ChkAlign\#
    \#ChkSize\#
    \link("TWindow.CloseWindow")CloseWindow\#
    \link("TWindow.Copy")Copy\#
    \link("TWindow.Create")Create\#
    \#CreateChildren\#
    \link("TWindow.Cut")Cut\#
    \link("TWindow.DDFinished")DDFinished\#
    \link("TWindow.DDGetPath")DDGetPath\#
    \link("TWindow.DDGetPreferredTypes")DDGetPreferredTypes\#
    \link("TWindow.DDHeaderReply")DDHeaderReply\#
    \link("TWindow.DDReadArgs")DDReadArgs\#
    \link("TWindow.DDReadData")DDReadData\#
    \link("TWindow.Delete")Delete\#
    \link("TWindow.Destroy")Destroy\#
    \#DisableAutoCreate\#
    \#EnableAutoCreate\#
    \#ExitPaint\#
    \link("TWindow.FirstIcon")FirstIcon\#
		\link("TWindow.FirstWndThat")FirstWndThat\#
		\#FirstWorkRect\#
    \#ForceRedraw\#
		\link("TWindow.ForEachWnd")ForEachWnd\#
    \link("TWindow.FreeDialog")FreeDialog\#
    \link("TWindow.FreeIcon")FreeIcon\#
    \link("TWindow.FreeMenu")FreeMenu\#
    \#FreeToolbar\#
    \#FullSize\#
    \link("TWindow.GetClassName")GetClassName\#
    \link("TWindow.GetClipboard")GetClipboard\#
		\#GetCurr\#
		\#GetDC\#
		\#GetFull\#
		\link("TWindow.GetIconTitle")GetIconTitle\#
		\#GetIconWindowClass\#
		\link("TWindow.GetScroller")GetScroller\#
    \link("TWindow.GetStyle")GetStyle\#
    \#GetTitle\#
    \link("TWindow.GetVDIHandle")GetVDIHandle\#
    \link("TWindow.GetWindowClass")GetWindowClass\#
    \#GetWork\#
		\link("TWindow.GetWorkMax")GetWorkMax\#
		\#GetWorkMin\#
		\link("TWindow.HandleMenu")HandleMenu\#
		\link("TWindow.IconPaint")IconPaint\#
		\link("TWindow.IconSelect")IconSelect\#
		\link("TWindow.IndexOf")IndexOf\#
		\#InitPaint\#
    \link("TWindow.IsDialog")IsDialog\#
    \link("TWindow.IsIconified")IsIconified\#
    \#IsModeless\#
    \#IsTop\#
    \link("TWindow.LoadDialog")LoadDialog\#
    \link("TWindow.LoadIcon")LoadIcon\#
    \link("TWindow.LoadMenu")LoadMenu\#
    \#LoadToolbar\#
    \link("TWindow.MakeWindow")MakeWindow\#
    \link("TWindow.MNSelected")MNSelected\#
    \#Move\#
    \link("TWindow.Next")Next\#
    \link("TWindow.NextIcon")NextIcon\#
    \#NextWorkRect\#
    \link("TWindow.OpenWindow")OpenWindow\#
    \link("TWindow.Paint")Paint\#
    \link("TWindow.Paste")Paste\#
    \link("TWindow.Previous")Previous\#
    \link("TWindow.Print")Print\#
    \#RawDestroy\#
		\#ReleaseDC\#
		\link("TWindow.SelectAll")SelectAll\#
    \#SetCurr\#
    \link("TWindow.SetCursor")SetCursor\#
		\#SetDlgTree\#
		\#SetGadgets\#
    \#SetSubTitle\#
    \#SetTitle\#
    \link("TWindow.SetupSize")SetupSize\#
    \link("TWindow.SetupWindow")SetupWindow\#
    \#SetWork\#
    \#ShutdownWindow\#
    \link("TWindow.Size")Size\#
    \#Top\#
    \link("TWindow.UpdateDialog")UpdateDialog\#
    \#WMArrowed\#
    \#WMBottomed\#
		\link("TWindow.WMButton")WMButton\#
		\#WMClick\#
    \link("TWindow.WMClosed")WMClosed\#
		\#WMDblClick\#
		\#WMDragDrop\#
    \#WMFulled\#
    \#WMHSlid\#
    \#WMIconify\#
    \#WMKeyDown\#
    \#WMMoved\#
    \#WMNewTop\#
    \#WMOnTop\#
		\#WMRBoxChanged\#
		\#WMRBoxCheck\#
		\#WMRButton\#
    \#WMRedraw\#
		\#WMRubbox\#
		\#WMShaded\#
    \#WMSized\#
    \#WMToolbar\#
    \#WMTopped\#
    \#WMUniconify\#
    \#WMUnshaded\#
    \#WMUntopped\#
    \#WMVSlid\#

	Vorfahre
		\#TEventObject\#
	Nachfahren
		\#TDialog\#  \#TTextWindow\#

\end


screen("TWindow.Attr":sensitive,"TWindowAttr":sensitive,"PWindowAttr":sensitive,
       "Title":sensitive,"SubTitle":sensitive,"RBox":sensitive,"Handle":sensitive,
       "gemHandle":sensitive,"ExStyle":sensitive,
       "Attr.Title":sensitive,"Attr.SubTitle":sensitive,"Attr.RBox":sensitive,
       "Attr.Handle":sensitive,"Attr.gemHandle":sensitive,"Attr.Status":sensitive,
       "Attr.ExStyle":sensitive,
       "TWindow.Attr.Title":sensitive,"TWindow.Attr.SubTitle":sensitive,"TWindow.Attr.RBox":sensitive,
       "TWindow.Attr.Handle":sensitive,"TWindow.Attr.gemHandle":sensitive,"TWindow.Attr.Status":sensitive,
       "TWindow.Attr.ExStyle":sensitive,"TWindow.Attr.Style":sensitive,
       "TWindowAttr.Title":sensitive,"TWindowAttr.SubTitle":sensitive,"TWindowAttr.RBox":sensitive,
       "TWindowAttr.Handle":sensitive,"TWindowAttr.gemHandle":sensitive,"TWindowAttr.Status":sensitive,
       "TWindowAttr.ExStyle":sensitive,"TWindowAttr.Style":sensitive)
TWindow.Attr (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Attr: TWindowAttr;

Beschreibung  Diverse Attribute und fensterspezifische Werte
              sind in diesem Record zusammengefaût. Wird von
              \#TWindow.Init\# initialisiert.

								PWindowAttr = ^TWindowAttr;
								TWindowAttr = record
																Title,                (nur lesen)
																SubTitle  : \#PString\#;  (nur lesen)
																RBox      : \#GRECT\#;
																Handle    : \#HWnd\#;     (nur lesen)
																gemHandle,            (nur lesen)
																Status,               (nur lesen)
																Style,                (nur lesen)
                                sysFonts,             (nur lesen)
                                addFonts,             (nur lesen)
                                charWidth,
                                charHeight,
                                boxWidth,
                                boxHeight : integer;
																ExStyle   : longint
															end;

							Title enthÑlt einen Zeiger auf den Titel-String des
							Fensters (wird mit dem an \#TWindow.Init\# Åbergebenen
							Titel besetzt), SubTitle einen Zeiger auf die Info-
							zeile (wird mit einem Leerstring initialisiert).
							RBox wird zunÑchst ausgenullt, hiermit kann der
							Bereich fÅr eine evtl. unterstÅtzte Rubbox be-
							schrÑnkt werden (s. \#TWindow.WMRubbox\#).
							Handle enthÑlt die ObjectGEM-interne Kennung fÅr
							_alle_ Fenster und Dialoge (d.h. auch modale Dialoge
							erhalten eine solche). Im Gegensatz dazu bekommt
							gemHandle von \#TWindow.Create\# die GEM-Kennung fÅr
							ein Fenster bzw. einen nicht-modalen Dialog zuge-
							wiesen (initialisiert mit -1).
							Status zeigt den Zustand des Fensters an, s. dazu
							die \#ws_XXXX-Konstanten\#; Anfangswert ist \#ws_NoWindow\#.
							In Style wird der GEM-Fensterstil gespeichert, der
							mit \#TWindow.GetStyle\# ermittelt wird.
							ExStyle schlieûlich beschreibt speziellere Eigen-
							schaften des Fensters. Bei TWindow wird mit
							\#ws_ex_Modeless\# initialisiert, bei \#TDialog\# mit
							\#ws_ex_TryModeless\#+\#ws_ex_CenterOnce\#. Wenn global
							\#as_MoveTransparent\# oder \#as_MoveDials\# gesetzt ist,
							dann wird zusÑtzlich noch \#ws_ex_MoveTransparent\#
							bzw. \#ws_ex_MoveDial\# gesetzt.

Querverweise  \#TWindow\#  \#TWindow.SetTitle\#  \#TWindow.SetSubTitle\#

\end


screen("TWindow.Parent":sensitive)
TWindow.Parent (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Parent: PWindow;  (nur lesen)

Beschreibung  Zeigt auf das Åbergeordnete Fenster, wenn dieses
              existiert. Das Fensterobjekt ist dann in der
              \#ChildList\# des Åbergeordneten Fensters eingetragen.
              Andernfalls ist Parent \#nil\#, und \#TApplication\# ist
              gewissermaûen das Elternobjekt, da das Fenster
              dann in der \#MainWindow\#-Liste zu finden ist.
              Wird von \#TWindow.Init\# gesetzt.

Querverweise  \#TWindow\#

\end


screen("TWindow.vdiHandle":sensitive)
TWindow.vdiHandle (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   vdiHandle: integer;  (nur lesen)

Beschreibung  Wird von \#TWindow.Init\# mit \#GetVDIHandle\# ermittelt.
              FÅr TWindow-Objekte enthÑlt das Feld normalerweise
              das Handle einer _eigenen_ VDI-Workstation!
              \#TDialog\#-Objekte verwenden stattdessen eine Kopie
              des \#TApplication.vdiHandle\#-Feldes.

Querverweise  \#TWindow\#  \#TWindow.SetupVDI\#

\end


screen("TWindow.Work":sensitive)
TWindow.Work (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Work: \#GRECT\#;  (nur lesen)

Beschreibung  EnthÑlt den aktuellen Arbeitsbereich des Fensters.
              Kann mit \#TWindow.GetWork\# neu berechnet werden; das
              sollte allerdings _nicht_ notwendig sein, wenn zur
              Grîûenmanipulation des Fensters nut ObjectGEM-
              Methoden verwendet werden.
              Wichtig: Der Arbeitsbereich sollte _nie_ mittels
              \#wind_get\#() erfragt werden, da man sonst zu evtl.
              Erweiterungen (Toolbars, MenÅleisten etc.)
              inkompatibel wÅrde!

Querverweise  \#TWindow\#  \#TWindow.SetWork\#

\end


screen("TWindow.ChildList":sensitive,"ChildList":sensitive)
TWindow.ChildList (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ChildList: PWindow;  (nur lesen)

Beschreibung  ChildList ist eine verkettete Liste aller unterge-
              ordneten Fensterobjekte. ChildList ist \#nil\#, wenn
              keine Child-Fenster existieren, sonst zeigt der
              Pointer auf das _erste_ Objekt in der Liste.
              Untergeordnete Fenster kînnen relativ bequem mit
              \link("TWindow.FirstWndThat")FirstWndThat\# und \link("TWindow.ForEachWnd")ForEachWnd\# durchlaufen werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.IconClass":sensitive,"IconClass":sensitive,"TIconWndClass":sensitive,"PIconWndClass":sensitive,
       "IconClass.hCursor":sensitive,"IconClass.hbrBackground":sensitive,
       "TWindow.IconClass.hCursor":sensitive,"TWindow.IconClass.hbrBackground":sensitive,
       "TIconWndClass.hCursor":sensitive,"TIconWndClass.hbrBackground":sensitive)
TWindow.IconClass (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   IconClass: TIconWndClass;

Beschreibung  Mit diesem Record wird die Fensterklasse des Icon-
              Fensters festgelegt. Da ein solches Fenster sehr
              viel weniger Funktionen als ein "richtiges" Fenster
              hat, sind hier auch weniger Informationen als in
              \#TWindow.Class\# gespeichert.

                PIconWndClass         = ^TIconWndClass;
                TIconWndClass         = record
                  hCursor      : \link("thcursor")HCursor\#;
                  hbrBackground: \#HBrush\#
                end;

							Mit hCursor wird die Mausform festgelegt, die
							verwendet wird, sobald die Maus den \link("TWindow.Work")Work\#-Bereich
							des Icon-Fensters betritt. StandardmÑûig wird \#ARROW\#
							eingetragen. Ist der Wert grîûer als $7fff, wird
							er als Pointer auf eine selbstdefinierte \#MFORM\#-
							Struktur aufgefaût. Soll der Mauscursor nicht
							verÑndert werden, muû \#id_No\# eingetragen werden.
							hbrBackground gibt die Farbe an, mit der der
							Arbeitsbereich des Icon-Fensters vor dem Aufruf der
							\link("TWindow.Paint")Paint\#-Methode gelîscht wird. Dabei muû der VDI-
							Farbindex+1 eingetragen werden, da eine Null
							signalisiert, daû der Hintergrund _nicht_ ge-
							lîscht werden soll. Wird auf \#White\#+1 gesetzt.
              Der Record wird von \#TWindow.Init\# mit der Methode
              \#GetIconWindowClass\# eingelesen.
              WICHTIG: Alle anderen Werte werden auch bei Icon-
              Fenster aus dem Feld TWindow.Class genommen - ab-
              gesehen von den cs_Align-Konstanten, die von Icon-
              Fenstern generell nicht beachtet werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.Class":sensitive,"Class":sensitive,"TWndClass":sensitive,"PWndClass":sensitive,
       "lpszClassName":sensitive,"ToolbarTree":sensitive,"TWindow.Class.ToolbarTree":sensitive,
       "Class.hCursor":sensitive,"Class.hbrBackground":sensitive,"Class.MenuTree":sensitive,
       "Class.lpszClassName":sensitive,"Class.Style":sensitive,"Class.ToolbarTree":sensitive,
       "TWndClass.hCursor":sensitive,"TWndClass.hbrBackground":sensitive,"TWndClass.MenuTree":sensitive,
       "TWndClass.lpszClassName":sensitive,"TWndClass.Style":sensitive,"TWndClass.ToolbarTree":sensitive,
       "TWindow.Class.hCursor":sensitive,"TWindow.Class.hbrBackground":sensitive,"TWindow.Class.MenuTree":sensitive,
       "TWindow.Class.lpszClassName":sensitive,"TWindow.Class.Style":sensitive)
TWindow.Class (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Class: TWndClass;

Beschreibung  Mit diesem Record werden sog. "Fensterklassen"
              festgelegt, d.h. die Struktur enthÑlt allgemeinere
              Attribute als \#TWindow.Attr\#, von denen erwartet
              werden kann, daû sie fÅr mehrere Fenster gelten.
              Wird von \#TWindow.Init\# mittels \#GetWindowClass\#
              initialisiert.

								PWndClass = ^TWndClass;
								TWndClass = record
															Style        : word;
															hCursor      : \link("thcursor")HCursor\#;
															hbrBackground: \#HBrush\#;
															MenuTree,               (nur lesen)
															ToolbarTree  : \#PTree\#;   (nur lesen)
															lpszClassName: \#PString\#  (nur lesen)
														end;

							Style enthÑlt eine der \#cs_XXXX-Konstanten\# (bzw.
							eine Kombination davon) und wird mit \#cs_DblClks\#+
							\#cs_CreateOnAccOpen\#+\#cs_AutoOpen\#+\#cs_QuitOnClose\# (bei
							TWindow) bzw. mit \#cs_DblClks\#+\#cs_WorkBackground\#+
							\#cs_SaveBits\# (bei \#TDialog\#) initialisiert.
							Mit hCursor wird die Mausform festgelegt, die
							verwendet wird, sobald die Maus den \link("TWindow.Work")Work\#-Bereich
							des Fensters betritt. StandardmÑûig wird \#ARROW\#
							eingetragen. Ist der Wert grîûer als $7fff, wird
							er als Pointer auf eine selbstdefinierte \#MFORM\#-
							Struktur aufgefaût. Soll der Mauscursor nicht
							verÑndert werden, muû \#id_No\# eingetragen werden.
							hbrBackground gibt die Farbe an, mit der der
							Arbeitsbereich des Fensters vor dem Aufruf der
							\link("TWindow.Paint")Paint\#-Methode gelîscht wird. Dabei muû der VDI-
							Farbindex+1 eingetragen werden, da eine Null
							signalisiert, daû der Hintergrund _nicht_ ge-
							lîscht werden soll. Wird auf \#White\#+1 gesetzt.
							In MenuTree befindet sich der Zeiger auf den MenÅ-
							baum des Fensters, wenn ein solches mit \link("TWindow.LoadMenu")LoadMenu\#
							installiert wurde. Ansonsten steht \#nil\# darin.
							ToolbarTree wird mit \#nil\# initialisiert. Wenn dem
							Fenster mit \#LoadToolbar\# eine Toolbar zugewiesen
							wurde, steht in diesem Feld dann der Zeiger auf
							den Objektbaum.
							lpszClassName gibt den Namen der Fensterklasse
							an, der mit \#GetClassName\# ermittelt wird. Dieser
							Name braucht bei "einfachen" Fenstern nicht ge-
							Ñndert zu werden, wenn allerdings ein erheblicher
							Unterschied besteht (z.B. "Window" und "Dialog",
							"EditWindow", "HelpWindow", "FontDialog" etc.),
							sollte die Methode Åberschrieben werden.

Querverweise  \#TWindow\#  \#TWindow.IconClass\#

\end


screen("TWindow.Clipboard":sensitive)
TWindow.Clipboard (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Clipboard: \#PClipboard\#;  (nur lesen)

Beschreibung  Zeigt auf das mit dem Fenster-Objekt verknÅpfte
              TClipboard-Objekt (oder ist \#nil\#, wenn ein solches
              nicht existiert).
              Wird mit \#TWindow.GetClipboard\# gesetzt.

Querverweise  \#TWindow\#

\end


screen("TWindow.Curr":sensitive,"Curr":sensitive)
TWindow.Curr (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Curr: \#GRECT\#;  (nur lesen)

Beschreibung  EnthÑlt den aktuellen Auûenmaûe des Fensters.
              Kann mit \#TWindow.GetCurr\# neu berechnet werden; das
              sollte allerdings _nicht_ notwendig sein, wenn zur
              Grîûenmanipulation des Fensters nut ObjectGEM-
              Methoden verwendet werden.

Querverweise  \#TWindow\#  \#TWindow.SetCurr\#

\end


screen("TWindow.DlgTree":sensitive,"DlgTree":sensitive)
TWindow.DlgTree (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   DlgTree: \#PTree\#;  (nur lesen)

Beschreibung  Zeigt auf das im Fenster anzuzeigende Dialog-
              formular. Wird von \#TWindow.Init\# mit nil belegt.
              Wenn DlgTree geÑndert werden soll, muû die Methode
              \#LoadDialog\# aufgerufen werden, die intern ihrerseits
              \#SetDlgTree\# aufruft.
              Wenn in DlgTree ein Dialog angegeben ist, wird
              dieser von \#TWindow.Paint\# automatisch gezeichnet.

Querverweise  \#TWindow\#

\end


screen("TWindow.Full":sensitive,"Full":sensitive)
TWindow.Full (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Full: \#GRECT\#;  (nur lesen)

Beschreibung  EnthÑlt die Maximalgrîûe dieses Fensters.
              Wird von \#TWindow.SetupSize\# zunÑchst auf die Grîûe
              des Desktop-Arbeitsbereichs initialisiert. Wenn
              das Fenster spÑter evtl. auf volle Grîûe gebracht
              wird, wird intern \#GetFull\# aufgerufen, wodurch
              dann Full unter Beachtung von \#GetWorkMax\# neu
              gesetzt wird.

Querverweise  \#TWindow\#  \#TWindow.FullSize\#  \#GetDesk\#

\end


screen("TWindow.Scroller":sensitive,"Scroller":sensitive)
TWindow.Scroller (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Scroller: PScroller;

Beschreibung  Scroller enthÑlt einen Zeiger auf ein \#TScroller\#-
              Objekt, wenn ein solches vorhanden ist. Soll einem
              Fenster ein Scroll-Objekt zugewiesen werden, sollte
              dies im \link("TWindow.Init")Init\#-Konstruktor geschehen.

Querverweise  \#TWindow\#

\end


screen("TWindow.Icon":sensitive)
TWindow.Icon (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Icon: PIcon;  (nur lesen)

Beschreibung  EnthÑlt einen Zeiger auf ein \#TIcon\#-Objekt, wenn
              dem Fenster ein solches mit \#TWindow.LoadIcon\# zu-
              gewiesen wurde.
              Wird von \#TWindow.Init\# auf \#nil\# gesetzt.

Querverweise  \#TWindow\#

\end


screen("TWindow.workIn":sensitive)
TWindow.workIn (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   workIn: \#workin_ARRAY\#;

Beschreibung  Dieses Array wird von \#TWindow.Init\# zum ôffnen
              der VDI-Workstation benîtigt. Danach kann es fÅr
              eigene Zwecke verwendet werden.

Querverweise  \#TWindow\#  \#TWindow.workOut\#

\end


screen("TWindow.workOut":sensitive)
TWindow.workOut (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   workOut: \#workout_ARRAY\#;

Beschreibung  Dieses Array wird von \#TWindow.Init\# fÅr die RÅck-
              gabewerte von \#v_opnvwk\# benîtigt. Danach kann es
              fÅr eigene Zwecke verwendet werden, da alle wich-
              tigen Werte anderweitig gespeichert werden.

Querverweise  \#TWindow\#  \#TWindow.workIn\#

\end


screen("TWindow.Init":sensitive)
TWindow.Init (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PWindow; ATitle: string);

Beschreibung  Ruft \#TEventObject.Init\# auf, setzt \link("TWindow.Parent")Parent\# auf AParent
							und initialisiert \link("TWindow.vdiHandle")vdiHandle\# mit \#GetVDIHandle\# sowie
							\link("TWindow.Attr")Attr\#.
							Wenn GetVDIHandle signalisiert, daû eine neue VDI-
							Workstation geîffnet werden soll, geschieht dies
							dann mit \#v_opnvwk\#.
							\#ChildList\#, \#Scroller\# und \#DlgTree\# werden auf \#nil\# ge-
							setzt und das Fensterobjekt in die ChildList des
							Åbergeordneten Fensters eingehÑngt.
							Dann werden \#Class\# mittels \#GetWindowClass\# und
							\#IconClass\# mit \#GetIconWindowClass\# initialisiert,
							ATitle wird zum Fenstertitel, und die Infozeile
							wird gelîscht.
							Wenn eine neue VDI-Workstation angelegt wurde, wird
							dann \link("TWindow.SetupVDI")SetupVDI\# aufgerufen.
							Danach wird das Feld Scroller mit \link("TWindow.GetScroller")GetScroller\# und
							\link("TWindow.Clipboard")Clipboard\# mit \link("TWindow.GetClipboard")GetClipboard\# ermittelt.
							Zum Schluû wird \#SetupWindow\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.Done":sensitive)
TWindow.Done (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt alle untergeordneten Fenster frei, ruft die
              Methoden \#ShutdownWindow\#, \link("TWindow.FreeIcon")FreeIcon\#, \#FreeDialog\#,
              \#FreeToolbar\# und \link("TWindow.FreeMenu")FreeMenu\# auf, schlieût das Fenster,
              gibt die Kennung frei (sofern dies noch nicht ge-
              schehen ist) und entfernt das Fensterobjekt aus der
              \#ChildList\# des Åbergeordneten Fensters.
              Danach werden \#Scroller\# und \link("TWindow.Clipboard")Clipboard\# freigegeben
              (letzteres nur, wenn ein neues Klemmbrett-Objekt
              installiert wurde).
              Wenn \#TWindow.Init\# eine neue VDI-Workstation ange-
              fordert hat, wird diese hier mit \#v_clsvwk\# wieder
              freigegeben.
              Zum Schluû wird \#TEventObject.Done\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetVDIHandle":sensitive)
TWindow.GetVDIHandle (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetVDIHandle: integer; virtual;

Beschreibung  Wird von \#TWindow.Init\# aufgerufen, um \link("TWindow.vdiHandle")vdiHandle\# zu
              ermitteln.
              StandardmÑûig wird \#id_NewHandle\# geliefert, d.h.
              fÅr jedes Fenster wird eine eigene VDI-Work-
              station geîffnet.
              Wird ein Wert grîûer gleich Null Åbergeben, wird
              dieser als _gÅltiges_ VDI-Handle interpretiert,
              es wird dann keine neue Workstation angefordert!

Querverweise  \#TWindow\#  \#TDialog.GetVDIHandle\#

\end


screen("TWindow.SetupVDI":sensitive)
TWindow.SetupVDI (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupVDI; virtual;

Beschreibung  Wird von \#TWindow.Init\# aufgerufen, wenn mit der
              Methode \#GetVDIHandle\# dem Fenster eine eigene VDI-
              Workstation zugewiesen wurde, damit hier die
              passenden Attribute eingestellt werden.
              ZunÑchst werden jedoch - wenn \#GDOSActive\# true
              und \#ws_ex_LoadFonts\# gesetzt ist - alle verfÅgbaren
              GEM-Fonts nachgeladen. Daraus folgt, daû - wenn
              das Fenster auf GEM-ZeichensÑtze zurÅckgreifen
              will - SetupVDI Åberschrieben werden muû und die
              geerbte Methode erst dann aufgerufen werden darf,
              wenn man ws_ex_LoadFonts gesetzt hat!
              Danach werden folgende Werte gesetzt (Schreib-
              weise abgekÅrzt): \#vswr_mode\#(MD_REPLACE), \#vsl_udsty\#
              ($5555), \#vsl_type\#(LT_SOLID), \#vsf_perimeter\#(PER_ON),
              \#vsl_color\#(Black), \#vsl_ends\#(LE_SQUARED,LE_SQUARED),
              \#vsm_type\#(MT_DOT), \#vsm_height\#(1), \#vsm_color\#(Black),
              \#vst_rotation\#(0), \#vsf_style\#(4), \#vsf_color\#(Black),
              \#vst_alignment\#(TA_LEFT,TA_BASELINE), \#vsl_width\#(1),
              \#vst_color\#(Black), \#vsf_interior\#(FIS_HOLLOW),
              \#vst_effects\#(TF_NORMAL).
              Auûerdem werden das Clipping auf die Grîûe des ge-
              samten Desktops, \#vst_font\# auf den ersten verfÅgba-
              ren Font (das ist normalerweise der Systemzeichen-
              satz) und dieser Font auf die "normale" Hîhe (d.h.
              die des "groûen" Fonts auf dem Desktop) gesetzt.

Querverweise  \#TWindow\#

\end


screen("TWindow.At":sensitive)
TWindow.At (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function At(Index: integer): PWindow;

Beschreibung  Liefert einen Zeiger auf das Child-Fenster mit
              der fortlaufenden Nummer Index in der \#ChildList\#
              (begonnen wird bei Null).
              Wenn Index negativ oder ChildList leer ist, wird
              \#nil\# zurÅckgegeben. Bei zu groûen Werten wird die
              Liste zyklisch durchlaufen.

Querverweise  \#TWindow\#  \#TWindow.IndexOf\#

\end


screen("TWindow.IndexOf":sensitive)
TWindow.IndexOf (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IndexOf(Item: PWindow): integer;

Beschreibung  Liefert die fortlaufende Nummer des Fensterobjekts,
              auf das Item zeigt, wenn dieses in der \#ChildList\#
              vorkommt. Ansonsten wird -1 zurÅckgegeben.

Querverweise  \#TWindow\#  \#TWindow.At\#

\end


screen("TWindow.Calc":sensitive,"Calc":sensitive)
TWindow.Calc (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Calc(ctype: integer; ri: GRECT;
                                        var ro: \#GRECT\#); virtual;

Beschreibung  Berechnet aus den Auûenabmessungen des Fensters
              die Grîûe des Arbeitsbereichs und umgekehrt. Die
              Parameter entsprechen denen von \#wind_calc\#(), aller-
              dings sollte _immer_ nur Calc verwendet werden, um
              zu spÑteren Erweiterungen (Toolbars, MenÅleisten)
              kompatibel zu bleiben!

Querverweise  \#TWindow\#

\end


screen("TWindow.CanClose":sensitive)
TWindow.CanClose (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function CanClose: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Fenster geschlossen
              werden darf. Das ist standardmÑûig dann der Fall,
              wenn alle offenen untergeordneten Fenster bei
              dieser Methode ebenfalls true liefern.
              Durch öberschreiben kann man mit dieser Methode
              leicht Sicherheitsabfragen etc. in eigene Pro-
              gramme einbauen.

Querverweise  \#TWindow\#

\end


screen("TWindow.ChkAlign":sensitive,"ChkAlign":sensitive)
TWindow.ChkAlign (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ChkAlign(var r: \#GRECT\#); virtual;

Beschreibung  Korrigiert die Position des Fensters, wenn eine der
              Konstanten \#cs_ByteAlignClient\#, \#cs_ByteAlignWindow\#,
              \#cs_VerAlignClient\# oder \#cs_VerAlignWindow\# gesetzt
              ist. Auûerdem wird evtl. versucht, das Fenster
              durch Verschieben komplett im sichtbaren Bereich
              darzustellen.
              Wird intern verwendet und braucht nicht direkt
              aufgerufen zu werden.
              WICHTIG: Bei Icon-Fenstern wird grundsÑtzlich
              _kein_ Align durchgefÅhrt!

Querverweise  \#TWindow\#

\end


screen("TWindow.ChkSize":sensitive,"ChkSize":sensitive)
TWindow.ChkSize (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ChkSize(var r: \#GRECT\#); virtual;

Beschreibung  Achtet darauf, daû der Work-Bereich nicht zu groû
              bzw. zu klein wird. Zur Ermittlung der zulÑssigen
              Werte werden \#GetWorkMin\# und \#GetWorkMax\# verwendet.
              Wird intern verwendet und braucht nicht direkt
              aufgerufen zu werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.CloseWindow":sensitive)
TWindow.CloseWindow (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure CloseWindow; virtual;

Beschreibung  Schlieût alle untergeordneten Fenster. Danach wird
              auch dieses Fenster - sofern es offen ist - ge-
              schlossen und \#Attr.Status\# auf \#ws_Created\# gesetzt,
              d.h. die GEM-Kennung wird nicht freigegeben (dies
              macht \link("TWindow.Destroy")Destroy\#).

Querverweise  \#TWindow\#

\end


screen("TWindow.Create":sensitive)
TWindow.Create (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Create; virtual;

Beschreibung  Wenn \#Attr.Status\# gleich \#ws_NoWindow\# ist, wird das
              Fenster erzeugt (d.h. eine GEM-Kennung erfragt),
              ansonsten werden nur evtl. vorhandene untergeord-
              nete Fenster erzeugt.
              ZunÑchst wird versucht, mittels \#wind_create\#() eine
              GEM-Kennung zu belegen. Miûlingt dies, gibt \#ChkError\#
              \#em_InvalidWindow\# zurÅck. Ansonsten wird Attr.Status
              auf \#ws_Created\# gesetzt, und abhÑngig vom Wert in
              \link("TWindow.Attr.Style")Attr.Style\# werden Fenstertitel und Infozeile festge-
              legt. Danach werden die untergeordneten Fenster
              erzeugt.
              Bei modalen Dialogen hat Create keine Wirkung.

Querverweise  \#TWindow\#

\end


screen("TWindow.CreateChildren":sensitive,"CreateChildren":sensitive)
TWindow.CreateChildren (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure CreateChildren; virtual;

Beschreibung  Ruft fÅr alle Fenster der \#ChildList\#, bei denen das
              Flag \#cs_AutoCreate\# gesetzt ist, \#Create\# auf.

Querverweise  \#TWindow.EnableAutoCreate\#  \#TWindow.DisableAutoCreate\#
              \#TWindow\#

\end


screen("TWindow.DDGetPath":sensitive)
TWindow.DDGetPath (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDGetPath: string; virtual;

Beschreibung  Wird von \#TWindow.WMDragDrop\# aufgerufen, wenn der
              Sender den Datentyp 'PATH' gewÑhlt hat, d.h. wenn
              er den evtl. zum Fenster gehîrigen Pfad (z.B. bei
              Editor-Fenstern) wissen mîchte.
              Im Moment wird hier ein Leerstring zurÅckgegeben,
              d.h. die Anfrage wird _abgewiesen_. Durch öber-
              schreiben dieser Methode kann aber ein beliebiger
              Pfad zurÅckgegeben werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.DDGetPreferredTypes":sensitive)
TWindow.DDGetPreferredTypes (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDGetPreferredTypes: string; virtual;

Beschreibung  Liefert die Extensions der "bevorzugten" Dateien
              zurÅck. Es dÅrfen maximal 8 Extensions geliefert
              werden, bei weniger Zeichen wird mit Nullbytes auf-
              gefÅllt.
              StandardmÑûig wird \#TApplication.DDGetPreferredTypes\#
              zurÅckgegeben. Eine speziellere RÅckgabe kînnte z.B.
              '.IMG.PCX.GIF.TIF' lauten.

Querverweise  \#TWindow\#

\end


screen("TWindow.DDHeaderReply":sensitive)
TWindow.DDHeaderReply (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDHeaderReply(dType,dName,fName: string;
                                  dSize: longint; OrgID,
                                  mX,mY,KStat: integer): byte;
                                                         virtual;

Beschreibung  Wird von \#TWindow.WMDragDrop\# aufgerufen, um dem
              Sender auf den vorgeschlagenen Dateityp zu ant-
              worten.
              In dType erhÑlt man die Extension des vorgeschla-
              genen Dateityps (z.B. '.TXT'), in fName den ent-
              sprechenden Dateinamen (_ohne_ Pfadangabe). In
              dName kann noch optional ein Name fÅr die Daten
              Åbergeben werden, der vom EmpfÑnger z.B. zum
              Beschriften eines Icons benutzt werden kann.
              dSize gibt die LÑnge der zu Åbertragenden Datei
              an. OrgID bezeichnet die AES-Kennung des Senders,
              mX und mY die Position der Maus und KStat den
              Zustand der Umschalttasten beim Aufruf.
              StandardmÑûig wird DD_NAK zurÅckgegeben, folgende
              Werte sind z.Z. definiert:

                \#DD_OK\#         alles OK; die Daten werden dann mit
                              \#TWindow.DDReadData\# eingelesen
                \#DD_NAK\#        Fehler, Abbruch der Kommunikation
                \#DD_EXT\#        der Sender soll einen anderen
                              Dateityp vorschlagen
                \#DD_LEN\#        der EmpfÑnger kann nicht so viele
                              Daten gleichzeitig verarbeiten
                \#DD_TRASH\#      Datei wurde auf den MÅlleimer ge-
                              zogen; der Sender muû entsprechend
                              reagieren
                \#DD_PRINTER\#    Datei wurde auf das Drucker-Icon
                              gezogen; der Sender muû entsprechend
                              reagieren
                \#DD_CLIPBOARD\#  Datei wurde auf das Klemmbrett-Icon
                              gezogen; der Sender muû entsprechend
                              reagieren

Querverweise  \#TWindow\#

\end


screen("TWindow.DDReadData":sensitive)
TWindow.DDReadData (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDReadData(dType,dName,fName: string;
                                   dSize: longint; PipeHnd,
                                   OrgID,mX,mY,
                                   KStat: integer): boolean;
                                                       virtual;

Beschreibung  Wird von \#TWindow.WMDragDrop\# aufgerufen, wenn eine
              Drag&Drop-Anfrage positiv beantwortet werden konnte
              und nun die Daten eingelesen werden sollen.
              In dType erhÑlt man die Extension des vorgeschla-
              genen Dateityps (z.B. '.TXT'), in fName den ent-
              sprechenden Dateinamen (_ohne_ Pfadangabe). In
              dName kann noch optional ein Name fÅr die Daten
              Åbergeben werden, der vom EmpfÑnger z.B. zum
              Beschriften eines Icons benutzt werden kann.
              dSize gibt die LÑnge der zu Åbertragenden Datei
              an. OrgID bezeichnet die AES-Kennung des Senders,
              mX und mY die Position der Maus und KStat den
              Zustand der Umschalttasten beim Aufruf.
              PipeHnd enthÑlt das Dateihandle der _geîffneten_
              Pipe, auf die nun mit \#Fread\# zugegriffen werden
              kann.
              Wenn die Daten eingelesen werden konnten, sollte
              true zurÅckgegeben werden, damit die Methode
              \link("TWindow.DDFinished")DDFinished\# aufgerufen wird.

Querverweise  \#TWindow\#

\end


screen("TWindow.DDReadArgs":sensitive)
TWindow.DDReadArgs (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDReadArgs(dSize: longint; PipeHnd,OrgID,
                                  mX,mY,KStat: integer): boolean;
                                                         virtual;

Beschreibung  Wird von \#TWindow.WMDragDrop\# aufgerufen, wenn der
              Sender den 'ARGS'-Datentyp, also eine Kommandozeile
              verschickt hat. In dieser Methode kann diese nun
              (per \#Fread\#) eingelesen werden. Abschlieûend muû
              noch die geerbte Methode mit dem um die Anzahl
              gelesener Zeichen verminderten dSize aufgerufen
              werden, damit die Pipe vollstÑndig geleert wird.
              Wenn in der Kommandozeile mehrere Parameter Åber-
              geben werden, sind die einzelnen Parameter durch
              ein Leerzeichen getrennt. Wenn in einem Parameter
              ein Leerzeichen vorkommt, wird dieser Parameter
              in einfache AnfÅhrungszeichen gesetzt. AnfÅhrungs-
              zeichen innerhalb des Parameters werden dann ver-
              doppelt (z.B. "'Eric''s file'").
              Wenn die Daten eingelesen werden konnten, sollte
              true zurÅckgegeben werden, damit die Methode
              \link("TWindow.DDFinished")DDFinished\# aufgerufen wird.

Querverweise  \#TWindow\#

\end


screen("TWindow.DDFinished":sensitive)
TWindow.DDFinished (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DDFinished(OrgID,mX,mY,KStat: integer);
                                                         virtual;

Beschreibung  Wird von \#TApplication.APDragDrop\# aufgerufen, wenn
              \link("TWindow.DDReadData")DDReadData\# oder \link("TWindow.DDReadArgs")DDReadArgs\# true zurÅckgegeben hat.
              Der Aufruf erfolgt nach dem Drag&Drop-Protokoll,
              man hat also wieder volle Kontrolle Åber den Bild-
              schirm.
              In dieser Methode sollten die Eingelesenen Daten
              ausgewertet werden (Anzeige etc.).

Querverweise  \#TWindow\#

\end


screen("TWindow.EnableAutoCreate":sensitive,"EnableAutoCreate":sensitive)
TWindow.EnableAutoCreate (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure EnableAutoCreate;

Beschreibung  Setzt fÅr das Fenster das Flag \#cs_AutoCreate\#.
              Wird von \#TWindow.Init\# aufgerufen.

Querverweise  \#TWindow.CreateChildren\#  \#TWindow.DisableAutoCreate\#
              \#TWindow\#

\end


screen("TWindow.DisableAutoCreate":sensitive,"DisableAutoCreate":sensitive)
TWindow.DisableAutoCreate (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DisableAutoCreate;

Beschreibung  Lîscht das Flag \#cs_AutoCreate\# aus \#Class.Style\#.
              Wird von \#TDialog.Init\# aufgerufen.

Querverweise  \#TWindow.CreateChildren\#  \#TWindow.EnableAutoCreate\#
              \#TWindow\#

\end


screen("TWindow.Destroy":sensitive)
TWindow.Destroy (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Destroy; virtual;

Beschreibung  Ruft zunÑchst die Destroy-Methode aller unterge-
              ordneten Fenster auf. Danach wird das Fenster ge-
              schlossen (sofern dies noch nicht geschehen ist)
              und die GEM-Kennung freigegeben. Schlieûlich wird
              \#Attr.Status\# auf \#ws_NoWindow\# und \#gemHandle\# auf -1
              gesetzt.
              Wenn beim Freigeben ein Fehler auftritt, gibt
              \#ChkError\# \#em_WDestroyFailure\# zurÅck.

Querverweise  \#TWindow\#

\end


screen("TWindow.FirstWndThat":sensitive)
TWindow.FirstWndThat (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstWndThat
                           (Test: \#PIterationFunc\#): PWindow;

Beschreibung  FirstWndThat ruft fÅr jedes untergeordnete Fenster
              die durch Test bestimmte boolesche Funktion auf, bis
              Test true zurÅckgibt. FirstWndThat gibt dann den
              Zeiger auf das Fensterobjekt zurÅck, fÅr den Test
              true zurÅckgegeben hat, oder nil, falls Test immer
              false geliefert hat. Der Pointer Test sollte eine
              GLOBALE (Unterschied zu ObjectWindows!) Funktion
              sein, der ein pointer-Parameter Åbergeben wird und
              die boolean zurÅckgibt.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Test-Funktion nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TWindow\#  \#TWindow.ForEachWnd\#  \#TWindow.ChildList\#


Beispiel      function IstOffen(p: pointer): boolean;
                { ... }

              IstOffen sollte eine globale Funktion sein.
              Sei Fenster ein TWindow-Objekt:

              p:=Fenster.FirstWndThat(@IstOffen);

\end


screen("TWindow.ForEachWnd":sensitive)
TWindow.ForEachWnd (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ForEachWnd(Action: \#PIterationProc\#);

Beschreibung  ForEachWnd ruft fÅr jedes untergeordnete Fenster
              die durch Action bestimmte Prozedur auf. Der
              Pointer Action sollte eine GLOBALE (Unterschied zu
              ObjectWindows!) Prozedur sein, der ein pointer-
              Parameter Åbergeben wird.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Prozedur nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TWindow\#  \#TWindow.FirstWndThat\#  \#TWindow.ChildList\#


Beispiel      procedure MacheGross(p: pointer);
                { ... }

              MacheGross sollte eine globale Prozedur sein.
              Sei Fenster ein TWindow-Objekt:

              Fenster.ForEachWnd(@MacheGross);

\end


screen("TWindow.ForceRedraw":sensitive,"ForceRedraw":sensitive)
TWindow.ForceRedraw (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ForceRedraw; virtual;

Beschreibung  Zeichnet das komplette Fenster neu. Dazu schickt
              das Fensterobjekt eine \#WM_REDRAW\#-Message an sich
              selbst. Soll das Zeichnen _nicht_ Åber die GEM-
              Message-Queue abgewickelt werden (d.h. wenn sofort
              gezeichnet werden _muû_, der Zeitpunkt also nicht
              vom GEM bestimmt werden soll), muû \#TWindow.WMRedraw\#
              direkt aufgerufen werden.

Querverweise  \#TWindow\#  \#TApplication.InvalidateRect\#

\end


screen("TWindow.FirstWorkRect":sensitive,"FirstWorkRect":sensitive)
TWindow.FirstWorkRect (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstWorkRect(var Rect: \#GRECT\#): boolean;
                                                         virtual;

Beschreibung  Diese Funktion liefert das erste Rechteck der Recht-
              eckliste. Im Gegensatz zu \#wind_get\#(\#WF_FIRSTXYWH\#...)
              werden dabei auch evtl. vorhandene Toolbars, MenÅ-
              leisten etc. berÅcksichtigt. Auûerdem erhÑlt man
              nur wirklich sichtbare Teile des Arbeitsbereichs
              (das Rechteck muû also _nicht_ mehr mit dem Desk-
              topbereich geschnitten werden).
              Wenn der Arbeitsbereich des Fensters komplett ver-
              deckt ist, ist die RÅckgabe false, und Rect.W wird
              auf Null gesetzt.

Querverweise  \#TWindow\#  \#TWindow.NextWorkRect\#

\end


screen("TWindow.NextWorkRect":sensitive,"NextWorkRect":sensitive)
TWindow.NextWorkRect (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function NextWorkRect(var Rect: \#GRECT\#): boolean;
                                                        virtual;

Beschreibung  Diese Funktion liefert das jeweils nÑchste Rechteck
              der Rechteckliste des Fensters. Im Gegensatz zu
              \#wind_get\#(\#WF_NEXTXYWH\#...) werden dabei auch evtl.
              vorhandene Toolbars, MenÅleisten etc. berÅcksich-
              tigt. Auûerdem erhÑlt man nur wirklich sichtbare
              Teile des Arbeitsbereichs (das Rechteck muû also
              _nicht_ mehr mit dem Desktopbereich geschnitten
              werden).
              Wenn kein weiteres Rechteck existiert, ist die
              RÅckgabe false, und Rect.W wird auf Null gesetzt.

Querverweise  \#TWindow\#  \#TWindow.FirstWorkRect\#

\end


screen("TWindow.FreeDialog":sensitive)
TWindow.FreeDialog (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeDialog; virtual;

Beschreibung  Entfernt einen evtl. zuvor mit \#LoadDialog\# dem
              Fenster zugewiesenen Dialogbaum, d.h. dieser wird
              nun nicht mehr gezeichnet.
              Wird von \#TWindow.Done\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.FullSize":sensitive,"FullSize":sensitive)
TWindow.FullSize (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FullSize; virtual;

Beschreibung  Bringt das Fenster auf volle Grîûe, oder - wenn es
              diese bereits hat - auf die ursprÅngliche Grîûe.
              Wenn \#cs_FullRedraw\# gesetzt ist, wird anschlieûend
              noch \#TWindow.ForceRedraw\# aufgerufen.

Querverweise  \#TWindow\#  \#TWindow.WMFulled\#  \#TWindow.Full\#

\end


screen("TWindow.GetClassName":sensitive)
TWindow.GetClassName (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClassName: string; virtual;

Beschreibung  Gibt den Namen der Fensterklasse zurÅck. Abgeleitete
              Fensterobjekte, die wesentliche VerÑnderungen bzw.
              Erweiterungen gegenÅber TWindow besitzen, sollten
              diese Methode Åberschreiben, um einen anderen Namen
              zu liefern. TWindow gibt 'Window' zurÅck.

Querverweise  \#TWindow\#  \#TDialog.GetClassName\#

\end


screen("TWindow.GetClipboard":sensitive)
TWindow.GetClipboard (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClipboard: \#PClipboard\#; virtual;

Beschreibung  Liefert das TClipboard-Objekt, das mit dem Fenster-
              Objekt verknÅpft wird.
              StandardmÑûig wird \#Application\#^.\link("TApplication.Clipboard")Clipboard\# zurÅckge-
              geben. Will man ein spezialisiertes Klemmbrett-
              Objekt installieren, muû man diese Methode Åber-
              schreiben. WICHTIG: Ein solches Objekt wird
              dann von \#TWindow.Done\# _freigegeben_!

Querverweise  \#TWindow\#  \#TWindow.Clipboard\#

\end


screen("TWindow.GetCurr":sensitive,"GetCurr":sensitive)
TWindow.GetCurr (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetCurr; virtual;

Beschreibung  FÅllt das Feld \#Curr\# mit den aktuellen Auûenmaûen
              des Fensters aus. Wird intern verwendet und braucht
              nicht direkt aufgerufen zu werden, wenn zur Grîûen-
              Ñnderung des Fensters nur die ObjectGEM-Methoden
              verwendet werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetDC":sensitive,"GetDC":sensitive)
TWindow.GetDC (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetDC: integer; virtual;

Beschreibung  Dies ist eine an Windows angelehnte "Quick-and-
              dirty"-Funktion, mit der _sehr_ einfach in dem
              Fenster gezeichnet werden kann.
              Die Funktion reserviert das erste Rechteck der
              Rechteckliste des Fensters fÅr die Ausgabe, was
              unter gÅnstigen UmstÑnden (die man auch schaffen
              kann, z.B. mit \#Top\#) der gesamte Arbeitsbereich
              ist. Im schlimmsten Fall sieht man allerdings gar
              nichts... Es findet eine Schachtelung mit
              \#wind_update\#() statt, die Maus wird unsichtbar ge-
              macht und das Clipping gesetzt. Die RÅckgabe ent-
              spricht \link("TWindow.vdiHandle")vdiHandle\#.
              Nun kann direkt (mit den VDI-Funktionen) gezeichnet
              werden, und am Schluû muû \#TWindow.ReleaseDC\# aufge-
              rufen werden, um alle Blockierungen aufzuheben.
              WICHTIG: Wird -1 zurÅckgegeben, ist die Funktion
              _fehlgeschlagen_; es darf weder gezeichnet noch
              ReleaseDC aufgerufen werden!!!

Querverweise  \#TWindow\#

\end


screen("TWindow.GetFull":sensitive,"GetFull":sensitive)
TWindow.GetFull (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetFull; virtual;

Beschreibung  FÅllt das Feld \#Full\# mit der maximal mîglichen Grîûe
              des Fensters aus, wobei \#GetWorkMax\# beachtet wird.
              Wird intern verwendet und braucht nicht direkt auf-
              gerufen zu werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetScroller":sensitive)
TWindow.GetScroller (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetScroller: \#PScroller\#; virtual;

Beschreibung  Wird von \#TWindow.Init\# aufgerufen, um das \#Scroller\#-
              Feld zu setzen. Wenn einem Fenster ein TScroller-
              Objekt zugewiesen werden soll, muû diese Methode
              Åberschrieben werden, damit das Objekt korrekt
              initialisiert werden kann.
              StandardmÑûig wird \#nil\# zurÅckgegeben.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetStyle":sensitive,"HSLIDER":sensitive,"VSLIDER":sensitive,"SLIDER":sensitive)
TWindow.GetStyle (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetStyle: integer; virtual;

Beschreibung  Gibt eine Bitmap der GEM-Fensterkomponenten zurÅck,
              die fÅr \#TWindow.Create\# benîtigt wird.
              TWindow.GetStyle liefert \#NAME\# or \#INFO\# or \#CLOSER\# or
              \#MOVER\# or \#FULLER\# or \#SIZER\#. Sollen andere Fenster-
              elemente benutzt werden, muû man diese Methode
              Åberschreiben.
              Ab AES 4.10 wird zusÑtzlich \#SMALLER\# fÅr die
              \#Iconification\# geliefert und, wenn der Backdrop-
              Mechanismus unterstÅtzt wird, \#BACKDROP\# (z.Z. nur
              unter Mag!C).
              Soll dem Fenster ein \#TScroller\#-Objekt zugeordnet
              werden, stehen als RÅckgabewerte auch die Konstanten
              HSLIDER, VSLIDER und SLIDER zur VerfÅgung, die wie
              folgt definiert sind:

              	type HSLIDER = \#LFARROW\# or \#RTARROW\# or \#HSLIDE\#;
              	     VSLIDER = \#UPARROW\# or \#DNARROW\# or \#VSLIDE\#;
              	     SLIDER  = HSLIDER or VSLIDER;

Querverweise  \#TWindow\#  \#TDialog.GetStyle\#

\end


screen("TWindow.GetIconWindowClass":sensitive,"GetIconWindowClass":sensitive)
TWindow.GetIconWindowClass (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetIconWindowClass
                          (var AWndClass: \#TIconWndClass\#); virtual;

Beschreibung  FÅllt das Feld \#IconClass\# aus, das die Icon-Fenster-
              klasse beschreibt. Soll das Icon-Fenster andere
              Eigenschaften besitzen, muû diese Methode Åber-
              schrieben werden. In diesem Fall sollte in der
              neuen Methode zuerst die ursprÅngliche Methode
              aufgerufen werdem.

Querverweise  \#TWindow\#  \#TWindow.GetWindowClass\#


Beispiel      procedure TW.GetIconWindowClass(var AWndClass: TIconWndClass);

                begin
                  inherited GetIconWindowClass(AWndClass);
                  { ... }
                end;

\end


screen("TWindow.GetWindowClass":sensitive)
TWindow.GetWindowClass (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWindowClass(var AWndClass: \#TWndClass\#);
                                                          virtual;

Beschreibung  FÅllt das Feld \#Class\# aus, das die Fensterklasse
              beschreibt. Soll das Fenster andere grundlegende
              Eigenschaften besitzen, muû diese Methode Åber-
              schrieben werden.
              WICHTIG: In diesem Fall muû in der neuen Methode
              zuerst die ursprÅngliche Methode aufgerufen werden,
              da es sonst mit einiger Sicherheit einen Programm-
              absturz gibt...

Querverweise  \#TWindow\#  \#TDialog.GetWindowClass\#
                       \#TWindow.GetIconWindowClass\#


Beispiel      procedure TW.GetWindowClass(var AWndClass: TWndClass);

                begin
                  inherited GetWindowClass(AWndClass);
                  { ... }
                end;

\end


screen("TWindow.GetWork":sensitive,"GetWork":sensitive)
TWindow.GetWork (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWork; virtual;

Beschreibung  FÅllt das Feld \link("TWindow.Work")Work\# mit den aktuellen Auûenmaûen
              des Fensters aus. Wird intern verwendet und braucht
              nicht direkt aufgerufen zu werden, wenn zur Grîûen-
              Ñnderung des Fensters nur die ObjectGEM-Methoden
              verwendet werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetWorkMax":sensitive)
TWindow.GetWorkMax (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWorkMax(var maxX,maxY: integer);
                                                      virtual;

Beschreibung  Gibt an, wie groû das Fenster maximal werden darf.
              Beide Werte werden mit \#maxint\# besetzt, d.h. die
              Grîûe wird nur durch den Arbeitsbereich des Desk-
              tops beschrÑnkt.
              Wird von \#TDialog.GetWorkMax\# sinnvoll eingesetzt.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetWorkMin":sensitive,"GetWorkMin":sensitive)
TWindow.GetWorkMin (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWorkMin(var minX,minY: integer);
                                                      virtual;

Beschreibung  Gibt an, wie klein der Arbeitsbereich des Fensters
              minimal werden darf. Wird z.Z. mit 21 (minX) und
              1 (minY) besetzt (experimentell ermittelt), da
              sich bei Ñlteren GEM-Versionen sonst die Fenster-
              elemente Åberschneiden kînnen.

Querverweise  \#TWindow\#

\end


screen("TWindow.GetTitle":sensitive,"GetTitle":sensitive)
TWindow.GetTitle (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetTitle: string;

Beschreibung  GetTitle liefert die Zeichenkette aus \#Attr.Title\#,
              wobei allerdings Leerzeichen und ASCII #0 abge-
              schnitten werden.

Querverweise  \#TWindow\#  \#TWindow.GetIconTitle\#

\end


screen("TWindow.GetIconTitle":sensitive)
TWindow.GetIconTitle (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetIconTitle: string; virtual;

Beschreibung  Wird von \#TWindow.WMIconify\# aufgerufen, wenn das
              Fenster ikonifiziert werden soll.
              Die RÅckgabe dient als Fenstertitel des Icon-
              Fensters; standardmÑûig wird \#TWindow.GetTitle\#
              geliefert.
              Von der RÅckgabe werden z.Z. allerdings nur die
              ersten 10 (bzw. mit ICFS nur 8) Zeichen beachtet!

Querverweise  \#TWindow\#  \#TWindow.IsIconified\#

\end


screen("TWindow.IconPaint":sensitive)
TWindow.IconPaint (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure IconPaint(var PaintInfo: TPaintStruct);
                                                         virtual;

Beschreibung  Wird von \#TWindow.WMRedraw\# aufgerufen, wenn das
              Icon-Fenster neu gezeichnet werden soll.
              StandardmÑûig wird der Arbeitsbereich einfach
              nur weiû gefÅllt. Die Verfahrensweise ist analog
              zu \#TWindow.Paint\#.

Querverweise  \#TWindow\#  \#Iconification\#

\end


screen("TWindow.InitPaint":sensitive,"InitPaint":sensitive)
TWindow.InitPaint (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitPaint; virtual;

Beschreibung  Wird von \#TWindow.WMRedraw\# aufgerufen, bevor mit
              der \link("TWindow.Paint")Paint\#-Methode gezeichnet wird. Hier kînnen
              also fÅr das Redraw nîtige Initialisierungen vor-
              genommen werden.

Querverweise  \#TWindow\#  \#TWindow.ExitPaint\#

\end


screen("TWindow.ExitPaint":sensitive,"ExitPaint":sensitive)
TWindow.ExitPaint (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ExitPaint; virtual;

Beschreibung  Wird von \#TWindow.WMRedraw\# aufgerufen, nachdem alle
              Rechtecke der Rechteckliste mit \link("TWindow.Paint")Paint\# gezeichnet
              wurden. Hier kînnen evtl. in \#TWindow.InitPaint\#
              vorgenommene Initialisierungen rÅckgÑngig gemacht
              werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.IsIconified":sensitive)
TWindow.IsIconified (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsIconified: boolean;

Beschreibung  Gibt true zurÅck, wenn das Fenster ikonifiziert
              ist, d.h. wenn das Fenster zum "Icon" verkleinert
              wurde (erst ab AES 4.10 bzw. mit einem ICFS-
              Server mîglich).

Querverweise  \#TWindow.IconPaint\#  \#TWindow.GetIconTitle\#
              \#TWindow\#

\end


screen("TWindow.WMIconify":sensitive,"WMIconify":sensitive)
TWindow.WMIconify (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMIconify(iX,iY,iW,iH: integer); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn das
              Fenster ikonifiziert werden soll.
              In iX,iY,iW,iH steht die Grîûe des Icon-Fensters,
              mit \#TWindow.GetIconTitle\# wird der neue Fenster-
              titel ermittelt.

Querverweise  \#TWindow\#  \#TWindow.WMUniconify\#

\end


screen("TWindow.WMUniconify":sensitive,"WMUniconify":sensitive)
TWindow.WMUniconify (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMUniconify(oX,oY,oW,oH: integer);
                                                      virtual;

Beschreibung  Bringt ein ikonifiziertes Fenster auf seine ur-
              sprÅngliche Grîûe, die in oX,oY,oW,oH Åbergeben
              wird. Auûerdem wird wieder der alte Fenstertitel
              gesetzt.
              Wird von \#TApplication.MUMesag\# aufgerufen.

Querverweise  \#TWindow\#  \#TWindow.WMIconify\#

\end


screen("TWindow.IsDialog":sensitive)
TWindow.IsDialog (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsDialog: boolean; virtual;

Beschreibung  Gibt false zurÅck, d.h. das Fenster ist kein Dialog-
              fenster. \#TDialog\# Åberschreibt diese Methode.
              Wird intern benîtigt, da TWindow- und TDialog-
              Objekte in den gleichen Listen (\#MainWindow\# bzw.
              \#ChildList\#) verwaltet werden.

Querverweise  \#TWindow\#  \#TWindow.IsModeless\#

\end


screen("TWindow.IsModeless":sensitive,"IsModeless":sensitive)
TWindow.IsModeless (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsModeless: boolean;

Beschreibung  Gibt true zurÅck, wenn das Fenster eine GEM-Kennung
              besitzt, wenn es also bereits mit \link("TWindow.Create")Create\# erzeugt
              wurde.
              Zur Unterscheidung von modalen und nicht-modalen
              Dialogen sollte allerdings \#TDialog.IsModal\# ver-
              wendet werden.

Querverweise  \#TWindow\#  \#TWindow.IsDialog\#

\end


screen("TWindow.IsTop":sensitive,"IsTop":sensitive)
TWindow.IsTop (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsTop: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Fenster das oberste ist
              und wenn ansonsten auch keine modaler Dialog aktiv
              ist.

Querverweise  \#TWindow\#  \#TWindow.Top\#

\end


screen("TWindow.LoadDialog":sensitive)
TWindow.LoadDialog (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadDialog(Indx: integer); virtual;

Beschreibung  Setzt \#DlgTree\# mittels \#SetDlgTree\# auf den zum Index
              Indx gehîrigen Objektbaum, wenn dieser existiert
              und dem Fenster bisher noch kein Dialog zugewiesen
              wurde.
              Andernfalls gibt \#ChkError\# \#em_InvalidDialog\# zurÅck.

Querverweise  \#TWindow\#  \#TWindow.FreeDialog\#

\end


screen("TWindow.LoadIcon":sensitive)
TWindow.LoadIcon (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadIcon(Icn: PIcon); virtual;

Beschreibung  Setzt \link("TWindow.Icon")Icon\# auf Icn. Das Fenster zeichnet dann ab
              sofort das Åbergebene Icon im ikonifizierten
              Fenster.

Querverweise  \#TWindow\#  \#TWindow.FreeIcon\#

\end


screen("TWindow.FreeIcon":sensitive)
TWindow.FreeIcon (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeIcon; virtual;

Beschreibung  Gibt das Feld \link("TWindow.Icon")Icon\# frei, d.h. das Fenster zeichnet
              in ikonifiziertem Zustand kein Icon mehr.

Querverweise  \#TWindow\#  \#TWindow.LoadIcon\#

\end


screen("TWindow.LoadToolbar":sensitive,"LoadToolbar":sensitive)
TWindow.LoadToolbar (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadToolbar(Indx: integer;
                                     Opposite: boolean); virtual;

Beschreibung  Setzt \#Class.ToolbarTree\# auf den zum Index Indx ge-
              hîrigen Objektbaum. Je nachdem, ob die Breite oder
              Hîhe des Toolbar-ROOT-Objekts grîûer ist, wird die
              Toolbar horizontal oder vertikal gezeichnet.
              Normalerweise befindet sich die Toolbar am linken
              oder oberen Rand des Fensters. Wird allerdings in
              Opposite true Åbergeben, wird die Toolbar rechts
              bzw. unten gezeichnet. Dann werden auûerdem die
              Flags \#cs_ToolbarOpposite\# und \#cs_FullRedraw\# ge-
              setzt.
              Anschlieûend wird noch der Arbeitsbereich neu
              gezeichnet.
              Wenn Indx keinen gÅltigen Objektbaum bezeichnet
              oder das Fenster schon eine Toolbar besitzt, gibt
              \#ChkError\# \#em_InvalidToolbar\# zurÅck.

Querverweise  \#TWindow\#  \#TWindow.FreeToolbar\#  \#cs_WindowMenuToolbar\#

\end


screen("TWindow.FreeToolbar":sensitive,"FreeToolbar":sensitive)
TWindow.FreeToolbar (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeToolbar; virtual;

Beschreibung  Entfernt eine mit \#TWindow.LoadToolbar\# dem Fenster
              zugewiesene Toolbar. Der Arbeitsbereich wird an-
              schlieûend neu gezeichnet, und \#cs_ToolbarOpposite\#
              wird gelîscht.
              Wird von \#TWindow.Done\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.MakeWindow":sensitive)
TWindow.MakeWindow (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MakeWindow; virtual;

Beschreibung  Ruft erst \link("TWindow.Create")Create\# und dann \link("TWindow.OpenWindow")OpenWindow\# auf, d.h. das
              Fenster wird erzeugt und geîffnet. Diese Methode
              kann immer dann aufgerufen werden, wenn das Fenster
              geîffnet und an oberste Position gebracht werden
              soll, da automatisch darauf geachtet wird, ob es
              bereits erzeugt wurde.

Querverweise  \#TWindow\#  \#TDialog.MakeWindow\#

\end


screen("TWindow.Move":sensitive,"Move":sensitive)
TWindow.Move (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Move(r: \#GRECT\#); virtual;

Beschreibung  Bewegt das Fenster an die neue Position, die in den
              Feldern X,Y,W,H der GRECT-Struktur angegeben ist.

Querverweise  \#TWindow\#  \#TWindow.WMMoved\#

\end


screen("TWindow.Next":sensitive)
TWindow.Next (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Next: PWindow;

Beschreibung  Gibt einen Pointer auf das nÑchste Fenster in der
              Liste des Åbergeordneten Fensters zurÅck bzw. \#nil\#,
              wenn das Fenster das letzte in der Liste ist.

Querverweise  \#TWindow\#  \#TWindow.Previous\#

\end


screen("TWindow.OpenWindow":sensitive)
TWindow.OpenWindow (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure OpenWindow; virtual;

Beschreibung  Wenn \#Attr.Status\# \#ws_Created\# enthÑlt, wird das
              Fenster mit \#wind_open\#() geîffnet und ein evtl.
              vorhandenes \#TScroller\#-Objekt angepaût. Wenn
              \#ws_ex_Disabled\# gesetzt und \#MultiTOS\# installiert
              ist, wird das Fenster anschlieûend in den Hinter-
              grund gebracht. Danach werden alle vorhandenen
              untergeordneten Fenster geîffnet.
              Tritt wÑhrend des ôffnens ein Fehler auf, gibt
              \#ChkError\# \#em_WOpenFailure\# zurÅck.
              EnthÑlt Attr.Status allerdings bereits den Wert
              \#ws_Open\#, wird das Fenster nur an oberste Position
              gebracht (sofern ws_ex_Disabled nicht gesetzt ist),
              und die untergeordneten Fenster werden geîffnet.

Querverweise  \#TWindow\#

\end


screen("TWindow.Paint":sensitive)
TWindow.Paint (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint(var PaintInfo: \#TPaintStruct\#);
                                                      virtual;

Beschreibung  In dieser Methode sollten normalerweise alle
              Zeichenroutinen des Fensters zusammengefaût sein,
              weshalb sie in eigentlich jedem ObjectGEM-Programm
              Åberschrieben wird. Man sollte nach Mîglichkeit
              wirklich _keine_ Zeichnungen im Fenster auûerhalb
              dieser Methode vornehmen...
              StandardmÑûig macht Paint nichts, es sei denn, dem
              Fenster wurde mit \link("TWindow.LoadDialog")LoadDialog\# ein Dialogbaum zuge-
              wiesen. Dann wird der entsprechende Dialog ge-
              zeichnet.
              Die Methode sollte _nie_ direkt aufgerufen werden,
              sondern immer nur mittels \#ForceRedraw\#, \#WMRedraw\# oder
              \#TApplication.InvalidateRect\#. Wer meint, dies
              dennoch tun zu mÅssen, muû darauf achten, vor dem
              Aufruf von Paint die Methoden \link("TWindow.UpdateDialog")UpdateDialog\# und
              \#InitPaint\# sowie nach dem Aufruf \#ExitPaint\# aufzu-
              rufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.Previous":sensitive)
TWindow.Previous (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Previous: PWindow;

Beschreibung  Gibt einen Pointer auf das vorhergehende Fenster
              in der Liste des Åbergeordneten Fensters zurÅck
              bzw. \#nil\#, wenn das Fenster das erste in der
              Liste ist.

Querverweise  \#TWindow\#  \#TWindow.Next\#

\end


screen("TWindow.RawDestroy":sensitive,"RawDestroy":sensitive)
TWindow.RawDestroy (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure RawDestroy; virtual;

Beschreibung  Ruft zunÑchst fÅr alle untergeordneten Fenster
              RawDestroy auf. Dann wird \#Attr.Status\# auf
              \#ws_NoWindow\# und \#Attr.gemHandle\# auf -1 gesetzt,
              _ohne_ irgendwelche GEM-Funktionen zum Schlieûen
              bzw. Freigeben des Fensters zu verwenden.
              Wird z.B. benîtigt, wenn ein Accessory geschlossen
              wird; in diesem Fall werden nÑmlich alle Fenster
              automatisch vom Betriebssystem freigegeben.
              RawDestroy braucht normalerweise nicht direkt
              aufgerufen zu werden, stattdessen sollte (bzw.
              _muû_) man \#TWindow.Destroy\# verwenden.

Querverweise  \#TWindow\#  \#TApplication.ACClose\#

\end


screen("TWindow.ReleaseDC":sensitive,"ReleaseDC":sensitive)
TWindow.ReleaseDC (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ReleaseDC; virtual;

Beschreibung  Gibt einen zuvor mit \#TWindow.GetDC\# angeforderten
              "device context" frei, d.h. das Zeichnen ist
              beendet und die Bildschirm-Blockierung wird auf-
              gehoben. Darf nur aufgerufen werden, wenn GetDC
              erfolgreich war!

Querverweise  \#TWindow\#

\end


screen("TWindow.SetCurr":sensitive,"SetCurr":sensitive)
TWindow.SetCurr (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCurr(r: \#GRECT\#); virtual;

Beschreibung  Setzt die neuen Auûenmaûe des Fensters. Intern wird
              \#TWindow.WMSized\#(r.X,r.Y,r.W,r.H) aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetCursor":sensitive)
TWindow.SetCursor (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCursor(Crs: HCursor); virtual;

Beschreibung  éndert das Feld \#Class.hCursor\# auf Crs. Wenn das
              Fenster gerade top ist, wird der Mauszeiger ent-
              sprechend neu gesetzt.
              WICHTIG: Das Feld \#IconClass.hCursor\# wird _nicht_
              verÑndert, dieses kann nur einmal beim Programm-
              start mit \#GetIconWindowClass\# gesetzt werden!

Querverweise  \#TWindow\#

\end


screen("TWindow.SetDlgTree":sensitive,"SetDlgTree":sensitive)
TWindow.SetDlgTree (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetDlgTree(tree: \#PTree\#); virtual;

Beschreibung  Setzt \#DlgTree\# auf den in tree Åbergebenen Objekt-
              baum. Es findet _keine_ öberprÅfung statt, ob Åber-
              haupt ein neuer Dialog zugewiesen werden darf!
              Deshalb sollte man diese Methode nie direkt auf-
              rufen, sondern stattdessen \#TWindow.LoadDialog\#
              verwenden.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetGadgets":sensitive,"SetGadgets":sensitive)
TWindow.SetGadgets (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetGadgets(Style: integer); virtual;

Beschreibung  Weist dem Fenster andere Fensterelemente zu
              (\#CLOSER\#, \#MOVER\#, \#FULLER\# etc.).
              Wenn Style ungleich \link("TWindow.Attr.Style")Attr.Style\# ist, wird das
              Fenster dazu geschlossen und freigegeben und
              dann wieder komplett neu erzeugt und geîffnet.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetSubTitle":sensitive,"SetSubTitle":sensitive)
TWindow.SetSubTitle (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetSubTitle(AnInfo: string); virtual;

Beschreibung  Gibt dem Fenster eine neue Infozeile und zeigt sie
              an, wenn in \#Attr.Style\# das Bit \#INFO\# gesetzt ist.
              Der String AnInfo darf max. 80 Zeichen lang sein.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetTitle":sensitive,"SetTitle":sensitive)
TWindow.SetTitle (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetTitle(ATitle: string); virtual;

Beschreibung  Gibt dem Fenster einen neuen Titel und zeigt diesen
              an, wenn in \#Attr.Style\# das Bit \#NAME\# gesetzt ist.
              Der String ATitle darf max. 78 Zeichen lang sein,
              da vorne und hinten automatisch je ein Leerzeichen
              angefÅgt wird.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetupSize":sensitive)
TWindow.SetupSize (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupSize; virtual;

Beschreibung  In dieser Methode wird die Anfangsgrîûe des Fensters
              festgelegt. \#Full\# und \#Curr\# werden auf die Grîûe des
              Desktops gesetzt und daraus \link("TWindow.Work")Work\# berechnet.
              Wird von \#TWindow.SetupWindow\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.SetupWindow":sensitive)
TWindow.SetupWindow (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupWindow; virtual;

Beschreibung  In dieser Methode sollten alle Einstellungen, die
              das Fenster (d.h. nicht nur das Fensterobjekt an
              sich) betreffen, vorgenommen werden.
              StandardmÑûig wird zunÑchst \#TWindow.SetupSize\# auf-
              gerufen. Dann werden dem Fenster drei von \#TKey\# ab-
              geleitete Objekte zugewiesen, die fÅr das Schlieûen
              des Fensters (<Control>+<U>), das éndern der Grîûe
              (<Control>+<*>) und das Wechseln des Fensters
              (<Control>+<W>) zustÑndig sind. Wurde das Programm
              _nicht_ als Accessory gestartet und ist \#cs_AutoOpen\#
              gesetzt, wird zum Schluû noch \#TWindow.MakeWindow\#
              aufgerufen.
              Wird diese Methode Åberschrieben, sollte die
              ursprÅngliche Methode irgendwo am Ende der neuen
              Methode aufgerufen werden.

Querverweise  \#TWindow\#  \#TWindow.Init\#

\end


screen("TWindow.SetWork":sensitive,"SetWork":sensitive)
TWindow.SetWork (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetWork(r: \#GRECT\#); virtual;

Beschreibung  Bringt den Arbeitsbereich auf die neue Grîûe, die
              in den Feldern X,Y,W,H der GRECT-Struktur angegeben
              ist. Intern werden die Werte mit \#TWindow.Calc\# auf
              die Auûenmaûe umgerechnet und dann \#TWindow.WMSized\#
              aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.ShutdownWindow":sensitive,"ShutdownWindow":sensitive)
TWindow.ShutdownWindow (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ShutdownWindow; virtual;

Beschreibung  Wird von \#TWindow.Done\# aufgerufen, _nachdem_ alle
              Child-Fenster geschlossen wurden. In dieser Methode
              kann also das Fenster "ausgewertet" werden, bevor
              es geschlossen wird.
              ShutdownWindow ist damit das GegenstÅck zu
              \#TWindow.SetupWindow\#.

Querverweise  \#TWindow\#

\end


screen("TWindow.Size":sensitive)
TWindow.Size (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Size(r: \#GRECT\#); virtual;

Beschreibung  Bringt die Auûenmaûe des Fensters auf die neue
              Grîûe, die in den Feldern X,Y,W,H der GRECT-
              Struktur angegeben ist.
              Ist \#cs_FullRedraw\# gesetzt, wird anschlieûend
              \#TWindow.ForceRedraw\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.Top":sensitive,"Top":sensitive)
TWindow.Top (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Top; virtual;

Beschreibung  Wenn das Fenster offen ist, wird es an die oberste
              Position gebracht.

Querverweise  \#TWindow\#

\end


screen("TWindow.UpdateDialog":sensitive)
TWindow.UpdateDialog (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure UpdateDialog; virtual;

Beschreibung  Wenn dem Fenster mit \link("TWindow.LoadDialog")LoadDialog\# ein Dialogbaum
              zugewiesen wurde, wird in dieser Methode das \#ROOT\#-
              Objekt auf die neue X- und Y- Position des Fenster-
              Arbeitsbereichs gebracht. Auûerdem wird hier eine
              evtl. verwendete Toolbar positioniert.
              Die Methode wird intern verwendet und braucht
              nicht direkt aufgerufen zu werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMArrowed":sensitive,"WMArrowed":sensitive)
TWindow.WMArrowed (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMArrowed(waA,SpeedA,waB,SpeedB: integer);
                                                        virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer in den Slider-
              bereich klickt (Pfeile, grauer Bereich). Normaler-
              weise enthÑlt waA eine der WA_-Konstanten und
              SpeedA ist 1 (normale Scrollgeschwindigkeit),
              waB und SpeedB sind Null.
              Wird allerdings unter WINX eine Scrollbox ver-
              wendet, kann in waB und SpeedB eine zweite
              (analog aufgebaute) Scrollanweisung Åbergeben
              werden.
              Wenn ein \#Scroller\# vorhanden ist, wird der Fenster-
              inhalt mit \#ScrollBy\# um die errechneten Werte ver-
              schoben.

Querverweise  \#TWindow\#  \#WM_ARROWED\#

\end


screen("TWindow.WMBottomed":sensitive,"WMBottomed":sensitive)
TWindow.WMBottomed (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMBottomed; virtual;

Beschreibung  Wird ab AES 4.10 aufgerufen, wenn der Benutzer das
              Fenster "backdropped", d.h. per Klick auf den Titel
              in den Hintergrund bringt.
              ObjectGEM reagiert darauf mit dem entsprechenden
              \#wind_set\#()-Befehl.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMClick":sensitive,"WMClick":sensitive)
TWindow.WMClick (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMClick(mX,mY,KStat: integer); virtual;

Beschreibung  Wird von \#TWindow.WMButton\# aufgerufen, wenn der
              Benutzer in den Arbeitsbereich des Fensters klickt
              (Einfachklick). In mX und mY wird die Klickposition
              Åbergeben, KStat gibt den Zustand der Umschalt-
              tasten zum Zeitpunkt des Klicks an.
              StandardmÑûig werden hier nur evtl. vorhandene
              Icons mit \#IconSelect\# deselektiert.

Querverweise  \#TWindow\#  \#TWindow.WMDblClick\#

\end


screen("TWindow.WMButton":sensitive)
TWindow.WMButton (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMButton(mX,mY,BStat,KStat,
                                       Clicks: integer); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn der
              Benutzer in den Arbeitsbereich des Fensters klickt.
              mX und mY geben die Klickposition an, BStat den
              Mausknopf (1=links, 2=rechts), Clicks die Anzahl
              der Klicks und KStat den Zustand der Umschalt-
              tasten.
              Ist \#cs_DblClks\# gesetzt und Clicks=2, ruft WMButton
              \#TWindow.WMDblClick\# auf. Ist Clicks=1, wird zunÑchst
              ÅberprÅft, ob \#cs_Rubbox\# gesetzt ist. Ist dies der
              Fall und liegt die Klickposition im durch \#RBox\# an-
              gegebenen Bereich, wird \#TApplication.Rubbox\# auf-
              gerufen und das Ergebnis an \#TWindow.WMRubbox\#
              weitergeleitet. Ansonsten wird \#TWindow.WMClick\#
              aufgerufen, oder - wenn mit der rechten Maustaste
              geklickt wurde - \#TWindow.WMRButton\#.
              Diese Methode wird normalerweise _nicht_ Åber-
              schrieben.
              WICHTIG: Ein Doppelklick recht wird _nicht_ weiter-
              geleitet. Stattdessen wird das Fenster getoppt!

Querverweise  \#TWindow\#

\end


screen("TWindow.WMClosed":sensitive)
TWindow.WMClosed (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMClosed; virtual;

Beschreibung  Wenn \#TWindow.CanClose\# true zurÅckgibt, wird das
              Fenster mit \link("TWindow.Destroy")Destroy\# freigegeben. Ist dabei kein
              Fehler aufgetreten und \#cs_QuitOnClose\# gesetzt, wird
              das Programm mit \#TApplication.Quit\# beendet.
              Wenn das Schlieûen eines Fensters also nicht zum
              Beenden der Applikation fÅhren soll, muû diese
              Methode Åberschrieben werden.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMDblClick":sensitive,"WMDblClick":sensitive)
TWindow.WMDblClick (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMDblClick(mX,mY,KStat: integer); virtual;

Beschreibung  Wird von \#TWindow.WMButton\# aufgerufen, wenn der
              Benutzer doppelt in den Arbeitsbereich des Fensters
              klickt. In mX und mY wird die Klickposition Åber-
              geben, KStat gibt den Zustand der Umschalttasten
              zum Zeitpunkt des Klicks an.
              StandardmÑûig werden hier nur evtl. vorhandene
              Icons mit \#IconSelect\# deselektiert.

Querverweise  \#TWindow\#  \#TWindow.WMClick\#

\end


screen("TWindow.WMDragDrop":sensitive,"WMDragDrop":sensitive)
TWindow.WMDragDrop (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMDragDrop(PipeHnd,OrgID,mX,mY,
                                        KStat: integer); virtual;

Beschreibung  Wird von \#TApplication.APDragDrop\# aufgerufen, wenn
              der Benutzer unter \#MultiTOS\# ein Icon auf dieses
              Fenster gezogen hat.
              ZunÑchst wird die Anfrage positiv beantwortet.
              Dann werden die von \link("TWindow.DDGetPreferredTypes")DDGetPreferredTypes\# geliefer-
              ten Dateitypen Åbermittelt. Nachdem sich der Sender
              auf einen Dateityp festgelegt hat, wird darauf mit
              dem von \link("TWindow.DDHeaderReply")DDHeaderReply\# ermittelten Wert reagiert.
              Wenn sich Sender und EmpfÑnger einigen konnten,
              werden dann mit \link("TWindow.DDReadData")DDReadData\# die Daten gelesen,
              ansonsten wird die Drag&Drop-Anfrage abgewiesen
              oder ein neuer Dateityp verlangt.
              Verschickt der Sender den 'ARGS'-Datentyp, wird
              automatisch die Methode \link("TWindow.DDReadArgs")DDReadArgs\# aufgerufen.
              Wenn der Sender allerdings den Applikationspfad
              wissen mîchte, wird dieser mit \link("TWindow.DDGetPath")DDGetPath\# zurÅck-
              geliefert.
              PipeHnd ist das Dateihandle der _geîffneten_ Pipe,
              auf die mit \#Fwrite\#, \#Fread\# etc. zugegriffen werden
              kann. OrgID ist die AES-Applikations-Kennung des
              Senders; mX, mY und KStat geben die Position der
              Maus und den Zustand der Umschalttasten beim
              Aufruf an.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMFulled":sensitive,"WMFulled":sensitive)
TWindow.WMFulled (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMFulled; virtual;

Beschreibung  Ruft \#TWindow.FullSize\# auf. Wenn das Fenster ein
              \#TScroller\#-Objekt besitzt, wird dieses mit
              \#SetPageSize\# und \#SetSBarRange\# angepaût.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMHSlid":sensitive,"WMHSlid":sensitive)
TWindow.WMHSlid (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMHSlid(Value: integer); virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer den horizontalen
              Slider verschoben hat. In Value befindet sich die
              neue Sliderposition in Promille.
              Wenn ein \#TScroller\#-Objekt existiert, wird dieses
              an die neue Position angepaût.

Querverweise  \#TWindow\#  \#TWindow.WMVSlid\#

\end


screen("TWindow.WMKeyDown":sensitive,"WMKeyDown":sensitive)
TWindow.WMKeyDown (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function WMKeyDown(Stat,Key: integer): boolean;
                                                        virtual;

Beschreibung  Wird von \#TApplication.HandleKeybd\# aufgerufen,
              wenn das Fenster an oberster Position ist und
              das Applikations-Objekt das aufgetretene Tastatur-
              ereignis nicht verarbeiten konnte.
              In Stat steht der Zustand der Umschalttasten, in
              Key der Tastaturcode. Wenn das Fenster die Taste
              verarbeiten konnte, muû true zurÅckgegeben werden.
              StandardmÑûig ist die RÅckgabe false.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMMoved":sensitive,"WMMoved":sensitive)
TWindow.WMMoved (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMMoved(X,Y,W,H: integer); virtual;

Beschreibung  Das Fenster wird mit \#TWindow.Move\# an die Åber-
              gebene Position gebracht. Wenn ein \#TScroller\#-
              Objekt existiert, wird dieses mit \#SetPageSize\#
              und \#SetSBarRange\# evtl. angepaût.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMNewTop":sensitive,"WMNewTop":sensitive)
TWindow.WMNewTop (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMNewTop; virtual;

Beschreibung  Ruft \#TWindow.WMUntopped\# auf.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMOnTop":sensitive,"WMOnTop":sensitive)
TWindow.WMOnTop (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMOnTop; virtual;

Beschreibung  Wird aufgerufen, wenn das Fenster vom AES (Screen-
              Manager) an oberste Position gebracht wurde. Intern
              wird die Cursorsteuerung angepaût.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMRBoxChanged":sensitive,"WMRBoxChanged":sensitive)
TWindow.WMRBoxChanged (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMRBoxChanged(r: \#GRECT\#); virtual;

Beschreibung  Wird von \#TApplication.Rubbox\# jedesmal dann aufge-
              rufen, wenn sich die Grîûe der vom Benutzer im
              Fenster aufgezogenenen Rubbox Ñndert. Dies kann
              z.B. dazu verwendet werden, um die aktuelle Grîûe,
              die in r Åbergeben wird, anzuzeigen etc.
              WÑhrend des Aufrufs ist die Maus unsichtbar, und
              es liegt eine \#wind_update\#()-Schachtelung sowohl
              mit \#BEG_UPDATE\# als auch mit \#BEG_MCTRL\# vor. Ver-
              Ñnderte VDI-Attribute mÅssen zurÅckgesetzt werden.

Querverweise  \#TWindow\#  \#TWindow.WMRubbox\#

\end


screen("TWindow.WMRBoxCheck":sensitive,"WMRBoxCheck":sensitive)
TWindow.WMRBoxCheck (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMRBoxCheck(x,y,xmin,ymin,xmax,
                             ymax: integer; var mx,my: integer);
                                                         virtual;

Beschreibung  Wird von \#TApplication.Rubbox\# jedesmal dann aufge-
              rufen, wenn sich die Grîûe der vom Benutzer im
              Fenster aufgezogenenen Rubbox Ñndert. Im Gegen-
              satz zu \#TWindow.WMRBoxChanged\# erfolgt der Aufruf
              noch _vor_ dem Zeichnen. In x und y wird der feste
              Eckpunkt der Rubbox Åbergeben, in mx und my der
              variable. Letzterer kann mit dieser Methode an
              eigene BedÅrfnisse angepaût werden, aber Achtung:
              Der Aufruf erfolgt erst, nachdem der Punkt schon
              an die Werte von \#RBox\# angepaût wurde. Wenn man
              also énderungen vornimmt, sollte man danach mx
              und my mit Hilfe von xmin..ymax clippen.

Querverweise  \#TWindow\#  \#TWindow.WMRubbox\#

\end


screen("TWindow.WMRButton":sensitive,"WMRButton":sensitive)
TWindow.WMRButton (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMRButton(mX,mY,KStat,Clicks: integer);
                                                         virtual;

Beschreibung  Wird von \#TWindow.WMButton\# aufgerufen, wenn mit der
              _rechten_ Maustaste geklickt wurde. In mX und mY
              wird die Position Åbergeben, in Clicks die Anzahl
              der Klicks und in KStat der Status der Umschalt-
              tasten.
              WICHTIG: Bei einem _Doppelklick_ rechts erfolgt
              _kein_ Aufruf!

Querverweise  \#TWindow\#

\end


screen("TWindow.WMRedraw":sensitive,"WMRedraw":sensitive)
TWindow.WMRedraw (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMRedraw(X,Y,W,H: integer); virtual;

Beschreibung  Zeichnet die Teile des Arbeitsbereichs neu, die
              sich mit dem Åbergebenen Bereich Åberschneiden.
              Dazu wird fÅr alle betroffenen Rechtecke der
              Fenster-Rechteckliste \#TWindow.Paint\# bzw. - wenn
              das Fenster ikonifiziert ist - \#TWindow.IconPaint\#
              aufgerufen.
              Vorher wird jeweils der zu Åbergebende \#TPaintStruct\#-
              Record ausgefÅllt und der Hintergrund mit der ge-
              wÅnschten Farbe gelîscht, wenn \#Class.hbrBackground\#
              einen Wert grîûer Null enthÑlt.
              Das Clipping wird jeweils korrekt gesetzt und die
              Maus ist unsichtbar. WICHTIG: WMRedraw nimmt _keine_
              Blockierung des Bildschirms mit \#wind_update\# vor,
              dies muû man - wenn die Methode "von Hand" aufge-
              rufen wird - selbst durchfÅhren. Bei allen internen
              Aufrufen (z.B. von \#TApplication.MUMesag\#) kÅmmert
              sich ObjectGEM allerdings automatisch darum.
              Nach dem Abarbeiten der Rechteckliste werden alle
              vorhandenen Icons mit \#TIcon.Paint\# dargestellt.
              Bevor gezeichnet wird, ruft WMRedraw die Methoden
              \#UpdateDialog\# und \#InitPaint\# auf, nach dem Zeichnen
              dann \#ExitPaint\#.

Querverweise  \#TWindow.ForceRedraw\#  \#TApplication.InvalidateRect\#
              \#TWindow\#              \#TWindow.IsIconified\#

\end


screen("TWindow.WMRubbox":sensitive,"WMRubbox":sensitive)
TWindow.WMRubbox (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMRubbox(r: \#GRECT\#); virtual;

Beschreibung  Wird von \#TWindow.WMButton\# aufgerufen, wenn der
              Benutzer im Fenster eine Rubbox aufgezogen hat.
              In r wird der ausgewÑhlte Bereich Åbergeben,
              der z.Z. nicht grîûer als der sichtbare Arbeits-
              bereich sein kann.
              Der Bereich kann allerdings noch mit den Feldern
              X1,Y1,X2,Y2 von \#RBox\# eingeschrÑnkt werden. Ist
              dort ein Wert ungleich Null eingetragen, wird
              dieser auf der entsprechenden Achse vom
              _sichtbaren_ Arbeitsbereich abgezogen. Wenn
              also z.B. X2 den Wert 16 hat, kann die Rubbox
              bis maximal 16 Pixel vor dem rechten Rand des
              Arbeitsbereichs aufgezogen werden.
              WICHTIG: Die VerÑnderung von RBox sollte z.B.
              in \#TWindow.SetupWindow\# erfolgen. Auûerdem dÅrfen
              die gewÅnschten Werte NICHT DIREKT eingetragen
              werden, sondern mÅssen zum vorhandenen Wert
              addiert werden ("inc(RBox.X2,16);").

Querverweise  \#TWindow\#  \#TWindow.WMRBoxChanged\#

\end


screen("TWindow.WMSized":sensitive,"WMSized":sensitive)
TWindow.WMSized (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMSized(X,Y,W,H: integer); virtual;

Beschreibung  Das Fenster wird mit \#TWindow.Size\# auf die Åber-
              gebene Grîûe gebracht. Wenn ein \#TScroller\#-Objekt
              existiert, wird dieses mit \#SetPageSize\# und
              \#SetSBarRange\# angepaût.

Querverweise  \#TWindow\#

\end


screen("TWindow.WMShaded":sensitive,"WMShaded":sensitive)
TWindow.WMShaded (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMShaded; virtual;

Beschreibung  Wird unter WINX ab Version 2.3 aufgerufen, wenn
              das Fenster mit einem Mausklick rechts einge-
              klappt wird.
              Dient nur zur Information, hier passiert sonst
              nichts weiter.

Querverweise  \#TWindow\#  \#TWindow.WMUnshaded\#

\end


screen("TWindow.WMUnshaded":sensitive,"WMUnshaded":sensitive)
TWindow.WMUnshaded (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMUnshaded; virtual;

Beschreibung  Wird unter WINX ab Version 2.3 aufgerufen, wenn
              das Fenster wieder aufgeklappt wird.
              Dient nur zur Information, hier passiert sonst
              weiter nichts.

Querverweise  \#TWindow\#  \#TWindow.WMShaded\#

\end


screen("TWindow.WMToolbar":sensitive,"WMToolbar":sensitive)
TWindow.WMToolbar (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMToolbar(Indx,BStat,KStat,
                                     Clicks: integer); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn auf
              ein Element der Toolbar geklickt wurde. WMToolbar
              versucht, mit \link("TToolbar.TestMessage")TestMessage\# ein passendes \#TToolbar\#-
              Objekt zu finden. Ist die Suche erfolgreich, wird
              die zugehîrige \link("TEvent.Work")Work\#-Methode aufgerufen bzw. - wenn
              die Anwahl mit der rechten Maustaste erfolgte -
              ein evtl. vorhandener BubbleHelp-Hilfstext ange-
              zeigt.
              WICHTIG: Bei einem _Doppelklick rechts_ erfolgt
              kein Aufruf, stattdessen wird das Fenster getoppt!

Querverweise  \#TWindow\#  \#TWindow.LoadToolbar\#

\end


screen("TWindow.WMTopped":sensitive,"WMTopped":sensitive)
TWindow.WMTopped (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMTopped; virtual;

Beschreibung  Ruft \#TWindow.Top\# auf und bringt das Fenster damit
              an oberste Position.

Querverweise  \#TWindow\#  \#TWindow.WMOnTop\#

\end


screen("TWindow.WMUntopped":sensitive,"WMUntopped":sensitive)
TWindow.WMUntopped (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMUntopped; virtual;

Beschreibung  Sollte vom GEM aufgerufen werden, wenn ein anderes
              Fenster an die oberste Position kommt. Intern wird
              dann die Mauscursor-Verwaltung angepaût.

Querverweise  \#TWindow\#  \#TWindow.WMNewTop\#

\end


screen("TWindow.WMVSlid":sensitive,"WMVSlid":sensitive)
TWindow.WMVSlid (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMVSlid(Value: integer); virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer den vertikalen
              Slider verschoben hat. In Value befindet sich die
              neue Sliderposition in Promille.
              Wenn ein \#TScroller\#-Objekt existiert, wird dieses
              an die neue Position angepaût.

Querverweise  \#TWindow\#  \#TWindow.WMHSlid\#

\end


screen("TWindow.Print":sensitive)
TWindow.Print (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Print; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<P>
              drÅckt. StandardmÑûig passiert hier nichts.

Querverweise  \#TWindow\#  \#TTextWindow.Print\#

\end


screen("TWindow.Cut":sensitive)
TWindow.Cut (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Cut; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<X>
              drÅckt. StandardmÑûig wird dann \#TApplication.Cut\#
              aufgerufen.

Querverweise  \#TWindow\#  \#TWindow.Copy\#  \#TWindow.Paste\#

\end


screen("TWindow.Delete":sensitive)
TWindow.Delete (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Delete; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Delete> drÅckt.
              StandardmÑûig wird dann \#TApplication.Delete\# aufge-
              rufen.

Querverweise  \#TWindow\#  \#TDialog.Delete\#

\end


screen("TWindow.Copy":sensitive)
TWindow.Copy (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Copy; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<C>
              drÅckt. StandardmÑûig wird dann \#TApplication.Copy\#
              aufgerufen.

Querverweise  \#TWindow\#  \#TWindow.Cut\#  \#TWindow.Paste\#

\end


screen("TWindow.Paste":sensitive)
TWindow.Paste (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paste; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<V>
              drÅckt. StandardmÑig wird dann \#TApplication.Paste\#
              aufgerufen.

Querverweise  \#TWindow\#  \#TWindow.Cut\#  \#TWindow.Copy\#

\end


screen("TWindow.SelectAll":sensitive)
TWindow.SelectAll (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SelectAll; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<A>
              drÅckt. Im Moment werden dann alle Icons des
              Fensters mit \#TWindow.IconSelect\#(true,id_No) an-
              gewÑhlt.

Querverweise  \#TWindow\#

\end


screen("TWindow.IconSelect":sensitive)
TWindow.IconSelect (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure IconSelect(OnOff: boolean;
                                     OffExc: integer); virtual;

Beschreibung  Wenn OnOff true ist, werden alle Icons des Fensters
              selektiert. Andernfalls werden die Icons deselek-
              tiert (auch die der Fenster in der \#ChildList\#) -
              mit Ausnahme des Fensters mit dem GEM-Handle OffExc.
              Sollen _alle_ Icons deselektiert werden, muû fÅr
              OffExc \#id_No\# Åbergeben werden.

Querverweise  \#TWindow\#            \#TApplication.IconSelect\#
              \#TWindow.FirstIcon\#  \#TWindow.NextIcon\#

\end


screen("TWindow.FirstIcon":sensitive)
TWindow.FirstIcon (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstIcon(OnAll: boolean): \#PIcon\#; virtual;

Beschreibung  Ist OnAll true, wird ein Pointer auf das erste
              selektierte Icon geliefert. Ansonsten wird das
              erste von allen Icons zurÅckgegeben.
              Existiert kein entsprechendes Icon, erhÑlt man \#nil\#.

Querverweise  \#TWindow\#  \#TWindow.NextIcon\#  \#TWindow.IconSelect\#

\end


screen("TWindow.LoadMenu":sensitive)
TWindow.LoadMenu (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadMenu(Indx: integer); virtual;

Beschreibung  Installiert die Pulldown-MenÅleiste im Objektbaum
              Indx. ZunÑchst wird geprÅft, ob das MenÅ auf dem
              Bildschirm komplett dargestellt werden kann. Ist
              dies der Fall, wird das MenÅ gezeichnet, ansonsten
              gibt \#ChkError\# \#em_InvalidMenu\# zurÅck.
              Diese Methode sollte - falls ein Pulldown-MenÅ
              verwendet wird - in \#TWindow.SetupWindow\# aufge-
              rufen werden.
              Wenn das MenÅ korrekt installiert werden konnte,
              wird danach das "DESK"-MenÅ an Stelle der nicht
              benutzbaren Acessory-EintrÑge mit diversen Funk-
              tionen versehen.

Querverweise  \#TWindow\#  \#TWindow.FreeMenu\#

\end


screen("TWindow.FreeMenu":sensitive)
TWindow.FreeMenu (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeMenu; virtual;

Beschreibung  Entfernt ein mit \#TWindow.LoadMenu\# installiertes
              Pulldown-MenÅ. Wird von \#TWindow.Done\# automatisch
              aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.HandleMenu":sensitive)
TWindow.HandleMenu (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleMenu(meNum: integer); virtual;

Beschreibung  Wird von \#TWindow.MNSelected\# aufgerufen, wenn fÅr
              den MenÅeintrag mit dem Index meNum kein zugehîri-
              ges \#TEvent\#-Objekt vorhanden ist.
              Innerhalb dieser Methode kann dann eine case-
              Abfrage durchgefÅhrt werden. Nach Mîglichkeit
              sollten allerdings TEvent-Objekte zum Einsatz
              kommen.
              HandleMenu leitet die Anwahl des "öber..."-MenÅein-
              trags an \#TApplication.MNSelected\# weiter, ansonsten
              passiert hier nichts.

Querverweise  \#TWindow\#

\end


screen("TWindow.MNSelected":sensitive)
TWindow.MNSelected (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MNSelected(meNum,mtNum: integer;
                          Tree: \#PTree\#; PrIndx: integer); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn der
              Benutzer einen MenÅeintrag angewÑhlt hat. In meNum
              wird der Index dieses Eintrags, in mtNum der Index
              des entsprechenden MenÅtitels Åbergeben.
              In Tree wird der Zeiger auf den zugehîrigen Objekt-
              baum und in PrIndex der Index des dem Eintrag Åber-
              geordneten Objekts Åbergeben; wenn diese Werte nicht
              ermittelt werden kînnen, wird stattdessen \#nil\# bzw.
              0 Åbergeben.
              Die Methode versucht, den MenÅeintrag mit einem
              \#TKeyMenu\#-Objekt zu verknÅpfen; ist fÅr den Eintrag
              kein derartiges Objekt vorhanden, wird die Methode
              \#TWindow.HandleMenu\# aufgerufen.

Querverweise  \#TWindow\#

\end


screen("TWindow.NextIcon":sensitive)
TWindow.NextIcon (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function NextIcon: \#PIcon\#; virtual;

Beschreibung  Gibt das nÑchste selektiert Icon bzw. Icon Åber-
              haupt zurÅck, je nachdem, welche Parameter an
              \#TWindow.FirstIcon\# Åbergeben wurden.

Querverweise  \#TWindow\#  \#TWindow.IconSelect\#

\end


screen("TApplication":sensitive,"PApplication":sensitive)
TApplication                                         Unit \#OWindows\#
------------------------------------------------------------------

TApplication ist ein komplettes GEM-Applikations-Objekt, d.h.
das Objekt beachtet automatisch alle GEM-Konventionen bzgl.
Initialisierung etc. Auûerdem werden alle Meldungen und Ereig-
nisse verarbeitet. Da TApplication standardmÑûig nur ein leeres
Fenster vom Typ \#TWindow\# erzeugt, leitet man normalerweise ein
eigenes Applikationsobjekt ab.

	Pointer
		PApplication = ^TApplication;

	Felder
		\#aesHandle\#
		\#apDTA\#
		\link("TApplication.apID")apID\#
		\#apName\#
		\#apPath\#
		\link("TApplication.Attr")Attr\#
		\#AVServer\#
		\link("TApplication.Clipboard")Clipboard\#
		\#FirstInstance\#
		\#FPUAvailable\#
		\#GDOSActive\#
		\link("TApplication.Icon")Icon\#
		\#IsQSBUsed\#
		\#MainWindow\#
		\#MemoryProtection\#
		\link("TApplication.menuID")menuID\#
		\link("TApplication.MenuTree")MenuTree\#
		\#MessageBLen\#
		\#MessageBuffer\#
		\#MetaDOS\#
		\#MiNTActive\#
		\#Multitasking\#
		\#MultiTOS\#
		\link("TApplication.Name")Name\#
		\#OSBAvailable\#
		\#RscPtr\#
		\#SpeedoActive\#
		\link("TApplication.Status")Status\#
		\link("TApplication.vdiHandle")vdiHandle\#
		\link("TApplication.workIn")workIn\#
		\link("TApplication.workOut")workOut\#
		\#XAcc\#
		\#XAccList\#

	Methoden
		\link("TApplication.Init")Init\#
		\link("TApplication.Done")Done\#
		\#ACClose\#
		\#ACOpen\#
    \#Alert\#
		\#APDragDrop\#
		\#APTerm\#
		\link("TApplication.At")At\#
		\#AutoFolder\#
		\#AVExit\#
		\#AVInsert\#
		\#AVProtokoll\#
		\#AVSendKey\#
		\#AVStartProg\#
		\#Broadcast\#
		\#BubbleHelp\#
    \link("TApplication.CanClose")CanClose\#
		\#CHExit\#
    \#ChkError\#
    \#ChkSpeedoError\#
    \link("TApplication.Copy")Copy\#
    \link("TApplication.Cut")Cut\#
    \link("TApplication.DDFinished")DDFinished\#
    \link("TApplication.DDGetPath")DDGetPath\#
    \link("TApplication.DDGetPreferredTypes")DDGetPreferredTypes\#
    \link("TApplication.DDHeaderReply")DDHeaderReply\#
    \link("TApplication.DDReadArgs")DDReadArgs\#
    \link("TApplication.DDReadData")DDReadData\#
    \link("TApplication.Delete")Delete\#
		\#DeskRedraw\#
		\#DrawMenu\#
    \link("TApplication.Error")Error\#
    \#ExecDialog\#
    \#ExitGEM\#
    \#FindApplication\#
    \#FirstApplication\#
    \link("TApplication.FirstIcon")FirstIcon\#
		\link("TApplication.FirstWndThat")FirstWndThat\#
		\link("TApplication.ForEachWnd")ForEachWnd\#
		\link("TApplication.FreeIcon")FreeIcon\#
		\link("TApplication.FreeMenu")FreeMenu\#
		\#FreeResource\#
		\#GetAddr\#
		\link("TApplication.GetClipboard")GetClipboard\#
		\#GetCrsRect\#
    \#GetCurrInstance\#
    \#GetEvent\#
		\#GetFImagePtr\#
		\#GetFString\#
		\#GetFStringPtr\#
		\#GetGPWindow\#
		\link("TApplication.GetIconTitle")GetIconTitle\#
		\#GetMenuEntries\#
		\#GetMsTimer\#
		\#GetPTopWindow\#
		\#GetPWindow\#
		\#GetXAccAttr\#
		\#HandleAV\#
		\#HandleButton\#
		\#HandleDragDrop\#
		\#HandleError\#
		\#HandleKeybd\#
		\#HandleM1\#
		\#HandleM2\#
		\link("TApplication.HandleMenu")HandleMenu\#
		\#HandleMesag\#
		\#HandleTimer\#
		\#HandleXAcc\#
		\link("TApplication.IconPaint")IconPaint\#
		\link("TApplication.IconSelect")IconSelect\#
		\link("TApplication.IndexOf")IndexOf\#
    \#InitApplication\#
    \#InitGEM\#
    \#InitInstance\#
    \#InitMainWindow\#
		\#InitResource\#
		\#InstallDesktop\#
		\#InvalidateRect\#
		\link("TApplication.IsIconified")IsIconified\#
		\link("TApplication.LoadIcon")LoadIcon\#
		\link("TApplication.LoadMenu")LoadMenu\#
		\#LoadResource\#
    \#MessageLoop\#
		\link("TApplication.MNSelected")MNSelected\#
    \#MUButton\#
    \#MUKeybd\#
    \#MUM1\#
    \#MUM2\#
    \#MUMesag\#
		\#MURBoxChanged\#
		\#MURubbox\#
    \#MUTimer\#
    \#NextApplication\#
    \link("TApplication.NextIcon")NextIcon\#
    \link("TApplication.Paste")Paste\#
    \link("TApplication.Popup")Popup\#
    \#Quit\#
		\#RemoveDesktop\#
		\#ResChCompleted\#
		\#RestoreModalDialog\#
		\#Rubbox\#
    \#Run\#
    \#SCChanged\#
    \link("TApplication.SelectAll")SelectAll\#
    \#SendWndMessage\#
		\#SetQuit\#
    \link("TApplication.SetupVDI")SetupVDI\#
		\#ShutCompleted\#
		\#SHWDraw\#
		\#Terminate\#
		\#VAProtoStatus\#
		\#VAStart\#
		\#XAccAcc\#
		\#XAccExit\#
		\#XAccID\#
		\#XAccIMG\#
		\#XAccInsert\#
		\#XAccKey\#
		\#XAccMeta\#
		\#XAccText\#

	Vorfahre
		\#TEventObject\#
	Nachfahren
		---

\end


screen("TApplication.aesHandle":sensitive,"aesHandle":sensitive)
TApplication.aesHandle (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   aesHandle: integer;  (nur lesen)

Beschreibung  EnthÑlt das Handle der vom AES benutzten VDI-
              Workstation. Wird von \#TApplication.InitGEM\# per
              \#graf_handle\#() ermittelt. Normalerweise braucht
              man diesen Wert nicht verwenden, da er haupt-
              sÑchlich fÅr die (automatisch durchgefÅhrte)
              VDI-Initialisierung benîtigt wird.

Querverweise  \#TApplication\#  \#TApplication.vdiHandle\#

\end


screen("TApplication.apDTA":sensitive,"apDTA":sensitive)
TApplication.apDTA (Feld)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   apDTA: \#DTA\#;

Beschreibung  Wenn das Programm _nicht_ als Accessory gestartet
              wurde, wird der Datei-öbertragungs-Puffer von
              \#TApplication.Init\# auf apDTA gesetzt, damit z.B.
              auch zu einem spÑteren Zeitpunkt noch auf die
              Kommandozeile zugegriffen werden kann (diese
              wÅrde sonst bei Dateioperationen zerstîrt werden).

Querverweise  \#TApplication\#

\end


screen("TApplication.apID":sensitive)
TApplication.apID (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   apID: integer;  (nur lesen)

Beschreibung  Wird von \#TApplication.InitGEM\# auf die mit \#appl_init\#
              ermittelte Identifikationsnummer der Applikation ge-
              setzt. Ein Wert<0 signalisiert einen Fehler (dann
              wird das Programm allerdings automatisch abge-
              brochen).

Querverweise  \#TApplication\#

\end


screen("TApplication.apName":sensitive,"apName":sensitive)
TApplication.apName (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   apName: \#PString\#;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf den eigenen Namen
              des Programms gesetzt, evtl. mit Leerzeichen auf
              eine LÑnge von 8 Zeichen gebracht und mit einem
              Nullbyte abgeschlossen.
              Unter alten TOS-Versionen und bei Accessories
              kann der Name u.U. nicht korrekt ausgewertet
              werden.

Querverweise  \#TApplication\#  \#TApplication.apPath\#

\end


screen("TApplication.apPath":sensitive,"apPath":sensitive)
TApplication.apPath (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   apPath: \#PString\#;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf das Arbeitsver-
              zeichnis des Programms (incl. Laufwerksangabe
              und abschlieûendem '\') gesetzt.
              Unter alten TOS-Versionen und bei Accessories
              kann der Name u.U. nicht korrekt ausgewertet
              werden.

Querverweise  \#TApplication\#  \#TApplication.apName\#

\end


screen("TApplication.Attr":sensitive,"PGEMAttr":sensitive,"TGEMAttr":sensitive,
       "EventMask":sensitive,"Instance":sensitive,"Country":sensitive,
       "rpTail":sensitive,"rpCmd":sensitive,"sysFonts":sensitive,
       "addFonts":sensitive,"charSWidth":sensitive,"charSHeight":sensitive,
       "boxSWidth":sensitive,"boxSHeight":sensitive,"MaxPX":sensitive,
       "MaxPY":sensitive,"PixW":sensitive,"PixH":sensitive,"Colors":sensitive,
       "MaxColors":sensitive,"Planes":sensitive,"PopChar":sensitive,
       "Attr.EventMask":sensitive,"Attr.Instance":sensitive,"Attr.Country":sensitive,
       "Attr.rpTail":sensitive,"Attr.rpCmd":sensitive,"Attr.sysFonts":sensitive,
       "Attr.addFonts":sensitive,"Attr.charSWidth":sensitive,"Attr.charSHeight":sensitive,
       "Attr.boxSWidth":sensitive,"Attr.boxSHeight":sensitive,"Attr.MaxPX":sensitive,
       "Attr.MaxPY":sensitive,"Attr.PixW":sensitive,"Attr.PixH":sensitive,"Attr.Colors":sensitive,
       "Attr.MaxColors":sensitive,"Attr.Planes":sensitive,"Attr.PopChar":sensitive,
       "TApplication.Attr.EventMask":sensitive,"TApplication.Attr.Instance":sensitive,"TApplication.Attr.Country":sensitive,
       "TApplication.Attr.rpTail":sensitive,"TApplication.Attr.rpCmd":sensitive,"TApplication.Attr.sysFonts":sensitive,
       "TApplication.Attr.addFonts":sensitive,"TApplication.Attr.charSWidth":sensitive,"TApplication.Attr.charSHeight":sensitive,
       "TApplication.Attr.boxSWidth":sensitive,"TApplication.Attr.boxSHeight":sensitive,"TApplication.Attr.MaxPX":sensitive,
       "TApplication.Attr.MaxPY":sensitive,"TApplication.Attr.PixW":sensitive,"TApplication.Attr.PixH":sensitive,"TApplication.Attr.Colors":sensitive,
       "TApplication.Attr.PopChar":sensitive,
       "TApplication.Attr.MaxColors":sensitive,"TApplication.Attr.Planes":sensitive,"TApplication.Attr.Style":sensitive,
       "TGEMAttr.EventMask":sensitive,"TGEMAttr.Instance":sensitive,"TGEMAttr.Country":sensitive,
       "TGEMAttr.rpTail":sensitive,"TGEMAttr.rpCmd":sensitive,"TGEMAttr.sysFonts":sensitive,
       "TGEMAttr.addFonts":sensitive,"TGEMAttr.charSWidth":sensitive,"TGEMAttr.charSHeight":sensitive,
       "TGEMAttr.boxSWidth":sensitive,"TGEMAttr.boxSHeight":sensitive,"TGEMAttr.MaxPX":sensitive,
       "TGEMAttr.MaxPY":sensitive,"TGEMAttr.PixW":sensitive,"TGEMAttr.PixH":sensitive,"TGEMAttr.Colors":sensitive,
       "TGEMAttr.MaxColors":sensitive,"TGEMAttr.Planes":sensitive,"TGEMAttr.Style":sensitive,
       "TGEMAttr.PopChar":sensitive)
TApplication.Attr (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Attr: TGEMAttr;

Beschreibung  Diverse Attribute und Werte der Applikation
              sind in diesem Record zusammengefaût. Wird
              von \#TApplication.Init\# initialisiert.

              PGEMAttr = ^TGEMAttr;
              TGEMAttr = record
                           EventMask,
                           Instance   : integer;  (nur lesen)
                           Style      : longint;
                           Country    : word;
                           rpTail,                (nur lesen)
                           rpCmd      : \#PString\#;  (nur lesen)
                           sysFonts,              (nur lesen)
                           addFonts,              (nur lesen)
                           charSWidth,            (nur lesen)
                           charSHeight,           (nur lesen)
                           boxSWidth,             (nur lesen)
                           boxSHeight,            (nur lesen)
                           charWidth,
                           charHeight,
                           boxWidth,
                           boxHeight,
                           MaxPX,                 (nur lesen)
                           MaxPY,                 (nur lesen)
                           PixW,                  (nur lesen)
                           PixH,                  (nur lesen)
                           Colors,                (nur lesen)
                           MaxColors,             (nur lesen)
                           Planes     : integer;  (nur lesen)
                           PopChar    : char
                         end;

              EventMask gibt an, auf welche GEM-Ereignisse das
              Programm mit \#TApplication.GetEvent\# warten soll.
              Wird mit \#MU_MESAG\# or \#MU_KEYBD\# or \#MU_BUTTON\# besetzt;
              wenn \#MultiTOS\# aktiv ist, wird auch noch \#MU_TIMER\#
              eingefÅgt (wird intern benîtigt). Dieses Feld kann
              fÅr eigene Zwecke verÑndert werden, allerdings
              sollte man sich genau Åberlegen, ob dies wirklich
              sein muû, da fast alle Ereignisse schon von
              ObjectGEM behandelt werden (z.B. werden auch \#MU_M1\#
              und \#MU_M2\# intern temporÑr verwendet).
              Instance zeigt an, wie oft sich das Programm im
              Speicher befindet (z.B. gleichzeitig als Accessory
              und als Programm, 1=nur einmal). Null bedeutet,
              daû kein korrekter Wert ermittelt werden konnte.
              Siehe hierzu auch \#TApplication.GetCurrInstance\# und
              \#TApplication.FirstInstance\#.
              In Style werden diverse globale Eigenschaften des
              Programms zusammengefaût. StandardmÑûig wird hier
              \#as_GrowShrink\# or \#as_MenuSeparator\# or \#as_MoveDials\#
              or \#as_HandleShutdown\# or \#as_DesktopWindow\# or
              \#as_3DFlags\# or \#as_UseHomeDir\# eingetragen.
              VerÑnderungen dieser Bitmap sollten in der Methode
              \#TApplication.InitInstance\# vorgenommen werden.
              Country gibt die Landessprache des Betriebssystems
              an, die dann auch von ObjectGEM verwendet wird.
              Z.Z. werden nur \#FRG\# und \#SWG\# gesondert behandelt,
              ansonsten werden englische Texte verwendet.
              rpTail enthÑlt eine dem Programm evtl. Åbergebene
              Kommandozeile, rpCmd den Namen des Programms incl.
              Pfad- und Laufwerksangabe. \#nil\# bedeutet, daû der
              jeweilige Wert nicht ermittelt werden konnte.
              sysFonts gibt die Anzahl der fest im System einge-
              bundenen GEM-Fonts an (wird von \#TApplication.Init\#
              gesetzt). In addFonts trÑgt \link("TApplication.SetupVDI")SetupVDI\# die Anzahl
              der nachgeladenen ZeichensÑtze ein. Das Programm
              kann also auf sysFonts+addFonts ZeichensÑtze zu-
              rÅckgreifen.
              charSWidth, charSHeight, boxSWidth und boxSHeight
              werden von \#TApplication.InitGEM\# auf die RÅckgabe-
              werte von \#graf_handle\#() gesetzt. Die folgenden
              vier Felder geben die Grîûen des aktuell verwende-
              ten Fonts an und sollten bei FontÑnderungen auf
              die neuen Werte gesetzt werden.
              MaxPX und MaxPY geben die aktuelle Auflîsung an.
              Nach Mîglichkeit sollte man allerdings andere
              Werte (z.B. \#GetDesk\#) verwenden.
              PixW und PixH werden (wie die beiden vorhergehen-
              den Werte) von TApplication.Init besetzt; sie
              geben die Grîûe einen Pixels in mm/1000 an.
              Colors gibt die Anzahl der vordefinierten Farben
              an; diese ist auch unter TrueColor nicht hîher
              als 256! MaxColors gibt die Anzahl _aller_ ver-
              fÅgbaren Farben an (0=mehr als 32767, kontinu-
              ierliche Verteilung; 2=monochrom); hiermit sind
              alle vorhandenen Farbabstufungen gemeint, also
              Vorsicht! Wenn man beim Erkennen einer bestimm-
              ten Farbtiefe absolut sicher gehen will, muû
              man Planes auswerten (1=monochrom etc.). Die
              Anzahl der gleichzeitig _darstellbaren_ Farben
              berechnet sich aus 2^Planes.
              PopChar wird von \#TComboBox\# fÅr das Zeichen benutzt,
              mit dem das Popup-MenÅ geîffnet werden kann. Atari
              hat dafÅr #240 vorgeschlagen; durchgesetzt hat sich
              aber #2 (Pfeil nach unten), was deshalb auch
              default ist.

Querverweise  \#TApplication\#

\end


screen("TApplication.FirstInstance":sensitive,"FirstInstance":sensitive)
TApplication.FirstInstance (Feld)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   FirstInstance: boolean;  (nur lesen)

Beschreibung  Zeigt mit true an, daû diese Instanz des Programms
              die erste im Speicher war; wenn also MYTEST.ACC im
              Bootlaufwerk installiert ist und auf dem Desktop
              noch MYTEST.PRG gestartet wird, ist nur bei dem
              Accessory FirstInstance auf true gesetzt.
              Nur bei der ersten Instanz eines Programms wird
              \#TApplication.InitApplication\# aufgerufen, wo dann
              grundlegende Initialisierungen durchgefÅhrt werden
              kînnen. Alle anderen Einstellungen, die jede In-
              stanz fÅr sich benîtigt, mÅssen daher in der immer
              aufgerufenen \#TApplication.InitInstance\#-Methode
              vorgenommen werden.

Querverweise  \#TApplication\#  \#TApplication.GetCurrInstance\#

\end


screen("TApplication.GDOSActive":sensitive,"GDOSActive":sensitive)
TApplication.GDOSActive (Feld)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   GDOSActive: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf true gesetzt, wenn
              irgendeine GDOS-Erweiterung (NVDI, AMCGDOS etc.)
              installiert ist, d.h. wenn u.a. die erweiterten
              Routinen fÅr Bitmap-Fonts vorhanden sind.

Querverweise  \#TApplication\#  \#TApplication.SpeedoActive\#

\end


screen("TApplication.FPUAvailable":sensitive,"FPUAvailable":sensitive)
TApplication.FPUAvailable (Feld)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   FPUAvailable: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf true gesetzt, wenn
              ein mathematischer Coprozessor vorhanden ist. DafÅr
              werden ein evtl. vorhandener _FPU-Cookie und die
              Variable \#Test68881\# aus der System-Unit ausgewertet.
              Die Art der FPU (68881/68882) ist nicht festgelegt.

Querverweise  \#TApplication\#

\end


screen("TApplication.OSBAvailable":sensitive,"OSBAvailable":sensitive)
TApplication.OSBAvailable (Feld)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   OSBAvailable: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf true gesetzt, wenn
              das VDI Offscreen-Bitmaps unterstÅtzt. Das ist z.B.
              bei NVDI ab Version 2.5 der Fall (sowie beim VDI-
              Enhancer-Patch).

Querverweise  \#TApplication\#

\end


screen("TApplication.Icon":sensitive)
TApplication.Icon (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Icon: PIcon;  (nur lesen)

Beschreibung  EnthÑlt einen Zeiger auf ein \#TIcon\#-Objekt, wenn
              der Applikation ein Icon mit \#TApplication.LoadIcon\#
              zugewiesen wurde und die Applikation gerade ikoni-
              fiziert ist.
              Wird von \#TApplication.Init\# auf \#nil\# gesetzt.

Querverweise  \#TApplication\#

\end


screen("TApplication.IsQSBUsed":sensitive,"IsQSBUsed":sensitive)
TApplication.IsQSBUsed (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   IsQSBUsed: boolean;

Beschreibung  Ist dieses Feld true, wird der AES-"Quarter Screen
              Buffer" zur Zeit intern von ObjectGEM belegt, d.h.
              die Applikation darf ihn unter gar keinen UmstÑnden
              anderweitig verwenden. Zur Verwendung des Puffers
              muû man folgendermaûen vorgehen:

              \#wind_update\#(\#BEG_UPDATE\#);
              if Application^.IsQSBUsed then
                { Speicher anders anfordern, z.B. mit getmem }
              else
                begin
                	\#GetQSB\#(p,len);
                	if (p<>nil) and (len>=benoetigte_groesse) then
                	  begin
                	    Application^.IsQSBUsed:=true;
                	    { hier kann der Puffer nun benutzt werden;
                	      es kînnen auch ObjectGEM-Routinen aufge-
                	      rufen werden, da diese die Belegung des
                	      Puffers beachten }
                	    Application^.IsQSBUsed:=false
                	  end
                	else
                	  { Speicher anders anfordern }
                end;
              wind_update(\#END_UPDATE\#);

Querverweise  \#TApplication\#

\end


screen("TApplication.MainWindow":sensitive,"MainWindow":sensitive)
TApplication.MainWindow (Feld)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MainWindow: \#PWindow\#;  (nur lesen)

Beschreibung  MainWindow ist die Liste der dem Applikations-
              objekt untergeordneten Fenster. Das Feld wird mit
              \#nil\# initialisiert, und jedes Fenster klinkt sich
              bei dessen Initialisierung hier ein; das "Haupt-
              fenster" der Application sollte dies normaler-
              weise in \#TApplication.InitMainWindow\# tun.
              Mit den Routinen \#TApplication.FirstWndThat\# und
              \#TApplication.ForEachWnd\# kann man diese Liste
              recht einfach durchlaufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.menuID":sensitive)
TApplication.menuID (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   menuID: integer;  (nur lesen)

Beschreibung  Wird das Programm als Accessory oder unter \#MultiTOS\#
              gestartet, trÑgt es sich mit \#menu_register\#() im
              "Desk"-MenÅ ein. Die dort zurÅckgelieferte Kennung
              wird in menuID eingetragen. -1 bedeutet, daû ein
              Fehler aufgetreten ist, was bei einem Accessory
              zum automatischen Programmabbruch fÅhrt.
              menuID wird normalerweise nur intern verwendet
              (z.B. von \#TApplication.ACOpen\#).

Querverweise  \#TApplication\#

\end


screen("TApplication.MenuTree":sensitive)
TApplication.MenuTree (Feld)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MenuTree: \#PTree\#;  (nur lesen)

Beschreibung  Zeigt auf den Objektbaum des Dropdown-MenÅs,
              wenn der Applikation ein solches mittels
              \#TApplication.LoadMenu\# zugewiesen wurde.

Querverweise  \#TApplication\#

\end


screen("TApplication.MessageBLen":sensitive,"MessageBLen":sensitive)
TApplication.MessageBLen (Feld)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MessageBLen: integer;  (nur lesen)

Beschreibung  Gibt die LÑnge in Bytes einer erweiterten GEM-
              Message an. Null bedeutet, daû die aktuelle
              Nachricht eine "normale" LÑnge von 16 Bytes
              hat (bzw. daû gar keine Nachricht vorliegt).
              Der Wert wird zusammen mit \#MessageBuffer\# von
              \#TApplication.MUMesag\# gesetzt.

Querverweise  \#TApplication\#

\end


screen("TApplication.MessageBuffer":sensitive,"MessageBuffer":sensitive)
TApplication.MessageBuffer (Feld)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MessageBuffer: pointer;  (nur lesen)

Beschreibung  Zeigt auf einen Puffer, in dem eine erweiterte
              GEM-Nachricht mit der LÑnge \#MessageBLen\# steht.
              \#nil\# bedeutet, daû keine erweiterte Message vor-
              liegt. Der Puffer wird automatisch am Anfang von
              \#TApplication.MUMesag\# angelegt und mit \#appl_read\#
              gefÅllt, wenn eine erweiterte Nachricht erkannt
              wird. Ein evtl. schon vorhandener Puffer wird in
              diesem Fall wieder freigegeben.
              Alle Standard-Nachrichten haben eine normale
              LÑnge von 16 Bytes, sind also _nicht_ erweitert.
              Die Auswertung einer erweiterten Nachricht sollte
              in \#TApplication.HandleMesag\# oder in der Methode
              \link("TEvent.TestMessage")TestMessage\# eines abgeleiteten \#TEvent\#-Objektes
              erfolgen.

Querverweise  \#TApplication\#

\end


screen("TApplication.MetaDOS":sensitive,"MetaDOS":sensitive,
       "PMetaInfo":sensitive,"TMetaInfo":sensitive,"Drives":sensitive,
       "TMetaInfo.Version":sensitive,"TMetaInfo.Drives":sensitive)
TApplication.MetaDOS (Feld)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MetaDOS: PMetaInfo;  (nur lesen)

Beschreibung  Wenn MetaDOS \#nil\# ist, ist kein Meta-DOS installiert.
              Ansonsten zeigt das Feld auf folgende Struktur:

								PMetaInfo = ^TMetaInfo;
								TMetaInfo = record
									Version: string;
									Drives : longint
								end;

              Version bezeichnet den Namen und die Versionsnummer
              des verwendeten Meta-DOS. Drives enthÑlt eine Bitmap
              der Meta-DOS-Laufwerke (A=0, B=1 etc.).
              Wird von \#TApplication.Init\# gesetzt.

Querverweise  \#TApplication\#  \#Metainit\#

\end


screen("TApplication.MiNTActive":sensitive,"MiNTActive":sensitive)
TApplication.MiNTActive (Feld)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MiNTActive: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf true gesetzt, wenn
              \#MiNTVersion\# einen Wert grîûer Null zurÅckgibt,
              d.h. wenn die Multitasking-Erweiterung MiNT
              installiert ist.
              GEM-Programme sind allerdings normalerweise
              darauf angewiesen, daû auch \#MultiTOS\# vorhanden
              ist.

Querverweise  \#TApplication\#

\end


screen("TApplication.MultiTOS":sensitive,"MultiTOS":sensitive)
TApplication.MultiTOS (Feld)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MultiTOS: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.InitGEM\# auf true gesetzt,
              wenn das Multitasking-Betriebssystem MultiTOS
              installiert ist.
              Wenn das Programm allerdings nur die Datei-
              funktionen einer Multitasking-Umgebung benîtigt,
              kann auch \#MiNTActive\# ausgewertet werden.

Querverweise  \#TApplication\#  \#TApplication.Multitasking\#

\end


screen("TApplication.Multitasking":sensitive,"Multitasking":sensitive)
TApplication.Multitasking (Feld)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Multitasking: boolean;  (nur lesen)

Beschreibung  Gibt an, ob das AES mehrere Applikationen gleich-
              zeitig (und vor allem gleichberechtigt) ausfÅhren
              kann.
              Die Anzahl dieser Applikationen betrÑgt mind. 2,
              Åber Besonderheiten des Multitasking-Betriebs-
              systems ist hiermit _nichts_ gesagt!

Querverweise  \#TApplication\#  \#TApplication.MultiTOS\#

\end


screen("TApplication.MemoryProtection":sensitive,"MemoryProtection":sensitive)
TApplication.MemoryProtection (Feld)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   MemoryProtection: boolean;  (nur lesen)

Beschreibung  Wir von \#TApplication.Init\# auf true gesetzt, wenn
              \#Mxalloc\# vorhanden ist und auch mit den Memory-
              Protection-Flags aufgerufen werden darf.
              Dieses Flag sagt nichts Åber das Vorhandensein von
              Memory Protection aus, man kann sich lediglich
              sicher sein, daû dann ein Aufruf von Mxalloc
              keine Bomben produziert!
              Im Moment wird dafÅr nur die Anwesenheit von \link("MiNTActive")MiNT\#
              getestet, da z.Z. keine weiteren Testmîglichkeiten
              bestehen. SpÑter wird auch Mag!C berÅcksichtigt.

Querverweise  \#TApplication\#

\end


screen("TApplication.RscPtr":sensitive,"RscPtr":sensitive)
TApplication.RscPtr (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   RscPtr: \#PRsFile\#;  (nur lesen)

Beschreibung  Zeigt auf die sich im Speicher befindliche Re-
              source-Datei des Programms, wenn eine solche
              mittels \#TApplication.LoadResource\# geladen bzw.
              mit \#TApplication.InitResource\# zugewiesen wurde.
              Normalerweise benîtigt man diesen Pointer _nicht_.

Querverweise  \#TApplication\#

\end


screen("TApplication.SpeedoActive":sensitive,"SpeedoActive":sensitive)
TApplication.SpeedoActive (Feld)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   SpeedoActive: boolean;  (nur lesen)

Beschreibung  Wird von \#TApplication.Init\# auf true gesetzt, wenn
              SpeedoGDOS installiert ist, d.h. wenn das Programm
              auf Vektorfonts zurÅckgreifen kann.
              Falls das (nie ausgelieferte) FSM-GDOS installiert
              ist, wird _false_ zurÅckgegeben.

Querverweise  \#TApplication\#  \#TApplication.GDOSActive\#

\end


screen("TApplication.Status":sensitive)
TApplication.Status (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Status: integer;

Beschreibung  EnthÑlt den Fehler-Status der Applikation. \#em_OK\#
              (bzw. irgendein nichtnegativer Wert) bedeutet, daû
              kein Fehler aufgetreten ist.
              \#TApplication.MessageLoop\# wird nur betreten, wenn
              Status grîûer gleich em_OK ist, und wieder verlas-
              sen, sobald Status einen Wert kleiner em_OK ent-
              hÑlt. Damit das Programm nicht auch bei evtl.
              behebbaren Fehlern abbricht, kann die Methode
              \#TApplication.HandleError\# Åberschrieben werden.

Querverweise  \#TApplication\#  \#em_XXXX-Konstanten\#

\end


screen("TApplication.vdiHandle":sensitive)
TApplication.vdiHandle (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   vdiHandle: integer;  (nur lesen)

Beschreibung  EnthÑlt das VDI-Handle der Applikation, das von
              \#TApplication.InitGEM\# mit \#v_opnvwk\# ermittelt wird.
              Mit diesem Handle kann das Programm korrekte
              Grafik-Ausgaben machen.
              Ein Wert kleiner Null signalisiert einen Fehler,
              das Programm wird in diesem Fall automatisch
              beendet.
              \#TWindow\#-Objekte besitzen normalerweise eine
              eigene VDI-Workstation im Feld \#TWindow.vdiHandle\#!

Querverweise  \#TApplication\#

\end


screen("TApplication.workIn":sensitive)
TApplication.workIn (Feld)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   workIn: \#workin_ARRAY\#;

Beschreibung  Dieses Array wird von \#TApplication.InitGEM\# zum
              ôffnen der VDI-Workstation benîtigt. Danach kann
              es fÅr eigene Zwecke verwendet werden.

Querverweise  \#TApplication\#  \#TApplication.workOut\#

\end


screen("TApplication.workOut":sensitive)
TApplication.workOut (Feld)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   workOut: \#workout_ARRAY\#;

Beschreibung  Dieses Array wird von \#TApplication.InitGEM\# fÅr die
              RÅckgabewerte von \#v_opnvwk\# benîtigt. Danach kann es
              fÅr eigene Zwecke verwendet werden, da alle wich-
              tigen Werte von \#TApplication.Init\# anderweitig
              gespeichert werden.

Querverweise  \#TApplication\#  \#TApplication.workIn\#

\end


screen("TApplication.Name":sensitive)
TApplication.Name (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Name: \#PString\#;  (nur lesen)

Beschreibung  EnthÑlt den an \#TApplication.Init\# Åbergebenen Namen
              der Applikation, der u.a. zur genauen Identifikation
              verwendet wird.
              Auûerdem verwenden Accessories und Programme unter
              \#MultiTOS\# max. 17 Zeichen dieses Namens als MenÅ-
              eintrag (die benîtigten Leerzeichen werden auto-
              matisch eingefÅgt!).

Querverweise  \#TApplication\#

\end


screen("TApplication.XAcc":sensitive,"XAcc":sensitive,"XAcc.Version":sensitive,
       "XAcc.MsgGroups":sensitive,"XAcc.AppTypeMR":sensitive,"XAcc.AppTypeHR":sensitive,
       "XAcc.ExtFeatures":sensitive,"XAcc.GenericName":sensitive,"XAcc.Name":sensitive,
       "XAcc.apID":sensitive,"XAcc.menuID":sensitive,"XAcc.pXDSC":sensitive,
       "XAcc.Protocol":sensitive,"XAcc.AVSrvMsg":sensitive,"XAcc.AVAccMsg":sensitive)
TApplication.XAcc (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XAcc: \#TXAccAttr\#;  (nur lesen)

Beschreibung  XAcc beschreibt die XAcc-Parameter der eigenen
              Applikation, die zum Versenden an andere Appli-
              kationen benîtigt werden.
              Der Record wird in \#TApplication.Init\# mittels
              \#TApplication.GetXAccAttr\# eingelesen.

Querverweise  \#TApplication\#

\end


screen("TApplication.AVServer":sensitive,"AVServer":sensitive)
TApplication.AVServer (Feld)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   AVServer: integer;  (nur lesen)

Beschreibung  EnthÑlt die AES-ID des AV-Servers, wenn ein solcher
              existiert, ansonsten \#id_No\#. Unter "normalem" TOS
              kann nur das Hauptprogramm AV-Server sein.
              \#TApplication.VAProtoStatus\# ermittelt AVServer,
              unter \#MultiTOS\# wird dies von \#TApplication.Init\#
              erledigt: ZunÑchst wird nach dem Prozeû "GEMINI"
              gesucht, dann nach dem Prozeû "AVSERVER". Wenn dies
              nicht zum Erfolg gefÅhrt hat, wird schlieûlich noch
              die Environment-Variable AVSERVER ausgewertet.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.Clipboard":sensitive)
TApplication.Clipboard (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Clipboard: \#PClipboard\#;  (nur lesen)

Beschreibung  Zeigt auf das mit der Applikation verknÅpfte
              TClipboard-Objekt (oder ist \#nil\#, wenn ein solches
              nicht existiert).
              Wird mit \#TApplication.GetClipboard\# gesetzt.

Querverweise  \#TApplication\#

\end


screen("TApplication.XAccList":sensitive,"XAccList":sensitive)
TApplication.XAccList (Feld)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   XAccList: \#PCollection\#;  (nur lesen)

Beschreibung  XAccList enthÑlt alle angemeldeten XAcc-Applikati-
              onen in Form von \#TXAccAttr\#-Records. Das Feld wird
              von \#TApplication.Init\# zunÑchst auf \#nil\# gesetzt
              und dann von \#TApplication.XAccInsert\# verwaltet.
              Beim Verlassen des Programms wird an alle in
              dieser Liste eingetragenen Applikationen eine
              \#ACC_EXIT\#-Message geschickt.
              WICHTIG: Auch wÑhrend des Programmablaufs kann
              XAccList \#nil\# sein, falls z.B. alle anderen XAcc-
              Programme terminiert haben!

Querverweise  \#TApplication.FindApplication\#  \#TApplication\#
              \#TApplication.Broadcast\#

\end


screen("TApplication.Init":sensitive)
TApplication.Init (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AName: string);

Beschreibung  Ruft den Vorfahren \#TEventObject.Init\# auf. Danach
              wird \#Application\# auf @\#self\# gesetzt und - wenn das
              Programm nicht als Accessory gestartet wurde - der
              Datei-öbertragungs-Puffer auf \#apDTA\#. \link("TApplication.Name")Name\# wird auf
              AName gesetzt.
              Dann werden die Felder \#Attr.Country\#, \#FPUAvailable\#,
              \#OSBAvailable\#, \#SpeedoActive\# sowie \#MiNTActive\# ermit-
              telt, \#MetaDOS\# wird ausgefÅllt und \#InitGEM\# auf-
              gerufen.
              Ist \#Status\# an dieser Stelle grîûer gleich \#em_OK\#,
              wird die Initialisierung fortgesetzt, und fÅr alle
              weiteren Aktionen in dieser Methode wird eine
              \#wind_update\#-Schachtelung vorgenommen (wichtig fÅr
              Accessories).
              Dann wird \#XAcc\# mittels \#GetXAccAttr\# eingelesen.
              \link("TApplication.Attr")Attr\# wird komplett ausgefÅllt, \#apPath\#, \#apName\# und
              \#GDOSActive\# werden ermittelt und \link("TApplication.GetClipboard")GetClipboard\# sowie
              \link("TApplication.SetupVDI")SetupVDI\# aufgerufen.
              Ist Status immer noch grîûer gleich em_OK, wird
              schlieûlich \#InitInstance\# aufgerufen. Handelt es
              sich allerdings um die erste Instanz des Programms
              im Speicher, wird vorher noch \#InitApplication\#
              aufgerufen.
              Unter \#MultiTOS\# wird schlieûlich mit \#Broadcast\# die
              \#ACC_ID\#-Message an alle AES-Prozesse geschickt,
              auûerdem wird \#AVServer\# ermittelt.

Querverweise  \#TApplication\#

\end


screen("TApplication.Done":sensitive)
TApplication.Done (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Alle Fenster der \#MainWindow\#-Liste werden freige-
              geben. Wenn die \#MessageLoop\#-Schleife mind. einmal
              durchlaufen wurde, wird dann dem Programm mit der
              Methode \#TApplication.Terminate\# eine Mîglichkeit
              geboten, evtl. Deinstallationen vorzunehmen. Dann
              wird \#ClosePrivateProfile\# aufgerufen, damit evtl.
              vorgenommene énderungen noch gespeichert werden.
              Danach wird an alle in der \#XAccList\# eingetragenen
              Programme eine \#ACC_EXIT\#-Message geschickt.
              Wenn das Programm als Accessory gestartet wurde
              und \#MultiTOS\# _nicht_ installiert ist, verfÑllt
              das Programm an dieser Stelle in einer Endlos-
              schleife mittels \#evnt_timer\#, ansonsten werden
              \#TApplication.ExitGEM\# und \#TEventObject.Done\#
              aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.ACClose":sensitive,"ACClose":sensitive)
TApplication.ACClose (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ACClose(mID,Why: integer): integer;
                                                     virtual;

Beschreibung  Wird aufgerufen, wenn das Accessory vom Betriebs-
              system geschlossen wird.
              Wenn mID mit \link("TApplication.menuID")menuID\# Åbereinstimmt (sollte immer
              der Fall sein, da ObjectGEM-Programme normaler-
              weise nur max. einen MenÅeintrag belegen), werden
              alle Fenster aus der \#MainWindow\#-Liste mittels
              \#TWindow.RawDestroy\# freigegeben.
              Mit dem RÅckgabewert kann die Methode melden,
              ob beim Schlieûen des Accessories irgend etwas
              schiefgelaufen ist (Wert<>0), standardmÑûig wird
              aber \#em_OK\# zurÅckgegeben.
              In Why wird unter \#MultiTOS\# der Grund fÅr das
              Schlieûen des Accessories angegeben; unter alten
              TOS-Versionen Åbergibt \#TApplication.MUMesag\# hier
              einfach \#AC_CLOSE\#.
              Zum Schluû wird (unter einem Singletasking-TOS) die
              \#XAccList\# freigegeben, \#AVServer\# auf \#id_No\# gesetzt
              und an das Hauptprogramm eine \#ACC_ID\#- und eine
              \#AV_PROTOKOLL\#-Message geschickt.

Querverweise  \#TApplication\#  \#TApplication.ACOpen\#

\end


screen("TApplication.ACOpen":sensitive,"ACOpen":sensitive)
TApplication.ACOpen (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ACOpen(mID: integer); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn der
              Benutzer den Accessory-Eintrag im Desk-MenÅ anwÑhlt
              und das Accessory damit îffnet.
              Wenn mID mit \link("TApplication.menuID")menuID\# Åbereinstimmt (sollte immer der
              Fall sein), werden alle bereits erzeugten Fenster
              geîffnet; Fenster, die noch nicht erzeugt sind, bei
              denen aber das Flag \#cs_CreateOnAccOpen\# gesetzt ist,
              werden erzeugt _und_ geîffnet. Anschlieûend werden
              alle _modalen_ Dialoge nacheinander mittels
              \#TDialog.Execute\# abgearbeitet.

Querverweise  \#TApplication\#  \#TApplication.ACClose\#

\end


screen("TApplication.Alert":sensitive,"Alert":sensitive)
TApplication.Alert (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Alert(AParent: PWindow; DefBtn: integer;
                Sign: longint; Txt,Btn: string): integer; virtual;

Beschreibung  Ersetzt den AES-Aufruf \#form_alert\#() durch eine
              mÑchtigere Routine. ObjectGEM-Alertboxen sind
              Tastatur-bedienbar, mit der Maus verschiebbar, und
              sie verwenden nach Mîglichkeit (ein-)farbige Icons.
              In AParent kann der Pointer auf das Fenster Åber-
              geben werden, zu dem die Alertbox gehîrt (sonst
              \#nil\#). Die Box wird dann automatisch relativ zu
              diesem Fenster zentriert.
              DefBtn gibt die Nummer (1,2,...) des Buttons an,
              der mit <Return> angewÑhlt werden kann. Null be-
              deutet, daû es keinen solchen Default-Button gibt.
              Sign bestimmt das Icon, das in der Box verwendet
              wird (NO_ICON=0, NOTE=1, WAIT=2, STOP=3). Wird hier
              ein Wert grîûer $7fff Åbergeben, wird er als Pointer
              auf eine BITBLK-Struktur aufgefaût, d.h. hiermit
              kînnen eigene Icons benutzt werden. WICHTIG:
              Selbstdefinierte Icons mÅssen im gerÑtespezifischen
              Format (\#FF_DEVSPEC\#) vorliegen! Wenn sich diese in
              der Resourcedatei des Programms befinden, nimmt
              ObjectGEM diese Anpassung allerdings automatisch
              in \link("InitResource")Init\#-/\#LoadResource\# vor.
              Txt gibt den Text der Alertbox an. Die einzelnen
              Zeilen werden durch '|' getrennt. Theoretisch
              kînnen bis zu 18 Zeilen mit bis zu 255 Zeichen
              angezeigt werden, allerdings wird ein automatischer
              Zeilenumbruch durchgefÅhrt, wenn die Alertbox fÅr
              die aktuelle Auflîsung sonst zu breit wÅrde (aus
              "Ñsthetischen" GrÅnden ist auûerdem die max. LÑnge
              einer Zeile auf 50 Zeichen beschrÑnkt).
              In Btn schlieûlich werden die durch '|' getrennten
              Buttons Åbergeben (max. 12, wesentlich besser ist
              aber eine Zahl<=4). Die Hotkeys werden - wie bei
              den Dialogelementen - mit einem vorangestellten
              '&' markiert.
              Die RÅckgabe ist \#id_No\#, wenn die Alertbox aus
              irgendeinem Grund nicht ausgefÅhrt werden konnte.
              Ein Wert grîûer Null gibt die Nummer des ange-
              wÑhlten Buttons an.

Querverweise  \#TApplication\#

\end


screen("TApplication.APDragDrop":sensitive,"APDragDrop":sensitive)
TApplication.APDragDrop (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure APDragDrop(PipeID,OrgID,WindID,mX,
                                    mY,KStat: integer); virtual;

Beschreibung  Verteilt eine Drag&Drop-Anfrage an das zustÑndige
              Fenster bzw. die Applikation.
              Wenn dem GEM-Handle WindID ein ObjectGEM-Fenster
              zugeordnet werden kann (das sollte immer der Fall
              sein), wird die entsprechende \#TWindow.WMDragDrop\#-
              Methode aufgerufen; ansonsten wird die Anfrage an
              \#TApplication.HandleDragDrop\# weitergeleitet.
              PipeID gibt die Nummer der Pipe an; aus dieser
              Nummer kann der zugehîrige Dateiname errechnet
              werden. OrgID ist die AES-Applikations-Kennung des
              anfragenden Programms, WindID ist die GEM-Kennung
              des Fensters, auf das gedroppt wurde. ObjectGEM
              wertet die Daten in dieser Methode allerdings
              bereits aus, so daû die aufgerufenen Methoden
              ein Handle der _geîffneten_ Pipe erhalten.
              mX, mY und KStat geben die Position der Maus und
              den Zustand der Umschalttasten beim Aufruf an.
              APDragDrop sorgt dafÅr, daû wÑhrend der in ihr
              stattfindenden Aktionen das MiNT-Signal \#SIGPIPE\#
              ignoriert wird, damit das Programm nicht fÑlsch-
              licherweise vom Betriebssystem beendet wird.
              WICHTIG: Innerhalb dieser Methode ist die von
              \#TApplication.MUMesag\# mit \#wind_update\# gesetzte
              Bildschirm-Sperre ausgeschaltet, um einen sonst
              mîglichen Deadlock zu verhindern.
              Wenn \#DDReadData\# oder \#DDReadArgs\# aufgerufen wurde
              und true zurÅckgegeben hat, wird - nachdem die
              Pipe geschlossen und der Bildschirm wieder blok-
              kiert wurde - \#DDFinished\# aufgerufen, wo man nun
              auf die gelesenenen Daten reagieren kann.

Querverweise  \#TApplication\#

\end


screen("TApplication.APTerm":sensitive,"APTerm":sensitive)
TApplication.APTerm (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function APTerm(Why: integer): integer; virtual;

Beschreibung  Diese Methode wird von \#TApplication.MUMesag\# aufge-
							rufen, um festzustellen, ob die Applikation (unter
							\#MultiTOS\#) fÅr einen Shutdown beendet werden kann.
							Wenn \#em_OK\# zurÅckgegeben wird, setzt MUMesag das
							Feld \link("TApplication.Status")Status\# auf \#em_Terminate\#, d.h. das Programm
							wird abgebrochen (ohne den Anwender zu fragen).
							Ansonsten wird dem Betriebssystem das Scheitern
							des Shutdowns gemeldet.
							StandardmÑûig macht APTerm nichts anderes, als
							em_OK zurÅckzugeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.At":sensitive)
TApplication.At (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function At(Index: integer): PWindow;

Beschreibung  Liefert einen Zeiger auf das Fenster mit der fort-
              laufenden Nummer Index in der \#MainWindow\#-Liste
              (begonnen wird bei Null).
              Wenn Index negativ oder MainWindow leer ist, wird
              \#nil\# zurÅckgegeben. Bei zu groûen Werten wird die
              Liste zyklisch durchlaufen.

Querverweise  \#TApplication\#  \#TApplication.IndexOf\#

\end


screen("TApplication.IndexOf":sensitive)
TApplication.IndexOf (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IndexOf(Item: PWindow): integer;

Beschreibung  Liefert die fortlaufende Nummer des Fensterobjekts,
              auf das Item zeigt, wenn dieses in der \#MainWindow\#-
              Liste vorkommt. Ansonsten wird -1 zurÅckgegeben.

Querverweise  \#TApplication\#  \#TApplication.At\#

\end


screen("TApplication.AutoFolder":sensitive,"AutoFolder":sensitive)
TApplication.AutoFolder (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function AutoFolder: boolean; virtual;

Beschreibung  Wird von \#TApplication.InitGEM\# aufgerufen, wenn das
              Programm aus dem AUTO-Ordner heraus aufgerufen
              wurde; hier kînnen dann also evtl. Systeminitiali-
              sierungen vorgenommen werden. Ist die RÅckgabe
              false, wird eine entsprechende Fehlermeldung aus-
              gegeben. Anschlieûend wird das Programm auf jeden
              Fall beendet.
              StandardmÑûig wird false zurÅckgegeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.Cut":sensitive)
TApplication.Cut (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Cut; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<X>
              drÅckt. StandardmÑûig passiert hier nichts.

Querverweise  \#TApplication\#  \#TApplication.Copy\#  \#TApplication.Paste\#

\end


screen("TApplication.Delete":sensitive)
TApplication.Delete (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Delete; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Delete> drÅckt.
              StandardmÑûig passiert hier nichts.

Querverweise  \#TApplication\#  \#TApplication.Cut\#

\end


screen("TApplication.Copy":sensitive)
TApplication.Copy (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Copy; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<C>
              drÅckt. StandardmÑûig passiert hier nichts.

Querverweise  \#TApplication\#  \#TApplication.Cut\#  \#TApplication.Paste\#

\end


screen("TApplication.Paste":sensitive)
TApplication.Paste (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paste; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<V>
              drÅckt. StandardmÑûig passiert hier nichts.

Querverweise  \#TApplication\#  \#TApplication.Cut\#  \#TApplication.Copy\#

\end


screen("TApplication.SelectAll":sensitive)
TApplication.SelectAll (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SelectAll; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<A>
              drÅckt. Im Moment werden dann alle Icons des
              Desktops mit \#TApplication.IconSelect\#(true,id_No)
              angewÑhlt.
              HINWEIS: Da z.Z. noch kein TDesktop-Objekt exi-
              stiert, kann diese Methode auch noch nicht sinn-
              voll eingesetzt werden.

Querverweise  \#TApplication\#

\end


screen("TApplication.SendWndMessage":sensitive,"SendWndMessage":sensitive)
TApplication.SendWndMessage (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function SendWndMessage(gHnd: integer;
                         Msg: pointer; sID,Icn: boolean): boolean;
                                                         virtual;

Beschreibung  Schickt die 16 Bytes lange GEM-Message Msg an die
              Applikation, die das Fenster mit dem AES-Handle
              gHnd besitzt. Wird in gHnd ein Wert kleiner gleich
              Null Åbergeben, wird die Nachricht an die Appli-
              kation des Top-Fensters verschickt.
              Msg^[2] wird immer auf Null gesetzt, Msg^[3] auf
              gHnd (bzw. das Handle des Top-Fensters). Ist sID
              true, wird Msg^[1] auf \link("TApplication.apID")apID\# gesetzt.
              In Icn kann Åbergeben werden, ob die Message auch
              an ein ikonifiziertes Fenster geschickt werden
              soll (true). Anhand der RÅckgabe kann man fest-
              stellen, ob die Message verschickt wurde (true)
              oder nicht (false).
              Wird vor allem fÅr das \link("Protokoll-Messages")MenÅ-Protokoll\# benîtigt.

Querverweise  \#TApplication\#  \#TApplication.Broadcast\#

\end


screen("TApplication.Broadcast":sensitive,"Broadcast":sensitive)
TApplication.Broadcast (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Broadcast(Msg: pointer; sID: boolean);
                                                         virtual;

Beschreibung  Verschickt eine 16 Bytes lange GEM-Message an alle
              erreichbaren AES-Prozesse. Nach Mîglichkeit wird
              dazu ein AES-Broadcast per \#shel_write\#(7,...) ver-
              wendet, alternativ wird auf \#appl_search\# zurÅckge-
              griffen. Ist beides nicht vorhanden, wird die
              \#XAccList\# benutzt.
              Msg^[2] wird immer auf Null gesetzt. Ist sID true,
              wird Msg^[1] auf \link("TApplication.apID")apID\# gesetzt.

Querverweise  \#TApplication\#  \#Pipearray\#

\end


screen("TApplication.BubbleHelp":sensitive,"BubbleHelp":sensitive)
TApplication.BubbleHelp (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure BubbleHelp(mX,mY: integer; Delay: word;
                                           Hlp: string); virtual;

Beschreibung  Zeichnet an der Position mX,mY eine "BubbleHelp"-
              Sprechblase, in der der Hilfstext Hlp ausgegeben
              wird.
              Vor dem Verlassen der Hilfe wird mind. Delay
              Millisekunden lang gewartet (ObjectGEM verwendet
              als Standardwert 500), danach wird die Hilfe bei
              Mausklick oder Tastendruck verlassen.
              Der Text in Hlp kann mit '|' auf mehrere Zeilen
              verteilt werden, ansonsten wird aber auch ein
              automatischer Zeilenumbruch abhÑngig von der
              aktuellen Auflîsung durchgefÅhrt.

Querverweise  \link("bhelp")"BubbleHelp"-Hilfesystem\#  \#TDialog.GetKBHandler\#
              \#TApplication\#

\end


screen("TApplication.CanClose":sensitive)
TApplication.CanClose (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function CanClose: boolean; virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
							das Programm verlassen werden soll (hervorgerufen
							z.B. durch \#Quit\#). CanClose gibt true zurÅck, falls
							ein Beenden mîglich ist.
							Wurde die Applikation als Accessory unter einem
							"normalen" (nicht-multitasking) TOS gestartet, ist
							die RÅckgabe immer false. Ansonsten werden alle
							offenen Fenster abgefragt; nur wenn _alle_ Fenster
							bei ihrer \link("TWindow.CanClose")CanClose\#-Methode true liefern, gibt auch
							TApplication.CanClose true zurÅck.

Querverweise  \#TApplication\#

\end


screen("TApplication.SCChanged":sensitive,"SCChanged":sensitive)
TApplication.SCChanged (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SCChanged(OrgID: integer; Bits: word;
                                          Ext: string); virtual;

Beschreibung  Die Message \#SC_CHANGED\# sollte von einer Applikation
              an alle anderen im System erreichbaren Applikationen
              verschickt werden, nachdem am Klemmbrett énderungen
              vorgenommen wurden.
              In OrgID erhÑlt man die AES-Kennung der verÑndernden
              Applikation, in Bits eine Bitmap der auf dem Klemm-
              brett gespeicherten Dateitypen und in Ext die Datei-
              Erweiterung der "besten" vorhandenen Datei (z.B.
              '.RTF'), damit beim Lesen mîglichst wenig Informa-
              tion verloren geht.
              Durch Auswertung von Bits braucht man das Klemm-
              brett nur auswerten, wenn die angegebenen Datei-
              typen Åberhaupt Verwendung finden kînnen.

Querverweise  \#TApplication\#  \#SCF_XXXX-Konstanten\#

\end


screen("TApplication.CHExit":sensitive,"CHExit":sensitive)
TApplication.CHExit (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure CHExit(ChID,ChRet: integer); virtual;

Beschreibung  Wird aufgerufen, wenn die Applikation einen Child-
							Prozess gestartet hat und dieser wieder beendet
							wurde (unter \#MultiTOS\#).
							In ChID wird die AES-Kennung des Prozesses und
							in ChRet der RÅckgabecode des Programms Åbergeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.ChkError":sensitive,"ChkError":sensitive)
TApplication.ChkError (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ChkError: integer; virtual;

Beschreibung  Liefert den ObjectGEM-Fehlerstatus zurÅck; eine
							entsprechende Fehlermeldung kann mit der Methode
							\#TApplication.Error\# angezeigt werden.
							Wichtig: Diese Methode liefert _nicht_ den Inhalt
							des \link("TApplication.Status")Status\#-Feldes zurÅck, in dem nur die schwer-
							wiegenden Fehler registriert werden; vielmehr
							kann man mit dieser Methode alle mîglichen
							ObjectGEM-Fehler abfragen.
							Nach der Abfrage wird der Zustand wieder auf
							\#em_OK\# zurÅckgesetzt.

Querverweise  \#TApplication\#  \#em_XXXX-Konstanten\#

\end


screen("TApplication.ChkSpeedoError":sensitive,"ChkSpeedoError":sensitive)
TApplication.ChkSpeedoError (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ChkSpeedoError: integer; virtual;

Beschreibung  Wenn SpeedoGDOS installiert ist und bei der Ver-
              wendung ein Fehler auftritt, wird dieser nicht wie
              Åblich direkt auf den Bildschirm geschrieben.
              ObjectGEM fÑngt solche Fehlermeldungen nÑmlich ab
              und macht sie dem Programm mit dieser Methode zu-
              gÑnglich. Um ganz sicher zu gehen, sollte man
              theoretisch nach _jedem_ Speedo-Aufruf den Fehler-
              status abfragen... Nach dem Aufruf wird der Status
              wieder auf Null gesetzt.
              Folgende Fehler kînnen z.Z. auftreten:

								  0  kein Fehler aufgetreten
								  1  Nicht ausreichend Fontdaten geladen
								  3  UnzulÑssige Font-Spezifikation angefordert
								  4  Fontformat-Fehler
								  7  "Rules requested"
								  8  Fehler beim Lesen der Datei
								  9  Fehler beim ôffnen der Datei
								 10  Font nicht angegeben
								 11  Cache-Speicher voll
								 12  Zeichendaten nicht verfÅgbar
								 13  Track-Kerning-Daten nicht verfÅgbar
								 14  Paar-Kerning-Daten nicht verfÅgbar
								 -1  allgemeiner Speedo-Fehler

							SpeedoGDOS ab 5.0 liefert fÅr Type1-Fehlermeldungen
							Werte zwischen 4000 und 4056, fÅr TrueType-Fehler-
							meldungen Werte zwischen 4096 und 5632.

Querverweise  \#TApplication\#  \#TApplication.SpeedoActive\#

\end


screen("TApplication.DDGetPath":sensitive)
TApplication.DDGetPath (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDGetPath(WindID: integer): string;
                                                     virtual;

Beschreibung  Wird von \#TApplication.HandleDragDrop\# aufgerufen,
              wenn der Sender den Datentyp 'PATH' gewÑhlt hat,
              d.h. wenn er den Pfad der Applikation wissen
              mîchte.
              Im Moment wird hier ein Leerstring zurÅckgegeben,
              d.h. die Anfrage wird _abgewiesen_. Durch öber-
              schreiben dieser Methode kann aber ein beliebiger
              Pfad zurÅckgegeben werden.
              In WindID erhÑlt man die Kennung des Fensters, auf
              das gedroppt wurde (hier meist -1).

Querverweise  \#TApplication\#

\end


screen("TApplication.DDGetPreferredTypes":sensitive)
TApplication.DDGetPreferredTypes (Methode)           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDGetPreferredTypes
                              (WindID: integer): string; virtual;

Beschreibung  Liefert die Extensions der "bevorzugten" Dateien
              zurÅck. Es dÅrfen maximal 8 Extensions geliefert
              werden, bei weniger Zeichen wird mit Nullbytes auf-
              gefÅllt.
              StandardmÑûig wird ein Leerstring zurÅckgegeben,
              d.h. alle Dateitypen werden ausprobiert. Eine
              genauere RÅckgabe kînnte z.B. '.RTF.TXT.DOC'
              lauten.

Querverweise  \#TApplication\#

\end


screen("TApplication.DDHeaderReply":sensitive)
TApplication.DDHeaderReply (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDHeaderReply(dType,dName,fName: string;
                                  dSize: longint; OrgID,WindID,
                                  mX,mY,KStat: integer): byte;
                                                         virtual;

Beschreibung  Wird von \#TApplication.HandleDragDrop\# aufgerufen,
              um dem Sender auf den vorgeschlagenen Dateityp
              zu antworten.
              In dType erhÑlt man die Extension des vorgeschla-
              genen Dateityps (z.B. '.TXT'), in fName den ent-
              sprechenden Dateinamen (_ohne_ Pfadangabe). In
              dName kann noch optional ein Name fÅr die Daten
              Åbergeben werden, der vom EmpfÑnger z.B. zum
              Beschriften eines Icons benutzt werden kann.
              dSize gibt die LÑnge der zu Åbertragenden Datei
              an. WindID bezeichnet die Fenster-Kennung (meist
              -1), OrgID die AES-Kennung des Senders, mX und mY
              die Position der Maus und KStat den Zustand der
              Umschalttasten beim Aufruf.
              StandardmÑûig wird DD_NAK zurÅckgegeben, folgende
              Werte sind z.Z. definiert:

                \#DD_OK\#         alles OK; die Daten werden dann mit
                              \#TApplication.DDReadData\# eingelesen
                \#DD_NAK\#        Fehler, Abbruch der Kommunikation
                \#DD_EXT\#        der Sender soll einen anderen
                              Dateityp vorschlagen
                \#DD_LEN\#        der EmpfÑnger kann nicht so viele
                              Daten gleichzeitig verarbeiten
                \#DD_TRASH\#      Datei wurde auf den MÅlleimer ge-
                              zogen; der Sender muû entsprechend
                              reagieren
                \#DD_PRINTER\#    Datei wurde auf das Drucker-Icon
                              gezogen; der Sender muû entsprechend
                              reagieren
                \#DD_CLIPBOARD\#  Datei wurde auf das Klemmbrett-Icon
                              gezogen; der Sender muû entsprechend
                              reagieren

Querverweise  \#TApplication\#

\end


screen("TApplication.DDReadData":sensitive)
TApplication.DDReadData (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDReadData(dType,dName,fName: string;
                                   dSize: longint; PipeHnd,
                                   OrgID,WindID,mX,mY,
                                   KStat: integer): boolean;
                                                       virtual;

Beschreibung  Wird von \#TApplication.HandleDragDrop\# aufgerufen,
              wenn eine Drag&Drop-Anfrage positiv beantwortet
              werden konnte und nun die Daten eingelesen werden
              sollen.
              In dType erhÑlt man die Extension des vorgeschla-
              genen Dateityps (z.B. '.TXT'), in fName den ent-
              sprechenden Dateinamen (_ohne_ Pfadangabe). In
              dName kann noch optional ein Name fÅr die Daten
              Åbergeben werden, der vom EmpfÑnger z.B. zum
              Beschriften eines Icons benutzt werden kann.
              dSize gibt die LÑnge der zu Åbertragenden Datei
              an. WindID bezeichnet die Fenster-Kennung (meist
              -1), OrgID die AES-Kennung des Senders, mX und mY
              die Position der Maus und KStat den Zustand der
              Umschalttasten beim Aufruf.
              PipeHnd enthÑlt das Dateihandle der _geîffneten_
              Pipe, auf die nun mit \#Fread\# zugegriffen werden
              kann.
              Wenn die Daten eingelesen werden konnten, sollte
              true zurÅckgegeben werden, damit die Methode
              \link("TApplication.DDFinished")DDFinished\# aufgerufen wird.

Querverweise  \#TApplication\#

\end


screen("TApplication.DDReadArgs":sensitive)
TApplication.DDReadArgs (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function DDReadArgs(dSize: longint; PipeHnd,OrgID,
                           WindID,mX,mY,KStat: integer): boolean;
                                                         virtual;

Beschreibung  Wird von \#TApplication.HandleDragDrop\# aufgerufen,
              wenn der Sender den 'ARGS'-Datentyp, also eine
              Kommandozeile verschickt hat. In dieser Methode
              kann diese nun  (per \#Fread\#) eingelesen werden.
              Abschlieûend muû noch die geerbte Methode mit dem
              um die Anzahl gelesener Zeichen verminderten dSize
              aufgerufen werden, damit die Pipe vollstÑndig ge-
              leert wird.
              Wenn in der Kommandozeile mehrere Parameter Åber-
              geben werden, sind die einzelnen Parameter durch
              ein Leerzeichen getrennt. Wenn in einem Parameter
              ein Leerzeichen vorkommt, wird dieser Parameter
              in einfache AnfÅhrungszeichen gesetzt. AnfÅhrungs-
              zeichen innerhalb des Parameters werden dann ver-
              doppelt (z.B. "'Eric''s file'").
              Wenn die Daten eingelesen werden konnten, sollte
              true zurÅckgegeben werden, damit die Methode
              \link("TApplication.DDFinished")DDFinished\# aufgerufen wird.

Querverweise  \#TApplication\#

\end


screen("TApplication.DDFinished":sensitive)
TApplication.DDFinished (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DDFinished(OrgID,WindID,mX,mY,
                                     KStat: integer); virtual;

Beschreibung  Wird von \#TApplication.APDragDrop\# aufgerufen, wenn
              \link("TApplication.DDReadData")DDReadData\# oder \link("TApplication.DDReadArgs")DDReadArgs\# true zurÅckgegeben hat.
              Der Aufruf erfolgt nach dem Drag&Drop-Protokoll,
              man hat also wieder volle Kontrolle Åber den Bild-
              schirm.
              In dieser Methode sollten die Eingelesenen Daten
              ausgewertet werden (Anzeige etc.).

Querverweise  \#TApplication\#

\end


screen("TApplication.DeskRedraw":sensitive,"DeskRedraw":sensitive)
TApplication.DeskRedraw (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DeskRedraw; virtual;

Beschreibung  Zeichnet den Desktop (d.h. das Fenster mit der
              Kennung 0 bzw. \#DESK\#) neu. Wird von \#InstallDesktop\#
              und \#RemoveDesktop\# automatisch aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.DrawMenu":sensitive,"DrawMenu":sensitive)
TApplication.DrawMenu (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure DrawMenu; virtual;

Beschreibung  Zeichnet die Dropdown-MenÅleiste neu, wobei die
              Besonderheiten von \#MultiTOS\# beachtet werden.
              Wird von \#TApplication.LoadMenu\# aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.Error":sensitive)
TApplication.Error (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Error(ErrorCode: integer); virtual;

Beschreibung  Zeigt zu einer von \#TApplication.ChkError\# gelieferten
              Fehlernummer die passende Fehlermeldung in einer
              Alertbox an. Dabei wird die in \#Attr.Country\# ermit-
              telte Landessprache beachtet. Z.Z. werden \#FRG\# und
              \#SWG\# gesondert behandelt, ansonsten werden englische
              Texte angezeigt.
              \#TApplication.Status\# und der mit \#ChkError\# abzu-
              fragende Fehlercode werden gepuffert.

Querverweise  \#TApplication\#

\end


screen("TApplication.ExecDialog":sensitive,"ExecDialog":sensitive)
TApplication.ExecDialog (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ExecDialog(ADialog: PDialog): integer;
                                                        virtual;

Beschreibung  Diese Methode dient zur einfachen Behandlung von
              Dialogen. Aufgrund einiger EinschrÑnkungen sollten
              allerdings nach Mîglichkeit die entsprechenden
              \#TDialog\#-Methoden verwendet werden.
              In ADialog wird ein Pointer auf ein bereits initi-
              alisiertes TDialog-Objekt Åbergeben. Der Dialog
              wird automatisch _modal_ abgearbeitet und zum
              Parent-Objekt zentriert. WICHTIG: Das Dialog-
              objekt wird nach der Bearbeitung _freigegeben_!
              Ein positiver RÅckgabewert gibt den Index des
              Dialogelements an, mit dem der Dialog verlassen
              wurde; bei einem Fehler wird \#em_InvalidDialog\#
              zurÅckgegeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.ExitGEM":sensitive,"ExitGEM":sensitive)
TApplication.ExitGEM (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ExitGEM; virtual;

Beschreibung  Wird von \#TApplication.Done\# aufgerufen, um das
              Programm korrekt beim Betriebssystem abzumelden.
              ZunÑchst werden \#RemoveDesktop\#, \link("TApplication.FreeIcon")FreeIcon\#, \link("TApplication.FreeMenu")FreeMenu\#
              und \#FreeResource\# aufgerufen. Danach werden evtl.
              geladene GEM-Fonts freigegeben und die VDI-Work-
              station geschlossen. Zum Schluû wird \#appl_exit\#
              aufgerufen.

Querverweise  \#TApplication\#  \#TApplication.InitGEM\#

\end


screen("TApplication.FindApplication":sensitive,"FindApplication":sensitive)
TApplication.FindApplication (Methode)               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FindApplication(AName: string;
                                       AnID: integer;
                                var XAccAttr: \#TXAccAttr\#): boolean;
                                                          virtual;

Beschreibung  Sucht eine Applikation in der \#XAccList\#. Bei erfolg-
              reicher Suche wird true zurÅckgegeben und der in
              XAccAttr Åbergebene Record ausgefÅllt, ansonsten
              erhÑlt man false als RÅckgabe.
              Wenn AName nicht leer ist, wird der Name zur Suche
              verwendet (Achtung: Das ist der beim XAcc-Protokoll
              verwendete Name, der nicht mit dem Namen der Pro-
              grammdatei Åbereinstimmen muû!), ansonsten wird
              die AES-Kennung AnID verwendet.

Querverweise  \#TApplication\#  \#TApplication.FirstApplication\#

\end


screen("TApplication.FirstWndThat":sensitive)
TApplication.FirstWndThat (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstWndThat
                         (Test: \#PIterationFunc\#): PWindow;

Beschreibung  FirstWndThat ruft fÅr jedes in der \#MainWindow\#-Liste
              eingetragene Fenster die durch Test bestimmte boole-
              sche Funktion auf, bis Test true zurÅckgibt.
              FirstWndThat gibt dann den Zeiger auf das Fenster-
              objekt zurÅck, fÅr den Test true zurÅckgegeben hat,
              oder nil, falls Test immer false geliefert hat.
              Der Pointer Test sollte eine GLOBALE (Unterschied
              zu ObjectWindows!) Funktion sein, der ein pointer-
              Parameter Åbergeben wird und die boolean zurÅckgibt.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Test-Funktion nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TApplication\#  \#TApplication.ForEachWnd\#


Beispiel      function IstOffen(p: pointer): boolean;
                { ... }

              IstOffen sollte eine globale Funktion sein.

              p:=\#Application\#^.FirstWndThat(@IstOffen);

\end


screen("TApplication.ForEachWnd":sensitive)
TApplication.ForEachWnd (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ForEachWnd(Action: \#PIterationProc\#);

Beschreibung  ForEachWnd ruft fÅr jedes in der \#MainWindow\#-Liste
              eingetragene Fenster die durch Action bestimmte
              Prozedur auf. Der Pointer Action sollte eine
              GLOBALE (Unterschied zu ObjectWindows!) Prozedur
              sein, der ein pointer-Parameter Åbergeben wird.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Prozedur nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TApplication\#  \#TApplication.FirstWndThat\#


Beispiel      procedure MacheGross(p: pointer);
                { ... }

              MacheGross sollte eine globale Prozedur sein.

              \#Application\#^.ForEachWnd(@MacheGross);

\end


screen("TApplication.FreeMenu":sensitive)
TApplication.FreeMenu (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeMenu; virtual;

Beschreibung  Entfernt ein mit \#TApplication.LoadMenu\# installiertes
              Dropdown-MenÅ. Wird von \#TApplication.ExitGEM\# auto-
              matisch aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.FreeResource":sensitive,"FreeResource":sensitive)
TApplication.FreeResource (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeResource; virtual;

Beschreibung  Gibt eine mit \#TApplication.LoadResource\# geladene
              bzw. mit \#TApplication.InitResource\# eingebundene
              Resource wieder frei. Wird von \#TApplication.ExitGEM\#
              aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.GetAddr":sensitive,"GetAddr":sensitive)
TApplication.GetAddr (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetAddr(Indx: integer): \#PTree\#; virtual;

Beschreibung  Ermittelt die Adresse des Objektbaumes mit dem Index
              Indx. Man sollte immer _diese_ Methode und _nicht_
              \#rsrc_gaddr\# verwenden, da GetAddr automatisch be-
              achtet, ob die Resource mit \#InitResource\# oder mit
              \#LoadResource\# eingebunden wurde.

Querverweise  \#TApplication\#

\end


screen("TApplication.GetClipboard":sensitive)
TApplication.GetClipboard (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClipboard: \#PClipboard\#; virtual;

Beschreibung  Liefert das TClipboard-Objekt, das mit der Appli-
              kation verknÅpft wird. In dieser Methode wird ein
              TClipboard-Objekt neu instantiiert und ein Zeiger
              darauf zurÅckgegeben.
              Wird von \#TApplication.Init\# aufgerufen.

Querverweise  \#TApplication\#  \#TApplication.Clipboard\#

\end


screen("TApplication.GetCrsRect":sensitive,"GetCrsRect":sensitive)
TApplication.GetCrsRect (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetCrsRect(var crect: \#GRECT\#); virtual;

Beschreibung  Liefert den Bereich zurÅck, in dem der Mauszeiger
              von ObjectGEM verÑndert werden soll. Dies ist
              normalerweise der Arbeitsbereich des obersten
              Fensters, wenn bei diesem \#TWindow.Class.hCursor\#
              entsprechend gesetzt ist.
              Diese Methode wird intern von \#TApplication.GetEvent\#
              aufgerufen und sollte _nicht_ Åberschrieben werden.

Querverweise  \#TApplication\#

\end


screen("TApplication.GetCurrInstance":sensitive,"GetCurrInstance":sensitive)
TApplication.GetCurrInstance (Methode)               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCurrInstance: integer; virtual;

Beschreibung  Gibt zurÅck, wie oft die Applikation im Speicher
              vorhanden ist. WÑhrend \#TApplication.Attr.Instance\#
              angibt, als welche Instanz das Programm _gestartet_
              wurde, liefert GetCurrInstance den aktuellen Wert.
              Dieser kann vom Startwert durchaus verschieden
              sein, da ja zwischenzeitlich dasselbe Programm
              erneut gestartet worden sein kînnte (z.B. unter
              \#MultiTOS\#).

Querverweise  \#TApplication\#  \#TApplication.FirstInstance\#

\end


screen("TApplication.GetEvent":sensitive,"GetEvent":sensitive)
TApplication.GetEvent (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetEvent(var data: TEventData): integer;
                                                          virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, um
              auf GEM-Messages zu warten. Wenn ein Ereignis auf-
              getreten ist, muû die Åbergebene \#TEventData\#-Struktur
              entsprechend ausgefÅllt werden.
              Normalerweise wird in dieser Methode ein \#evnt_multi\#-
              Aufruf durchgefÅhrt (siehe Beispiel). Man sollte
              daran nur etwas Ñndern, wenn man genau weiû, was
              man tut, und wenn sich dies nicht anders bewerk-
              stelligen lÑût, da sonst die etwas "trickreiche"
              (aber dennoch saubere) ObjectGEM-Verwaltung sehr
              leicht durcheinanderkommen kann.

Querverweise  \#TApplication\#


Beispiel			function TApplication.GetEvent(var data: TEventData): integer;
								var crect: GRECT;

								begin
									\#GetCrsRect\#(crect);
									GetEvent:=evnt_multi(\#Attr.EventMask\#,258,3,0,0,crect.X,crect.Y,crect.W,crect.H,
															1,crect.X,crect.Y,crect.W,crect.H,data.Pipe,GetMsTimer mod 65536,
															\#GetMsTimer\# div 65536,data.mX,data.mY,data.BStat,data.KStat,data.Key,data.Clicks)
								end;

\end


screen("TApplication.GetFImagePtr":sensitive,"GetFImagePtr":sensitive)
TApplication.GetFImagePtr (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetFImagePtr(Indx: integer): pointer;
                                                       virtual;

Beschreibung  Ermittelt die Adresse des \#BITBLK\#-Elements mit dem
              Index Indx, das sich nicht in einem Dialogbaum be-
              findet.
              Man sollte immer _diese_ Methode und _nicht_
              \#rsrc_gaddr\# verwenden, da GetFImagePtr automatisch
              beachtet, ob die Resource mit \#InitResource\# oder
              mit \#LoadResource\# eingebunden wurde.

Querverweise  \#TApplication\#  \#TApplication.GetAddr\#

\end


screen("TApplication.GetFString":sensitive,"GetFString":sensitive)
TApplication.GetFString (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetFString(Indx: integer): string; virtual;

Beschreibung  Gibt die mit Indx bezeichnete freie Zeichenkette
              zurÅck. Sollte _immer_ anstelle von \#GetFreeString\#
              verwendet werden.

Querverweise  \#TApplication\#  \#TApplication.GetFStringPtr\#

\end


screen("TApplication.GetFStringPtr":sensitive,"GetFStringPtr":sensitive)
TApplication.GetFStringPtr (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetFStringPtr(Indx: integer): PChar;
                                                      virtual;

Beschreibung  Ermittelt die Adresse einer sog. "freien" Zeichen-
              kette mit dem Index Indx; solche Strings befinden
              sich in einem speziellen Objektbaum und werden fÅr
              Texte verwendet, die im Programm auûerhalb von
              Dialogen verwendet werden sollen.
              Man sollte immer _diese_ Methode und _nicht_
              \#rsrc_gaddr\# verwenden, da GetFStringPtr automatisch
              beachtet, ob die Resource mit \#InitResource\# oder
              mit \#LoadResource\# eingebunden wurde.

Querverweise  \#TApplication\#
              \#TApplication.GetFString\#  \#TApplication.GetAddr\#

\end


screen("TApplication.GetGPWindow":sensitive,"GetGPWindow":sensitive)
TApplication.GetGPWindow (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetGPWindow(gHnd: integer): PWindow;

Beschreibung  Gibt den Pointer auf das Fensterobjekt mit der
              GEM-Kenung gHnd zurÅck, wenn ein solches Fenster
              (mit dem dazugehîrigen Fensterobjekt) existiert,
              andernfalls \#nil\#.

Querverweise  \#TApplication\#
							\#TApplication.GetPWindow\#  \#TWindow.Attr.gemHandle\#

\end


screen("TApplication.FirstApplication":sensitive,"FirstApplication":sensitive)
TApplication.FirstApplication (Methode)              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstApplication(AType: TAppTypeMR;
                                        GenName: string;
                                var XAccAttr: TXAccAttr): boolean;

Beschreibung  Sucht auf Grundlage der \#XAccList\# nach bestimmten
              Programmtypen im Speicher. Diese Funktion ist
              hauptsÑchlich fÅr Multitasking-Systeme interessant,
              da hiermit eine Modularisierung des Systems erreicht
              werden kann (eine Art rudimentÑre "Component Ware").
              In AType kann ein maschinenlesbarer Programmtyp
              Åbergeben werden (siehe \#TXAccAttr\#), in GenName
              ein sog. "generischer Name". Gesetzte Parameter
              werden fÅr die Auswertung mit "und" verknÅpft.
              Wenn AType nicht ausgewertet werden soll, muû
              '  ' Åbergeben werden; in GenName Åbergibt man
              in so einem Fall einen Leerstring.
              Wenn keine passende Applikation gefunden wurde,
              wird false zurÅckgegeben, true sonst.

Querverweise  \#TApplication\#  \#TApplication.NextApplication\#
                            \#TApplication.FindApplication\#

\end


screen("TApplication.NextApplication":sensitive,"NextApplication":sensitive)
TApplication.NextApplication (Methode)               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function NextApplication
                            (var XAccAttr: \#TXAccAttr\#): boolean;

Beschreibung  Liefert die nÑchste auf die bei \#FirstApplication\#
              angegebenen Werte passende Applikation im Speicher,
              wenn eine solche vorhanden ist (die RÅckgabe ist
              dann true).
              Wenn keine gewÅnschte Applikation mehr vorhanden
              ist, wird false zurÅckgegeben.

Querverweise  \#TApplication\#  \#TApplication.FindApplication\#

\end


screen("TApplication.GetMenuEntries":sensitive,"GetMenuEntries":sensitive,
       "TMenuEntries":sensitive,"PMenuEntries":sensitive,"TMenuEntry":sensitive,"PMenuEntry":sensitive,
       "TMenuEntry.Entry":sensitive,"TMenuEntry.Title":sensitive,
       "TMenuEntries.Close":sensitive,"TMenuEntries.Print":sensitive,"TMenuEntries.Cut":sensitive,
       "TMenuEntries.Copy":sensitive,"TMenuEntries.Paste":sensitive,"TMenuEntries.SelectAll":sensitive,
       "TMenuEntries.Quit":sensitive,"TMenuEntries.Full":sensitive,"TMenuEntries.Cycle":sensitive,
       "TMenuEntries.Delete":sensitive)
TApplication.GetMenuEntries (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetMenuEntries(var Entries: TMenuEntries);
                                                         virtual;

Beschreibung  Diese Methode wird fÅr das MenÅ-Protokoll benîtigt.
              Sie wird von \#TApplication.LoadMenu\# aufgerufen;
              standardmÑûig wird hier die Struktur Entries nur
              ausgenullt.
              Man kann (und sollte) aber die passenden Indizes
              von MenÅeintrag und -titel zuweisen, damit man
              sich nicht mehr um das Weiterleiten von z.B.
              <Control>+<V> an die passende Paste-Methode zu
              kÅmmern braucht.
              In der Praxis sieht es also so aus, daû man die
              entsprechenden MenÅeintrÑge ("Drucken", "Kopieren",
              "Schlieûen" etc.) in der MenÅleiste der Applikation
              zur VerfÅgung stellt, in dieser Methode dann die
              Indizes eintrÑgt, und ab dann braucht man sich um
              diese MenÅpunkte _nicht mehr zu kÅmmern_!
              WICHTIG: Das MenÅ-Protokoll bezieht sich nur auf
              die Applikations-MenÅleiste, nicht aber auf eine
              Fenster-MenÅleiste!
              Folgenden EintrÑgen kann z.Z. eine Funktion zu-
              geordnet werden (die Namen sollten selbsterklÑrend
              sein):

								PMenuEntries = ^TMenuEntries;
								TMenuEntries = record
									Close,
									Print,
									Cut,
									Copy,
									Paste,
									Delete,
									SelectAll,
									Quit,
									Full,
									Cycle    : TMenuEntry
								end;

								PMenuEntry = ^TMenuEntry;
								TMenuEntry = record
									Entry,
									Title: integer
								end;

Querverweise  \#TApplication\#  \#TApplication.SetQuit\#

\end


screen("TApplication.GetMsTimer":sensitive,"GetMsTimer":sensitive)
TApplication.GetMsTimer (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetMsTimer: longint; virtual;

Beschreibung  Gibt die Anzahl der Millisekunden zurÅck, auf die
              fÅr ein Timer-Ereignis gewartet werden soll. Stan-
              dardmÑûig ist dies genau eine Sekunde.
              Diese Zahl ist allerdings nur dann wirksam, wenn
              in \#TApplication.Attr.EventMask\# das Bit \#MU_TIMER\#
              gesetzt ist, was unter \#MultiTOS\# der Fall ist
              (wird intern benîtigt).
              GetMsTimer wird von \#TApplication.GetEvent\# aufge-
              rufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.GetPTopWindow":sensitive,"GetPTopWindow":sensitive)
TApplication.GetPTopWindow (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetPTopWindow: PWindow;

Beschreibung  Gibt einen Zeiger auf das Fensterobjekt des obersten
              Fensters zurÅck, wenn dieses zu der ObjectGEM-Appli-
              kation gehîrt, ansonsten \#nil\#.

Querverweise  \#TApplication\#  \#TApplication.GetGPWindow\#

\end


screen("TApplication.GetPWindow":sensitive,"GetPWindow":sensitive)
TApplication.GetPWindow (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetPWindow(Hnd: \#HWnd\#): PWindow;

Beschreibung  Gibt den Pointer auf das Fensterobjekt mit der
              ObjectGEM-Kennung Hnd zurÅck, wenn ein solches
              Fensterobjekt existiert, andernfalls \#nil\#.
              Der Unterschied zu \#TApplication.GetGPWindow\# ist,
              daû ein Fensterobjekt immer eine ObjectGEM-
              interne Kennung besitzt, aber kein GEM-Handle
              belegen zu braucht (z.B. modale Dialoge).
              Wenn man nach Fensterobjekten sucht, sollte
              man also GetPWindow verwenden. Benîtigt man
              aber unbedingt ein zugehîriges GEM-Fenster,
              muû man GetGPWindow verwenden.

Querverweise  \#TApplication\#  \#TWindow.Attr.Handle\#

\end


screen("TApplication.GetXAccAttr":sensitive,"GetXAccAttr":sensitive)
TApplication.GetXAccAttr (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetXAccAttr(var XAccAttr: \#TXAccAttr\#);
                                                        virtual;

Beschreibung  Wird von \#TApplication.Init\# dazu verwendet, das
              Feld \#XAcc\# auszufÅllen.
              StandardmÑûig wird \link("TXAccAttr.Version")Version\# auf 0, \#MsgGroups\# auf 3
              und \#AppTypeMR\# auf einen Leerstring gesetzt, \link("TXAccAttr.apID")apID\#,
              \link("TXAccAttr.menuID")menuID\# und \link("TXAccAttr.Name")Name\# auf die entsprechenden Felder des
              Applikations-Objekts. Alle anderen Pointer werden
              auf \#nil\# gesetzt.
              \#Protocol\# wird mit \#PROTO_XACC\#+\#PROTO_AV\# vorbelegt,
              \#AVSrvMsg\# mit \#MSG_SENDKEY\# or \#MSG_STARTPROG\# or
              \#MSG_EXIT\# und \#AVAccMsg\# mit \#MSG_START\#.
              Diese Methode muû Åberschrieben werden, wenn dem
              Programm spezielle XAcc-Eigenschaften zugewiesen
              werden sollen.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.HandleAV":sensitive,"HandleAV":sensitive)
TApplication.HandleAV (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleAV(Pipe: \#Pipearray\#); virtual;

Beschreibung  Wird aufgerufen, wenn \#TApplication.MUMesag\# eine
              AV-Protokoll-Meldung erhÑlt. ObjectGEM wertet nur
              die Messages \#AV_PROTOKOLL\#, \#VA_PROTOSTATUS\# und
              \#AV_EXIT\# aus, alle anderen Nachrichten mÅssen -
              wenn das Protokoll verstanden werden soll - in
              dieser Methode ausgewertet werden.
              Eine Dokumentation des AV-Protokolls findet sich
              in der Beschreibung des Shareware-Desktops GEMINI.

Querverweise  \#TApplication\#             \#TApplication.AVServer\#
              \#TApplication.HandleXAcc\#  \#Protokoll-Messages\#
              \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.HandleButton":sensitive,"HandleButton":sensitive)
TApplication.HandleButton (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleButton(mX,mY,BStat,KStat,
                                      Clicks: integer); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn
              ein dort eintreffender Mausklick nicht verarbeitet
              werden konnte. StandardmÑûig werden hier nur evtl.
              vorhandene Icons mit \#IconSelect\# deselektiert.
              In mX und mY wird die Position des Klicks, in
              Clicks die Anzahl, in BStat die gedrÅckte Maustaste
              (1=links, 2=rechts) und in KStat der Zustand der
              Umschalttasten Åbergeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleDragDrop":sensitive,"HandleDragDrop":sensitive)
TApplication.HandleDragDrop (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleDragDrop(PipeHnd,OrgID,WindID,mX,
                                     mY,KStat: integer); virtual;

Beschreibung  Wird von \#TApplication.APDragDrop\# aufgerufen, wenn
              die Drag&Drop-Anfrage keinem Fenster zugeordnet
              werden konnte.
              ZunÑchst wird die Anfrage positiv beantwortet.
              Dann werden die von \link("TApplication.DDGetPreferredTypes")DDGetPreferredTypes\# geliefer-
              ten Dateitypen Åbermittelt. Nachdem sich der Sender
              auf einen Dateityp festgelegt hat, wird darauf mit
              dem von \link("TApplication.DDHeaderReply")DDHeaderReply\# ermittelten Wert reagiert.
              Wenn sich Sender und EmpfÑnger einigen konnten,
              werden dann mit \link("TApplication.DDReadData")DDReadData\# die Daten gelesen,
              ansonsten wird die Drag&Drop-Anfrage abgewiesen
              oder ein neuer Dateityp verlangt.
              Verschickt der Sender den 'ARGS'-Datentyp, wird
              automatisch die Methode \link("TApplication.DDReadArgs")DDReadArgs\# aufgerufen.
              Wenn der Sender allerdings den Applikationspfad
              wissen mîchte, wird dieser mit \link("TApplication.DDGetPath")DDGetPath\# zurÅck-
              geliefert.
              PipeHnd ist das Dateihandle der _geîffneten_ Pipe,
              auf die mit \#Fwrite\#, \#Fread\# etc. zugegriffen werden
              kann. OrgID ist die AES-Applikations-Kennung des
              Senders, WindID ist die GEM-Kennung des Fensters,
              auf das gedroppt wurde (in dieser Methode meist -1,
              d.h. die Applikation an sich ist gemeint). mX, mY
              und KStat geben die Position der Maus und den
              Zustand der Umschalttasten beim Aufruf an.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleError":sensitive,"HandleError":sensitive)
TApplication.HandleError (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleError; virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Fehler aufgetreten ist. Falls das Programm den
              Fehler beheben kann, sollte es \#TApplication.Status\#
              auf \#em_OK\# zurÅcksetzen, damit es nicht beendet
              wird.
              StandardmÑûig sorgt diese Methode dafÅr, daû
              \#em_OutOfMemory\# _ignoriert_ wird.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleKeybd":sensitive,"HandleKeybd":sensitive)
TApplication.HandleKeybd (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleKeybd(Stat,Key: integer); virtual;

Beschreibung  Wird von \#TApplication.MUKeybd\# aufgerufen, wenn das
              aufgetretene Tastaturereignis nicht verarbeitet
              werden konnte.
              Normalerweise leitet diese Methode den Tastendruck
              an \#TWindow.WMKeyDown\# des obersten Fensters weiter
              (oder, wenn \#as_XInputMode\# gesetzt ist, an das
              Fenster unter dem Mauszeiger).
              In Stat wird der Status der Umschalttasten und in
              Key der VDI-Tastencode Åbergeben.
              Wurde der Tastendruck nicht ausgewertet, wird eine
              entsprechende \#AV_SENDKEY\#-Message an den \link("AVServer")AV-Server\#
              geschickt.

Querverweise  \#TApplication\#  \#MapKey\#

\end


screen("TApplication.HandleM1":sensitive,"HandleM1":sensitive)
TApplication.HandleM1 (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleM1(mX,mY,BStat,KStat: integer);
                                                        virtual;

Beschreibung  Wird von \#TApplication.MUM1\# aufgerufen, wenn das
              Mausereignis dort nicht verarbeitet werden konnte
              (was normalerweise der Fall ist).
              Diese Methode wird intern zum VerÑndern des
              Mauscursors Åber dem Fensterarbeitsbereich ver-
              wendet und sollte deshalb _nicht_ Åberschrieben
              werden.

Querverweise  \#TApplication\#  \#TApplication.HandleM2\#

\end


screen("TApplication.HandleM2":sensitive,"HandleM2":sensitive)
TApplication.HandleM2 (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleM2(mX,mY,BStat,KStat: integer);
                                                        virtual;

Beschreibung  Wird von \#TApplication.MUM2\# aufgerufen, wenn das
              Mausereignis dort nicht verarbeitet werden konnte
              (was normalerweise der Fall ist).
              Diese Methode wird intern zum VerÑndern des
              Mauscursors Åber dem Fensterarbeitsbereich ver-
              wendet und sollte deshalb _nicht_ Åberschrieben
              werden.

Querverweise  \#TApplication\#  \#TApplication.HandleM1\#

\end


screen("TApplication.HandleMenu":sensitive)
TApplication.HandleMenu (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleMenu(meNum: integer); virtual;

Beschreibung  Wird von \#TApplication.MNSelected\# aufgerufen, wenn
              fÅr den MenÅeintrag mit dem Index meNum kein zuge-
              hîriges \#TEvent\#-Objekt vorhanden ist.
              Innerhalb dieser Methode kann dann eine case-
              Abfrage durchgefÅhrt werden. Nach Mîglichkeit
              sollten allerdings TEvent-Objekte zum Einsatz
              kommen.
              HandleMenu macht standardmÑûig gar nichts.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleMesag":sensitive,"HandleMesag":sensitive)
TApplication.HandleMesag (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleMesag(Pipe: \#Pipearray\#); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn die
              empfangene GEM-Message unbekannt ist und auch kein
              \#TEvent\#-Objekt etwas damit anfangen kann.
              Durch öberschreiben dieser Methode kînnen z.B.
              eigene Nachrichten (mit Nummern ab $5000) verar-
              beitet werden.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleTimer":sensitive,"HandleTimer":sensitive)
TApplication.HandleTimer (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleTimer; virtual;

Beschreibung  Wird von \#TApplication.MUTimer\# aufgerufen, wenn ein
              Timer-Ereignis auftritt. StandardmÑûig passiert in
              dieser Methode nichts.

Querverweise  \#TApplication\#

\end


screen("TApplication.HandleXAcc":sensitive,"HandleXAcc":sensitive)
TApplication.HandleXAcc (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HandleXAcc(Pipe: \#Pipearray\#); virtual;

Beschreibung  Wird aufgerufen, wenn \#TApplication.MUMesag\# eine
              XAcc-Protokoll-Meldung erhÑlt, die nicht von einer
              spezialisierten Methode verarbeitet werden kann.
              Das sind z.Z. die Meldungen \#ACC_OPEN\#, \#ACC_CLOSE\#
              und \#ACC_ACK\#.

Querverweise  \#TApplication\#           \#XAcc- und AV-Protokoll\#
              \#TApplication.HandleAV\#  \#Protokoll-Messages\#

\end


screen("TApplication.GetIconTitle":sensitive)
TApplication.GetIconTitle (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetIconTitle: string; virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn die
              gesamt Applikation ikonifiziert werden soll.
              Die RÅckgabe dient als Fenstertitel des Icon-
              Fensters; standardmÑûig wird \#TApplication.Name\#
              geliefert.
              Von der RÅckgabe werden z.Z. allerdings nur die
              ersten 10 (bzw. mit ICFS nur 8) Zeichen beachtet!

Querverweise  \#TApplication\#  \#TApplication.IsIconified\#

\end


screen("TApplication.IconPaint":sensitive)
TApplication.IconPaint (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure IconPaint(Work: GRECT;
                            var PaintInfo: TPaintStruct); virtual;

Beschreibung  Wird aufgerufen, wenn das Icon-Fenster neu ge-
              zeichnet werden soll. In Work wird der Arbeits-
              bereich des Fensters Åbergeben, da das Applikati-
              onsobjekt ja keine Angaben Åber das Icon-Fenster
              besitzt.
              StandardmÑûig wird der Arbeitsbereich einfach
              nur weiû gefÅllt. Die Verfahrensweise ist analog
              zu \#TWindow.Paint\#.

Querverweise  \#TApplication\#  \#Iconification\#

\end


screen("TApplication.IsIconified":sensitive)
TApplication.IsIconified (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsIconified: boolean;

Beschreibung  Gibt true zurÅck, wenn die gesamte Applikation
              ikonifiziert ist, d.h. wenn alle Fenster in einem
              einzigen Icon-Fenster zusammengefaût sind (erst ab
              AES 4.10 mîglich).

Querverweise  \#TApplication.IconPaint\#  \#TApplication.GetIconTitle\#
              \#TApplication\#

\end


screen("TApplication.InitApplication":sensitive,"InitApplication":sensitive)
TApplication.InitApplication (Methode)               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitApplication; virtual;

Beschreibung  Wird von \#TApplication.Init\# aufgerufen, wenn es sich
              um die erste Instanz des Programms im Speicher han-
              delt.
              Die Methode setzt zunÑchst \#FirstInstance\# auf true
              und versucht dann, alle ObjectGEM-Applikationen
              Åber den globalen 'GOBJ'-Cookie zu verketten.
              Wenn InitApplication Åberschrieben wird, sollte
              in der neuen Methode als erstes die geerbte Methode
              aufgerufen werden.

Querverweise  \#TApplication\#  \#TApplication.InitInstance\#
                            \#TApplication.Attr.Instance\#

\end


screen("TApplication.InitGEM":sensitive,"InitGEM":sensitive)
TApplication.InitGEM (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitGEM; virtual;

Beschreibung  Wird von \#TApplication.Init\# aufgerufen, um das Pro-
              gramm beim Betriebssystem anzumelden.
              ZunÑchst wird \link("TApplication.apID")apID\# mit \#appl_init\# ermittelt. Wenn
              das AES noch nicht aktiv ist, wird \link("TApplication.Status")Status\# auf
              \#em_AESNotActive\# gesetzt und das Programm damit
              abgebrochen. Vorher wird jedoch noch \#AutoFolder\#
              aufgerufen.
              Ansonsten werden danach unter MiNT/\#MultiTOS\# die
              Signale \#SIGTERM\# und \#SIGQUIT\# abgefangen. Dann werden
              die Kommandozeile und der Name des Programms ermit-
              telt und \#Attr.rpCmd\# und \#Attr.rpTail\# entsprechend
              gesetzt.
              Schlieûlich werden \#aesHandle\# und \link("TApplication.vdiHandle")vdiHandle\# besetzt
              und somit eine VDI-Workstation geîffnet. Tritt hier
              ein Fehler auf, wird Status auf \#em_GEMInitFailure\#
              gesetzt. Bei einem Accessory oder einer MultiTOS-
              Applikation wird noch der Desk-MenÅeintrag auf
              \#TApplication.Name\# geÑndert und \link("TApplication.menuID")menuID\# gesetzt.
              Ist kein Platz fÅr ein Accessory mehr, wird Status
              auf \#em_AccInitFailure\# gesetzt.

Querverweise  \#TApplication\#  \#TApplication.ExitGEM\#

\end


screen("TApplication.InitInstance":sensitive,"InitInstance":sensitive)
TApplication.InitInstance (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitInstance; virtual;

Beschreibung  In dieser Methode werden normalerweise alle pro-
              grammspezifischen Initialisierungen vorgenommen.
              Wird von \#TApplication.Init\# als letzte Aktion aufge-
              rufen. Hier wird das \#TKeyMenu\#-Objekt zum Verlassen
              des Programms mit <Control>+<Q> installiert. Danach
              wird - wenn \#as_HandleShutdown\# gesetzt und \#MultiTOS\#
              aktiv ist - dem Betriebssystem die FÑhigkeit zum
              korrekten Shutdown mitgeteilt. Als letztes wird
              schlieûlich \#TApplication.InitMainWindow\# aufgerufen.
              Wenn diese Methode Åberschrieben wird, sollte die
              geerbte Methode dann aufgerufen werden, wenn alle
              Voraussetzungen dafÅr geschaffen sind, daû dem
              ôffnen des Hauptfensters nichts mehr im Weg steht.

Querverweise  \#TApplication\#  \#TApplication.InitApplication\#
                            \#TApplication.SetQuit\#

\end


screen("TApplication.InitMainWindow":sensitive,"InitMainWindow":sensitive)
TApplication.InitMainWindow (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitMainWindow; virtual;

Beschreibung  Wird von \#TApplication.InitInstance\# aufgerufen, um
              das Hauptfenster der Applikation zu ôffnen. Stan-
              dardmÑûig wird ein einfaches \#TWindow\#-Objekt er-
              zeugt, d.h. diese Methode wird eigentlich _immer_
              Åberschrieben.
              Man kann hier eigene Fenstertypen erzeugen (auch
              Fensterdialoge), oder - wenn das Programm zunÑchst
              kein Fenster îffnen soll - gar nichts tun.

Querverweise  \#TApplication\#


Beispiel      procedure TApplication.InitMainWindow;

                begin
                  new(PWindow,\link("TWindow.Init")Init\#(nil,Name^));
                  if (\#MainWindow\#=nil) or (\#ChkError\#<em_OK)
                    then \#Status\#:=\#em_InvalidMainWindow\#
                end;

\end


screen("TApplication.InitResource":sensitive,"InitResource":sensitive)
TApplication.InitResource (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitResource(AddrHiRes,
                                    AddrLoRes: pointer); virtual;

Beschreibung  VerknÅpft eine im Programm mit $L eingebundene
              Resource (siehe Beispielprogramme) mit der GEM-
              Applikation. Die Objektdateien (*.O) werden mit
              dem Programm \#BINOBJ\# erzeugt, das dem PurePascal-
              Paket beiliegt.
              In AddrHiRes wird der Pointer der Resource fÅr
              vertikale Auflîsungen >=400 Pixel angegeben, in
              AddrLoRes der Pointer fÅr alle kleineren Auf-
              lîsungen. Wenn das Programm nur eine Resource
              besitzt, setzt man den anderen Pointer einfach
              auf nil; ObjectGEM wÑhlt immer die bestmîgliche
              Resource.
              InitResource paût alle Koordinaten an die aktuelle
              Auflîsung an und wandelt alle Bitmaps in das ge-
              rÑtespezifische Format.
              Man sollte Resourcedateien nach Mîglichkeit direkt
              in das Programm einbinden, damit Accessories keine
              Probleme mit der Speicherplatzanforderung bekommen.
              ACHTUNG: Wenn zwei Resourcedateien verwendet
              werden, muû man darauf achten, daû die Indizes
              der entsprechenden Objekte gleich sind!

Querverweise  \#TApplication\#  \#TApplication.LoadResource\#


Beispiel      Die Resource-Datei sei MYRSC.RSC, BINOBJ.TTP wird
              dann mit folgender Kommandozeile aufgerufen:

              	myrsc.rsc myrsc.o MyResource

              Folgende Zeile wird in das Programm eingefÅgt:

              	procedure MyResource; external; {$L myrsc.o}

							Eingebunden wird die Resource dann in der Methode
							\#TApplication.InitInstance\#:

								InitResource(@MyResource,nil);

\end


screen("TApplication.InstallDesktop":sensitive,"InstallDesktop":sensitive)
TApplication.InstallDesktop (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InstallDesktop(tIndx,oIndx: integer);
                                                        virtual;

Beschreibung  Meldet fÅr die Applikation einen neuen Desktop an,
              dessen Hintergrundobjekt den Index oIndx im Objekt-
              baum tIndx besitzt. Anschlieûend wird der neue
              Desktop mit \#TApplication.DeskRedraw\# gezeichnet.
              Accessories kînnen z.Z. noch keinen eigenen Desk-
              top anmelden, InstallDesktop wird dann einfach
              _ignoriert_.
              SpÑter wird auûerdem noch eine automatische Ver-
              waltung von Icons, Drag&Drop etc. dazukommen.

Querverweise  \#TApplication\#  \#TApplication.RemoveDesktop\#

\end


screen("TApplication.InvalidateRect":sensitive,"InvalidateRect":sensitive)
TApplication.InvalidateRect (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InvalidateRect(Wnd: \#HWnd\#; Rect: PGRECT);
                                                          virtual;

Beschreibung  Zeichnet den in Rect Åbergebenen Bereich des durch
              die ObjectGEM-Kennung angegebenen Fensters neu.
              Wird in Rect ein \#nil\#-Pointer Åbergeben, wird der
              gesamte Arbeitsbereich des Fensters aktualisiert.
              Das Neuzeichnen geschieht mit einer GEM-Message,
              wird also erst zu einem spÑteren Zeitpunkt durch-
              gefÅhrt.

Querverweise  \#TApplication\#  \#TWindow.ForceRedraw\#
                            \#TWindow.Attr.Handle\#

\end


screen("TApplication.LoadMenu":sensitive)
TApplication.LoadMenu (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadMenu(Indx: integer); virtual;

Beschreibung  Installiert die Dropdown-MenÅleiste im Objektbaum
              Indx. ZunÑchst wird geprÅft, ob das MenÅ auf dem
              Bildschirm komplett dargestellt werden kann. Ist
              dies der Fall, wird das MenÅ gezeichnet, ansonsten
              gibt \#ChkError\# \#em_InvalidMenu\# zurÅck.
              Diese Methode sollte - falls ein Dropdown-MenÅ
              verwendet wird - in \#TApplication.InitInstance\#
              aufgerufen werden.
              Wenn das MenÅ korrekt installiert werden konnte,
              wird danach \#GetMenuEntries\# aufgerufen. Aus kom-
              patibilitÑtsgrÅnden (zu \#SetQuit\#) wird danach eine
              \#GOP_SETQUIT\#-Message verschickt.

Querverweise  \#TApplication\#  \#TApplication.FreeMenu\#

\end


screen("TApplication.LoadResource":sensitive,"LoadResource":sensitive)
TApplication.LoadResource (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadResource(FileHiRes,
                                      FileLoRes: string); virtual;

Beschreibung  LÑdt die Resourcedatei des Programms nach.
              In FileHiRes wird der Dateiname der Resource fÅr
              vertikale Auflîsungen >=400 Pixel angegeben, in
              AddrLoRes der Dateiname fÅr alle kleineren Auf-
              lîsungen. Wenn das Programm nur eine Resource
              besitzt, Åbergibt man als anderen Dateinamen ein-
              fach einen Leerstring; ObjectGEM wÑhlt immer die
              bestmîgliche Resource.
              LoadResource paût alle Koordinaten an die aktuelle
              Auflîsung an und wandelt alle Bitmaps in das ge-
              rÑtespezifische Format.
              Kann die Datei nicht gefunden werden, wird \link("TApplication.Status")Status\#
              auf \#em_RscNotFound\# gesetzt.
              ACHTUNG: Wenn zwei Resourcedateien verwendet
              werden, muû man darauf achten, daû die Indizes
              der entsprechenden Objekte gleich sind!

Querverweise  \#TApplication\#  \#TApplication.InitResource\#

\end


screen("TApplication.LoadIcon":sensitive)
TApplication.LoadIcon (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadIcon(icnTree,icnIndx: integer);
                                                      virtual;

Beschreibung  Weist das Icon mit dem Index icnIndx im Objektbaum
              icnTree der Applikation zu. Dieses Icon wird, wenn
              die gesamte Applikation ikonifiziert wird, in dem
              Icon-Fenster dargestellt.
              Dialogobjekte nutzen ebenfalls dieses Icon, wenn
              ihnen kein eigenes Icon zugewiesen wurde.

Querverweise  \#TApplication\#  \#TApplication.FreeIcon\#
                            \#TApplication.Icon\#

\end


screen("TApplication.FreeIcon":sensitive)
TApplication.FreeIcon (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeIcon; virtual;

Beschreibung  Gibt das Feld \link("TApplication.Icon")Icon\# frei, d.h. in dem Applikations-
              Icon-Fenster wird kein Icon mehr dargestellt.

Querverweise  \#TApplication\#  \#TApplication.LoadIcon\#

\end


screen("TApplication.MessageLoop":sensitive,"MessageLoop":sensitive)
TApplication.MessageLoop (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MessageLoop; virtual;

Beschreibung  Wird von \#TApplication.Run\# aufgerufen. Diese Methode
              ist die zentrale "Nachrichtenvermittlungsstelle" von
              ObjectGEM.
              Solange \link("TApplication.Status")Status\# grîûer gleich \#em_OK\# ist, wird mit
              \#TApplication.GetEvent\# auf eine GEM-Message gewartet.
              Je nach Ereignis wird dann \#MUKeybd\#, \#MUButton\#, \#MUM1\#,
              \#MUM2\#, \#MUMesag\# oder \#MUTimer\# aufgerufen.
              Wenn ein Fehler aufgetreten ist, wird zunÑchst
              \#TApplication.HandleError\# aufgerufen. Wenn der Fehler
              nicht behoben werden konnte, wird das Programm been-
              det.
              Soll das Programm mit \#TApplication.Quit\# verlassen
              werden, wird an dieser Stelle \#TApplication.CanClose\#
              auf GÅltigkeit ÅberprÅft.

Querverweise  \#TApplication\#

\end


screen("TApplication.MNSelected":sensitive)
TApplication.MNSelected (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MNSelected(meNum,mtNum: integer;
                          Tree: \#PTree\#; PrIndx: integer); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn der
              Benutzer einen MenÅeintrag angewÑhlt hat. In meNum
              wird der Index dieses Eintrags, in mtNum der Index
              des entsprechenden MenÅtitels Åbergeben.
              Unter neueren AES-Versionen wird in Tree der Zeiger
              auf den zugehîrigen Objektbaum und in PrIndex der
              Index des dem Eintrag Åbergeordneten Objekts Åber-
              geben; unter alten AES-Versionen wird stattdessen
              \#nil\# bzw. 0 Åbergeben.
              Die Methode versucht, den MenÅeintrag mit einem
              \#TKeyMenu\#-Objekt zu verknÅpfen; ist fÅr den Eintrag
              kein derartiges Objekt vorhanden, wird die Methode
              \#TApplication.HandleMenu\# aufgerufen.
              MNSelected kÅmmert sich auûerdem um das Invertieren
              des MenÅtitels.

Querverweise  \#TApplication\#

\end


screen("TApplication.MUButton":sensitive,"MUButton":sensitive)
TApplication.MUButton (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUButton(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Mausklick registriert wurde. Zuerst werden alle
              zum Applikationsobjekt gehîrigen \#TEvent\#-Objekte
              benachrichtigt. Wenn keines davon reagieren will,
              werden anschlieûend die TEvent-Objekte des obersten
              Fensters abgefragt. Erst wenn auch hier keine posi-
              tive Antwort erfolgt, wird der Klick an die Methode
              \#TWindow.WMButton\# weitergeleitet, wenn in den Ar-
              beitsbereich eines Fensters geklickt wurde.
              Wurde stattdessen auf den Desktop geklickt, wird -
              sofern \#as_Rubbox\# gesetzt ist - \#TApplication.Rubbox\#
              aufgerufen, und dann evtl. \#TApplication.MURubbox\#
              verstÑndigt.
              Trifft keiner der o.g. FÑlle zu, wird der Klick
              an \#TApplication.HandleButton\# weitergeleitet.

Querverweise  \#TApplication\#

\end


screen("TApplication.MUKeybd":sensitive,"MUKeybd":sensitive)
TApplication.MUKeybd (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUKeybd(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Tastaturereignis aufgetreten ist. Die Methode
              versucht, fÅr die gedrÅckte Taste(nkombination) ein
              \#TKeyMenu\#-Objekt zu finden (so werden z.B. die MenÅ-
              Shortcuts erkannt).
              Konnte kein solches Objekt gefunden werden (was
              bei "normalen" Tasten immer der Fall sein sollte,
              da diese _nicht_ als Shortcuts verwendet werden
              sollten), wird \#TApplication.HandleKeybd\# aufgerufen.
              Standard-Shortcuts (^X, ^C, ^V, ^W etc.) werden
              allerdings abgefangen und geeignet interpretiert
              (d.h. an die zugehîrigen Methoden weitergeleitet).

Querverweise  \#TApplication\#  \#as_XInputMode\#

\end


screen("TApplication.MUM1":sensitive,"MUM1":sensitive)
TApplication.MUM1 (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUM1(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Mausereignis fÅr das erste Mausrechteck einge-
              treten ist. MUM1 versucht, fÅr das Ereignis ein
              \#TEvent\#-Objekt zu finden.
              Normalerweise sollte ein solches _nicht_ existieren,
              da die beiden Mausrechtecke fÅr interne Zwecke ver-
              wendet werden. In einem solchen Fall wird die Me-
              thode \#TApplication.HandleM1\# aufgerufen.

Querverweise  \#TApplication\#  \#TApplication.MUM2\#

\end


screen("TApplication.MUM2":sensitive,"MUM2":sensitive)
TApplication.MUM2 (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUM2(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Mausereignis fÅr das zweite Mausrechteck einge-
              treten ist. MUM2 versucht, fÅr das Ereignis ein
              \#TEvent\#-Objekt zu finden.
              Normalerweise sollte ein solches _nicht_ existieren,
              da die beiden Mausrechtecke fÅr interne Zwecke ver-
              wendet werden. In einem solchen Fall wird die Me-
              thode \#TApplication.HandleM2\# aufgerufen.

Querverweise  \#TApplication\#  \#TApplication.MUM1\#

\end


screen("TApplication.MUMesag":sensitive,"MUMesag":sensitive)
TApplication.MUMesag (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUMesag(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              das Programm eine GEM-Nachricht erhÑlt.
              ZunÑchst wird mit \#wind_update\#() eine Bildschirm-
              blockierung fÅr die gesamte Methode durchgefÅhrt.
              Wenn data.\#Pipe\#[2] einen Wert grîûer Null enthÑlt,
              werden \#MessageBuffer\# und \#MessageBLen\# entsprechend
              gesetzt, ansonsten sind sie \#nil\# bzw. 0.
              Danach versucht MUMesag, die in data.Pipe[0] Åber-
              gebene Nachricht einer der folgenden Methoden zuzu-
              ordnen: \#ACClose\#, \#ACOpen\#, \#APDragDrop\#, \#APTerm\#, \#AVExit\#,
              \#AVProtokoll\#, \#CHExit\#, \#Copy\#, \#Cut\#, \#HandleAV\#, \#HandleXAcc\#,
              \link("TApplication.MNSelected")MNSelected\#, \#Paste\#, \#Print\#, \#ResChCompleted\#, \#SCChanged\#,
              \#SelectAll\#, \#ShutCompleted\#, \#SHWDraw\#, \#VAProtoStatus\#,
              \#WMArrowed\#, \#WMBottomed\#, \#WMClosed\#, \#WMFulled\#, \#WMHSlid\#,
              \#WMIconify\#, \#WMMoved\#, \#WMNewTop\#, \#WMOnTop\#, \#WMRedraw\#,
              \#WMShaded\#, \#WMSized\#, \#WMTopped\#, \#WMUniconify\#, \#WMUnshaded\#,
              \#WMUntopped\#, \#WMVSlid\#, \#XAccAcc\#, \#XAccExit\#, \#XAccID\#,
              \#XAccIMG\#, \#XAccKey\#, \#XAccMeta\# oder \#XAccText\#.
              Klappt dies nicht, wird versucht, die Nachricht an
              ein \#TEvent\#-Objekt weiterzuleiten. Scheitert auch
              dies, wird schlieûlich \#TApplication.HandleMesag\#
              aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.MURBoxChanged":sensitive,"MURBoxChanged":sensitive)
TApplication.MURBoxChanged (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MURBoxChanged(r: \#GRECT\#); virtual;

Beschreibung  Wird von \#TApplication.Rubbox\# jedesmal dann aufge-
              rufen, wenn sich die Grîûe der vom Benutzer im
              Fenster aufgezogenenen Rubbox Ñndert. Dies kann
              z.B. dazu verwendet werden, um die aktuelle Grîûe,
              die in r Åbergeben wird, anzuzeigen etc.
              WÑhrend des Aufrufs ist die Maus unsichtbar, und
              es liegt eine \#wind_update\#()-Schachtelung sowohl
              mit \#BEG_UPDATE\# als auch mit \#BEG_MCTRL\# vor. Ver-
              Ñnderte VDI-Attribute mÅssen zurÅckgesetzt werden.

Querverweise  \#TApplication\#  \#TApplication.MURubbox\#

\end


screen("TApplication.MURubbox":sensitive,"MURubbox":sensitive)
TApplication.MURubbox (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MURubbox(r: \#GRECT\#); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn der
              Benutzer auf dem Desktop eine Rubbox aufgezogen hat.
              In r wird der ausgewÑhlte Bereich Åbergeben.

Querverweise  \#TApplication\#  \#TApplication.MURboxChanged\#
                            \#TApplication.Rubbox\#

\end


screen("TApplication.MUTimer":sensitive,"MUTimer":sensitive)
TApplication.MUTimer (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MUTimer(data: \#TEventData\#); virtual;

Beschreibung  Wird von \#TApplication.MessageLoop\# aufgerufen, wenn
              ein Timer-Ereignis aufgetreten ist. Macht im Moment
              nichts weiter, als \#TApplication.HandleTimer\# aufzu-
              rufen. SpÑter werden hier allerdings die Fenster-
              Timer verwaltet.

Querverweise  \#TApplication\#

\end


screen("TApplication.Popup":sensitive)
TApplication.Popup (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Popup(APopup: \#PPopup\#; x,y,
                              Flag: integer): integer; virtual;

Beschreibung  Ermîglicht die einfache Abarbeitung eines \#TPopup\#-
              Objekts. In APopup wird der Pointer auf ein bereits
              initialisiertes Objekt Åbergeben, in x, y und Flag
              die Werte fÅr \#TPopup.pX\#, \#TPopup.pY\# und \#TPopup.pFlag\#.
              Letzterer ist normalerweise \#POP_CENTER\#. Nach der
              Bearbeitung wird das TPopup-Objekt _freigegeben_.
              Die RÅckgabe entspricht der von \#TPopup.Execute\#.

Querverweise  \#TApplication\#

\end


screen("TApplication.Quit":sensitive,"Quit":sensitive)
TApplication.Quit (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Quit; virtual;

Beschreibung  Muû aufgerufen werden, wenn das Programm beendet
              werden soll (was dann am Ende des aktuellen Durch-
              laufs von \#MessageLoop\# geschieht).
              Intern wird \link("TApplication.Status")Status\# auf \#em_Quit\# gesetzt; dies sollte
              man allerdings _nie_ selbst tun, sondern _immer_
              Quit verwenden!
              Wird von \#WMClosed\# aufgerufen, wenn \#cs_QuitOnClose\#
              gesetzt ist.

Querverweise  \#TApplication\#  \#TApplication.SetQuit\#

\end


screen("TApplication.RemoveDesktop":sensitive,"RemoveDesktop":sensitive)
TApplication.RemoveDesktop (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure RemoveDesktop; virtual;

Beschreibung  Entfernt einen mit \#TApplication.InstallDesktop\# an-
              gemeldeten Desktop, so daû der ursprÅngliche Desk-
              top wieder sichtbar wird.
              Wird von \#TApplication.ExitGEM\# aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.ResChCompleted":sensitive,"ResChCompleted":sensitive)
TApplication.ResChCompleted (Methode)                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ResChCompleted(Stat: integer); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn das
              Programm einen Auflîsungswechsel initiiert hat (mit
              \#shel_write\# Modus 5).
              Ist Stat=1, wurde der Wechsel bis jetzt erfolgreich
              beendet (d.h. keine Anwendung hat sich widersetzt).
              Nun muû sich das Programm nur noch selbst beenden,
              was ResChCompleted dadurch tut, indem \link("TApplication.Status")Status\# auf
              \#em_Terminate\# gesetzt wird. Der Benutzer hat also
              keine Mîglichkeit mehr, dies zu Verhindern - wenn
              man einen Auflîsungswechsel initiiert, sollte man
              also bereits wissen, ob die eigene Applikation be-
              endet werden darf!

Querverweise  \#TApplication\#

\end


screen("TApplication.RestoreModalDialog":sensitive,"RestoreModalDialog":sensitive)
TApplication.RestoreModalDialog (Methode)            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure RestoreModalDialog(p: PWindow); virtual;

Beschreibung  Restauriert einen modalen Dialog, wenn aus diesem
              heraus ein weiterer Dialog aufgerufen und wieder
              beendet wurde. In p wird der Pointer auf das ent-
              sprechende Dialogobjekt Åbergeben. Nicht-modale
              Dialoge (und damit auch Fenster) werden auto-
              matisch beachtet.
              RestoreModalDialog wird von \#TDialog\# beim Verlassen
              eines modalen Dialogs und von \#FileSelect\# aufgerufen.
              Normalerweise braucht man diese Methode nicht selbst
              aufzurufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.Rubbox":sensitive,"Rubbox":sensitive)
TApplication.Rubbox (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Rubbox(WHnd,x,y,xmin,ymin,xmax,
                   ymax: integer; var r: GRECT): boolean; virtual;

Beschreibung  Wird von \#TWindow.WMButton\# und \#TApplication.MUButton\#
              aufgerufen, wenn der Benutzer eine Rubbox ("Gummi-
              bandbox") aufziehen will. Rubbox kÅmmert sich um die
              komplette Abarbeitung eines solchen Vorgangs (incl.
              korrektem Zeichnen unter Beachtung der Rechteckli-
              ste und dem Selektieren evtl. vorhandener \#TIcon\#-
              Objekte).
              In WHnd wird die GEM-Kennung des betreffenden Fen-
              sters oder \#DESK\# fÅr das Desktop Åbergeben. x und y
              geben die Anfangs-Mausposition an, xmin, ymin, xmax
              und ymax die (absoluten) Koordinaten des Begren-
              zungsrechtecks.
              Das Abbrechen des Aufziehens der Rubbox kann durch
              DrÅcken der rechten Maustaste bei gedrÅckter linker
              Maustaste erreicht werden.
              Wurde das Aufziehen nicht abgebrochen und ist die
              Rubbox nicht nur ein Pixel groû, enthÑlt r an-
              schlieûend die Endgrîûe der Rubbox und die Methode
              gibt true zurÅck. Ansonsten erhÑlt man false, und
              r wird nicht verÑndert.
              WÑhrend des Aufziehens wird bei einer énderung der
              Grîûe - abhÑngig von WHnd - entweder \#MURBoxChanged\#
              oder \#TWindow.WMRBoxChanged\# und \#TWindow.WMRBoxCheck\#
              des zugehîrigen Fensters aufgerufen.

Querverweise  \#TApplication\#

\end


screen("TApplication.Run":sensitive,"Run":sensitive)
TApplication.Run (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Run; virtual;

Beschreibung  Ist normalerweise die einzige Methode (auûer den
              TApplication-Methode \link("TApplication.Init")Init\# und \link("TApplication.Done")Done\#), die innerhalb
              des Hauptprogramms aufgerufen wird.
              Zuerst wird hier der Mauscursor mit \#ArrowMouse\# als
              Pfeil dargestellt. Wenn \link("TApplication.Status")Status\# einen nichtnegativen
              Wert enthÑlt, wird danach \#TApplication.MessageLoop\#
              aufgerufen und damit das eigentliche Programm
              "gestartet".
              Auûerdem wird \#TApplication.Terminate\# am Ende des
              Programms nur dann aufgerufen, wenn die Programm-
              ausfÅhrung erfolgreich bis zu diesem Punkt gelangt
              ist!

Querverweise  \#TApplication\#


Beispiel      program Minimal;

                var MyApp: TApplication;

              begin
                MyApp.Init('MINI','Minimal!');
                MyApp.Run;
                MyApp.Done
              end.

\end


screen("TApplication.SetQuit":sensitive,"SetQuit":sensitive)
TApplication.SetQuit (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetQuit(mNum,tNum: integer); virtual;

Beschreibung  Ermîglicht es, dem \#TKeyMenu\#-Objekt, das in der
              Methode \#TApplication.InitInstance\# zum Beenden des
              Programms durch <Control>+<Q> angelegt wird, den
              MenÅeintrag und den entsprechenden Titel zuzu-
              weisen, mit dem das Programm alternativ verlassen
              werden kann. Als Programmierer braucht man sich
              dann nicht weiter darum zu kÅmmern. mNum und tNum
              sind die Indizes von MenÅeintrag und -titel.
              SetQuit muû - sofern es verwendet wird - in
              InitInstance _nach_ dem Aufruf der geerbten
              Methode und \link("TApplication.LoadMenu")LoadMenu\# aufgerufen werden.

              HINWEIS: Mittlerweile gibt es im Rahmen des MenÅ-
              Protokolls mit \#GetMenuEntries\# eine elegantere
              Lîsung, zu deren Gunsten SetQuit nicht mehr ver-
              wendet werden sollte!

Querverweise  \#TApplication\#

\end


screen("TApplication.SetupVDI":sensitive)
TApplication.SetupVDI (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupVDI; virtual;

Beschreibung  Wird von \#TApplication.Init\# aufgerufen, um die VDI-
              Workstation mit festen Werten zu initialisieren.
              ZunÑchst werden jedoch - wenn \#GDOSActive\# true
              und \#as_LoadFonts\# gesetzt ist - alle verfÅgbaren
              GEM-Fonts nachgeladen. Daraus folgt, daû - wenn
              die Anwendung auf GEM-ZeichensÑtze zurÅckgreifen
              will - SetupVDI Åberschrieben werden muû und die
              geerbte Methode erst dann aufgerufen werden darf,
              wenn man as_LoadFonts gesetzt hat!
              Danach werden folgende Werte gesetzt (Schreib-
              weise abgekÅrzt): \#vswr_mode\#(\#MD_REPLACE\#), \#vsl_udsty\#
              ($5555), \#vsl_type\#(\#LT_SOLID\#), \#vsf_perimeter\#(\#PER_ON\#),
              \#vsl_color\#(\#Black\#), \#vsl_ends\#(\#LE_SQUARED\#,LE_SQUARED),
              \#vsm_type\#(\#MT_DOT\#), \#vsm_height\#(1), \#vsm_color\#(Black),
              \#vst_rotation\#(0), \#vsf_style\#(4), \#vsf_color\#(Black),
              \#vst_alignment\#(\#TA_LEFT\#,\#TA_BASELINE\#), \#vsl_width\#(1),
              \#vst_color\#(Black), \#vsf_interior\#(\#FIS_HOLLOW\#),
              \#vst_effects\#(\#TF_NORMAL\#).
              Auûerdem werden das Clipping auf die Grîûe des ge-
              samten Desktops, \#vst_font\# auf den ersten verfÅgba-
              ren Font (das ist normalerweise der Systemzeichen-
              satz) und dieser Font auf die "normale" Hîhe (d.h.
              die des "groûen" Fonts auf dem Desktop) gesetzt.

Querverweise  \#TApplication\#  \#TApplication.vdiHandle\#

\end


screen("TApplication.ShutCompleted":sensitive,"ShutCompleted":sensitive)
TApplication.ShutCompleted (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ShutCompleted(Stat,ErrID,
                                       ErrCode: integer); virtual;

Beschreibung  Wird von \#TApplication.MUMesag\# aufgerufen, wenn das
              Programm das System heruntergefahren hat (mittels
              \#shel_write\# Modus 4).
              Ist Stat=1, hat der Shutdown wie gewÅnscht funktio-
              niert, die Applikation kann nun mit ihren Aktionen
              fortfahren (fÅr entsprechende Reaktionen sollte
              ShutCompleted daher Åberschrieben werden, da stan-
              dardmÑûig nichts geschieht).
              Andernfalls erhÑlt man in ErrID die AES-ID des
              Programms, das den Shutdown nicht korrekt durch-
              fÅhren konnte, und in ErrCode den Grund des
              Scheiterns in Form eines Fehlercodes.

Querverweise  \#TApplication\#

\end


screen("TApplication.SHWDraw":sensitive,"SHWDraw":sensitive)
TApplication.SHWDraw (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SHWDraw(Drive: integer); virtual;

Beschreibung  Sollte von Applikationenan die System-Shell (den
              Desktop) geschickt werden, wenn auf einem Lauf-
              werk Dateien geÑndert wurden.
              Wenn man mit ObjectGEM eine Shell realisiert,
              erhÑlt man in dieser Methode also eine solche
              Meldung und kann entsprechend z.B. mit dem
              Update des Laufwerksfensters reagieren. In
              Drive wird die Laufwerksnummer (A=0, B=1 etc.)
              bzw. -1 zum Update aller Laufwerke Åbergeben.

Querverweise  \#TApplication\#

\end


screen("TApplication.Terminate":sensitive,"Terminate":sensitive)
TApplication.Terminate (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Terminate; virtual;

Beschreibung  Wird von \#TApplication.Done\# vor dem Verlassen des
              Programms (aber bereits _nach_ dem Schlieûen aller
              Fenster) aufgerufen, um eine korrekte Deinstal-
              lation zu ermîglichen.
              Diese Methode wird allerdings nur dann aufgerufen,
              wenn bis zum Aufruf von \#TApplication.Run\# keine
              Fehler aufgetreten sind, d.h. wenn die Installation
              geklappt hat.

Querverweise  \#TApplication\#

\end


screen("TApplication.VAProtoStatus":sensitive,"VAProtoStatus":sensitive)
TApplication.VAProtoStatus (Methode)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure VAProtoStatus(OrgID: integer; Msg: word;
                                          AName: string); virtual;

Beschreibung  OrgID bezeichnet die AES-Kennung des AV-Servers,
              Msg ist eine Bitmap der verstandenen Nachrichten
              und AName enthÑlt den Namen der Programmdatei.
              Die genaue Funktionsweise steht in der AV-Dokumen-
              tation und ist auch fÅr Programmierer an dieser
              Stelle _unwichtig_, da ObjectGEM die komplette Ver-
              waltung Åbernimmt.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.AVExit":sensitive,"AVExit":sensitive)
TApplication.AVExit (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure AVExit(OrgID: integer); virtual;

Beschreibung  OrgID bezeichnet die AES-Kennung der Applikation,
              die nicht mehr am AV-Protokoll teilnimmt.
              Die genaue Funktionsweise steht in der AV-Dokumen-
              tation und ist auch fÅr Programmierer an dieser
              Stelle _unwichtig_, da ObjectGEM die komplette Ver-
              waltung Åbernimmt.

Querverweise  \#TApplication.XAccExit\#  \#XAcc- und AV-Protokoll\#
              \#TApplication\#

\end


screen("TApplication.AVInsert":sensitive,"AVInsert":sensitive)
TApplication.AVInsert (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function AVInsert(accID: integer; SrvMsg,
                           AccMsg: word; AName: string): boolean;
                                                        virtual;

Beschreibung  Diese Methode wird immer dann aufgerufen, wenn sich
              eine neue AV-Applikation angemeldet hat. Wenn die
              Applikation bereits angemeldet ist (sollte nicht
              vorkommen), wird false zurÅckgegeben. Ansonsten ist
              die RÅckgabe true, die Daten werden ausgewertet und
              in die \#XAccList\# eingetragen.
              Wenn man darauf wartet, daû sich eine bestimmte
              Applikation ins System einklinkt, sollte man diese
              Methode Åberschreiben und nach Aufruf der geerbten
              Methode die XAccList auswerten.

Querverweise  \#TApplication.FindApplication\#  \#TApplication\#
              \#TApplication.XAccInsert\#       \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.AVProtokoll":sensitive,"AVProtokoll":sensitive)
TApplication.AVProtokoll (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure AVProtokoll(OrgID: integer; Msg: word;
                                          AName: string); virtual;

Beschreibung  OrgID bezeichnet die AES-Kennung des Accessories,
              Msg ist eine Bitmap der verstandenen Nachrichten
              und AName enthÑlt den Namen der Programmdatei.
              Die genaue Funktionsweise steht in der AV-Dokumen-
              tation und ist auch fÅr Programmierer an dieser
              Stelle _unwichtig_, da ObjectGEM die komplette Ver-
              waltung Åbernimmt.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.AVStartProg":sensitive,"AVStartProg":sensitive)
TApplication.AVStartProg (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure AVStartProg(OrgID,Ret: integer;
                                     Prg,Cmd: string); virtual;

Beschreibung  Nach dem Empfang dieser Message wird - sofern das
              Programm _kein_ Acessory ist - die Applikation
              Prg mit \#Pexec\#(0,Prg,Cmd,nil) nachgestartet.
              Nach dem Start wird an den Absender der Ursprungs-
              message eine \#VA_PROGSTART\#-Message mit dem Return-
              Code Ret geschickt.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.AVSendKey":sensitive,"AVSendKey":sensitive)
TApplication.AVSendKey (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure AVSendKey(Stat,Key: integer); virtual;

Beschreibung  Der in dieser Message empfangene Tastendruck wird
              direkt an \#MUKeybd\# weitergeleitet.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.VAStart":sensitive,"VAStart":sensitive)
TApplication.VAStart (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure VAStart(OrgID: integer; Cmd: string);
                                                        virtual;

Beschreibung  Das Accessory soll sich îffnen. \#rpTail\# wird auf
              Cmd gesetzt, danach wird \#ACOpen\#(\#menuID\#) aufge-
              rufen.
              In OrgID erhÑlt man die AES-ID der aufrufenden
              Shell (z.B. Gemini).

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccAcc":sensitive,"XAccAcc":sensitive)
TApplication.XAccAcc (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure XAccAcc(accID,mID: integer; Msg,
                                Ver: byte; pName: PChar); virtual;

Beschreibung  accID bezeichnet die AES-Kennung des bei der Haupt-
              applikation angemeldeten Accessories (bzw. unter
              \#MultiTOS\# die Applikations-Kennung selbst).
              mID, Msg und Ver entsprechen den Feldern im Record
              \#TXAccAttr\#, pName zeigt auf den Namen des Accesso-
              ries incl. der "Extended names".
              Die genaue Funktionsweise steht in der XAcc-
              Dokumentation und ist auch fÅr Programmierer
              an dieser Stelle _unwichtig_, da ObjectGEM die
              komplette Verwaltung Åbernimmt.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccExit":sensitive,"XAccExit":sensitive)
TApplication.XAccExit (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure XAccExit(OrgID: integer); virtual;

Beschreibung  OrgID bezeichnet die AES-Kennung der terminierenden
              Applikation.
              Die genaue Funktionsweise steht in der XAcc-
              Dokumentation und ist auch fÅr Programmierer
              an dieser Stelle _unwichtig_, da ObjectGEM die
              komplette Verwaltung Åbernimmt.

Querverweise  \#TApplication.AVExit\#  \#XAcc- und AV-Protokoll\#
              \#TApplication\#

\end


screen("TApplication.XAccID":sensitive,"XAccID":sensitive)
TApplication.XAccID (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure XAccID(OrgID,mID: integer; Msg,
                                Ver: byte; pName: PChar); virtual;

Beschreibung  OrgID bezeichnet die AES-Kennung der neu gestarte-
              ten Applikation oder des Accessories. mID, Msg und
              Ver entsprechen den Feldern im Record \#TXAccAttr\#,
              pName zeigt auf den Namen des Accessories incl.
              der "Extended names".
              Die genaue Funktionsweise steht in der XAcc-
              Dokumentation und ist auch fÅr Programmierer
              an dieser Stelle _unwichtig_, da ObjectGEM die
              komplette Verwaltung Åbernimmt.

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccIMG":sensitive,"XAccIMG":sensitive)
TApplication.XAccIMG (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function XAccIMG(OrgID: integer; pData: pointer;
                         lData: longint; Final: boolean): boolean;
                                                          virtual;

Beschreibung  Mit dieser Methode kînnen IMG-Rastergrafiken emp-
              fangen werden. OrgID bezeichnet die AES-Kennung des
              Senders, pData zeigt auf die Daten (die unter
              \#MultiTOS\# im globalen Speicher liegen mÅssen).
              Die Grafik muû nicht an einem StÅck gesendet wer-
              den, in diesem Fall ist Final erst dann true, wenn
              das letzte Teil versendet wird. lData gibt die
              LÑnge des zu verschickenden Teils in Bytes an.
              Wenn die Daten verarbeitet werden kînnen, muû
              true zurÅckgegeben werden. Standard-RÅckgabe
              ist false.
              WICHTIG: Um das Einlesen und Verarbeiten innerhalb
              dieser Methode muû man sich selbst kÅmmern!

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccInsert":sensitive,"XAccInsert":sensitive)
TApplication.XAccInsert (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function XAccInsert(accID,mID: integer; Msg,
                               Ver: byte; pName: PChar): boolean;
                                                          virtual;

Beschreibung  Diese Methode wird immer dann aufgerufen, wenn sich
              eine neue XAcc-Applikation angemeldet hat. Wenn die
              Applikation bereits angemeldet ist (sollte nicht
              vorkommen), wird false zurÅckgegeben. Ansonsten ist
              die RÅckgabe true, die Daten (incl. der "Extended
              names") werden ausgewertet und in die \#XAccList\#
              eingetragen.
              Wenn man darauf wartet, daû sich eine bestimmte
              Applikation (bzw. ein Programmtyp) ins System
              einklinkt, sollte man diese Methode Åberschreiben
              und nach Aufruf der geerbten Methode die XAccList
              auswerten.
              WICHTIG: Wenn pName einen Zeiger<=$7fff enthÑlt,
              geht die Methode davon aus, daû ein falscher
              Pointer Åbergeben wurde und ignoriert den Aufruf!

Querverweise  \#TApplication.FindApplication\#  \#TApplication\#
              \#TApplication.AVInsert\#         \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccKey":sensitive,"XAccKey":sensitive)
TApplication.XAccKey (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function XAccKey(OrgID,Stat,Key: integer): boolean;
                                                          virtual;

Beschreibung  Mit dieser Methode kann ein Tastendruck empfangen
              werden. OrgID ist die AES-Kennung der sendenden
              Applikation, Key enthÑlt den Scancode der Taste
              und Stat den Status der Umschalttasten.
              Wenn der Tastendruck verarbeitet werden kann,
              muû true zurÅckgegeben werden. ObjectGEM leitet
              die Nachricht standardmÑûig an \#MUKeybd\# weiter.

Querverweise  \#TApplication\#  \#MapKey\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccMeta":sensitive,"XAccMeta":sensitive)
TApplication.XAccMeta (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function XAccMeta(OrgID: integer; pData: pointer;
                         lData: longint; Final: boolean): boolean;
                                                          virtual;

Beschreibung  Mit dieser Methode kînnen GEM-Vektorgrafiken emp-
              fangen werden. OrgID bezeichnet die AES-Kennung des
              Senders, pData zeigt auf die Daten (die unter
              \#MultiTOS\# im globalen Speicher liegen mÅssen).
              Die Grafik muû nicht an einem StÅck gesendet wer-
              den, in diesem Fall ist Final erst dann true, wenn
              das letzte Teil versendet wird. lData gibt die
              LÑnge des zu verschickenden Teils in Bytes an.
              Wenn die Daten verarbeitet werden kînnen, muû
              true zurÅckgegeben werden. Standard-RÅckgabe
              ist false.
              WICHTIG: Um das Einlesen und Verarbeiten innerhalb
              dieser Methode muû man sich selbst kÅmmern!

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.XAccText":sensitive,"XAccText":sensitive)
TApplication.XAccText (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function XAccText(OrgID: integer;
                                pText: pointer): boolean; virtual;

Beschreibung  Mit dieser Methode kînnen ASCII-Texte empfangen
              werden. OrgID bezeichnet die AES-Kennung des
              Senders, pText zeigt auf die Textdaten (die unter
              \#MultiTOS\# im globalen Speicher liegen mÅssen).
              Der Text darf nur ASCII-Codes>=32 enthalten, ab-
              gesehen von \#HT\# (Tab), \#LF\# und \#CR\#. Andere Steuer-
              zeichen dÅrfen nur dann verwendet werden, wenn der
              EmpfÑnger diese sicher auswerten kann.
              WICHTIG: Um das Einlesen und Verarbeiten innerhalb
              dieser Methode muû man sich selbst kÅmmern!

Querverweise  \#TApplication\#  \#XAcc- und AV-Protokoll\#

\end


screen("TApplication.IconSelect":sensitive)
TApplication.IconSelect (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure IconSelect(OnOff: boolean;
                                     OffExc: integer); virtual;

Beschreibung  Wenn OnOff true ist, werden alle Icons des Desktops
              selektiert. Andernfalls werden die Icons deselek-
              tiert (auch die der Fenster in der \#MainWindow\#-
              Liste) - mit Ausnahme des Fensters mit dem GEM-
              Handle OffExc (wobei auch \#DESK\# Åbergeben werden
              kann).
              Sollen _alle_ Icons deselektiert werden, muû fÅr
              OffExc \#id_No\# Åbergeben werden.

Querverweise  \#TApplication\#            \#TWindow.IconSelect\#
              \#TApplication.FirstIcon\#  \#TApplication.NextIcon\#

\end


screen("TApplication.FirstIcon":sensitive)
TApplication.FirstIcon (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstIcon(OnAll: boolean): \#PIcon\#; virtual;

Beschreibung  Ist OnAll true, wird ein Pointer auf das erste
              selektierte Icon geliefert. Ansonsten wird das
              erste von allen Icons zurÅckgegeben.
              Existiert kein entsprechendes Icon, erhÑlt man \#nil\#.

Querverweise  \#TApplication\#
              \#TApplication.NextIcon\#  \#TApplication.IconSelect\#

\end


screen("TApplication.NextIcon":sensitive)
TApplication.NextIcon (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function NextIcon: \#PIcon\#; virtual;

Beschreibung  Gibt das nÑchste selektiert Icon bzw. Icon Åber-
              haupt zurÅck, je nachdem, welche Parameter an
              \#TApplication.FirstIcon\# Åbergeben wurden.

Querverweise  \#TApplication\#  \#TApplication.IconSelect\#

\end


screen("TDialog":sensitive,"PDialog":sensitive)
TDialog                                              Unit \#OWindows\#
------------------------------------------------------------------

TDialog ist der grundlegende Objekttyp fÅr alle (Fenster-)Dialoge,
d.h. modale und nicht-modale Dialogboxen. Die Abarbeitung erfolgt
normalerweise automatisch, kann aber auch "von Hand" vorgenommen
werden.
Die einfache Bearbeitung eines modalen Dialogs kann auch mit
\#TApplication.ExecDialog\# durchgefÅhrt werden, allerdings sollten
Dialoge nach Mîglichkeit im Fenster (also nicht-modal) dargestellt
werden, da sonst das gesamte System blockiert wird, was unter
einem Multitasking-Betriebssystem Probleme bereiten kann.

	Pointer
		PDialog = ^TDialog;

	Felder
		\#Cont\#
		\#CtrlList\#
		\#IsModal\#
		\#Result\#
		\#TransferBuffer\#

	Methoden
		\link("TDialog.Init")Init\#
		\link("TDialog.Done")Done\#
		\#CallChanged\#
	  \#Cancel\#
	  \link("TDialog.CloseWindow")CloseWindow\#
	  \link("TDialog.Copy")Copy\#
	  \link("TDialog.Create")Create\#
	  \link("TDialog.Cut")Cut\#
	  \link("TDialog.Delete")Delete\#
	  \link("TDialog.Destroy")Destroy\#
	  \#EndDlg\#
	  \link("TDialog.Esc")Esc\#
		\link("TDialog.Execute")Execute\#
	  \#ExitDlg\#
		\link("TDialog.FirstThat")FirstThat\#
		\link("TDialog.ForEach")ForEach\#
		\link("TDialog.FreeDialog")FreeDialog\#
	  \link("TDialog.GetClassName")GetClassName\#
	  \#GetDefaultButton\#
		\#GetFocus\#
	  \#GetKBHandler\#
	  \link("TDialog.GetStyle")GetStyle\#
	  \link("TDialog.GetVDIHandle")GetVDIHandle\#
	  \link("TDialog.GetWindowClass")GetWindowClass\#
		\link("TDialog.GetWorkMax")GetWorkMax\#
	  \#Help\#
		\#InitFocus\#
	  \link("TDialog.IsDialog")IsDialog\#
	  \link("TDialog.LoadDialog")LoadDialog\#
	  \link("TDialog.MakeWindow")MakeWindow\#
	  \#ObjcPaint\#
	  \#OK\#
	  \link("TDialog.OpenWindow")OpenWindow\#
	  \link("TDialog.Paint")Paint\#
	  \link("TDialog.Paste")Paste\#
	  \#SetDefaultButton\#
		\#SetFocus\#
		\link("TDialog.SetupSize")SetupSize\#
	  \link("TDialog.SetupWindow")SetupWindow\#
	  \#TransferData\#
	  \link("TDialog.Undo")Undo\#
	  \link("TDialog.UpdateDialog")UpdateDialog\#
		\link("TDialog.WMButton")WMButton\#
	  \link("TDialog.WMClosed")WMClosed\#

	Vorfahre
		\#TWindow\#
	Nachfahren
		---

\end


screen("TDialog.Cont":sensitive,"Cont":sensitive)
TDialog.Cont (Feld)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Cont: boolean;

Beschreibung  Dieses Flag zeigt an, ob die Dialogbearbeitung fort-
              gesetz wird (true) oder ob der Dialog beendet werden
              soll (false).
              Von \#TDialog.SetupWindow\# wird es auf false initiali-
              siert, von \#TDialog.OpenWindow\# auf true und von
              \#TDialog.CloseWindow\# wieder auf false gesetzt. Ver-
              Ñnderungen werden u.a. in \#TDialog.WMButton\# und im
              Tastatur-Handler des Dialogs durch ObjectGEM-in-
              terne \#form_button\#- bzw. \#form_keybd\#-Routinen vorge-
              nommen.
              Modale Dialoge nutzen dieses Flag in der Methode
              \#TDialog.Execute\# als Abbruchbedingung.
              Normalerweise muû dieses Flag weder beachtet noch
              manipuliert werden, einzig in \#TDialog.EndDlg\# kann
              dadurch die Abarbeitung sinnvoll gesteuert werden
              (aber auch dort gibt es genug andere Mîglichkeiten,
              die auch genutzt werden sollten).

Querverweise  \#TDialog\#  \#TDialog.GetKBHandler\#

\end


screen("TDialog.CtrlList":sensitive,"CtrlList":sensitive)
TDialog.CtrlList (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   CtrlList: PControl;  (nur lesen)

Beschreibung  In dieser Liste werden die Dialogelementobjekte ver-
              waltet. \#TControl\#-Schnittstellenobjekte tragen sich
              bei ihrer Initialisierung hier ein. Alle Auswertun-
              gen der Benutzeraktionen werden mit den Objekten in
              dieser Liste durchgefÅhrt.
              Mit \#TDialog.FirstThat\# und \#TDialog.ForEach\# kann diese
              Liste recht einfach durchlaufen werden.
              Wird von \#TDialog.SetupWindow\# mit \#nil\# initialisiert.

Querverweise  \#TDialog\#

\end


screen("TDialog.IsModal":sensitive,"IsModal":sensitive)
TDialog.IsModal (Feld)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   IsModal: boolean;  (nur lesen)

Beschreibung  Dieses Flag gibt an, ob es sich um einen modalen
              Dialog handelt (true), d.h. das System wird wÑhrend
              der Abarbeitung blockiert. _Nur_ dieses Flag darf
              zur Unterscheidung zwischen modalen und nicht-
              modalen Dialogen verwendet werden!
              Wird von \#TDialog.SetupWindow\# gesetzt und von
              \#TDialog.Create\# nîtigenfalls korrigiert. Modale
              Dialoge werden mit \#TDialog.Execute\# abgearbeitet.

Querverweise  \#TDialog\#  \#TDialog.IsDialog\#  \#TWindow.IsModeless\#

\end


screen("TDialog.Result":sensitive,"Result":sensitive)
TDialog.Result (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Result: integer;

Beschreibung  In diesem Feld steht nach erfolgreicher Abarbeitung
              des Dialogs der Index des Dialogelements, mit dem
              die Dialogbox verlassen wurde.
              Wird z.B. von den Methoden \#TApplication.ExecDialog\#
              und \#TApplication.Alert\# benîtigt, derentwegen nor-
              malerweise kein direkter Zugriff auf dieses Feld
              nîtig ist.

Querverweise  \#TDialog\#  \#TDialog.EndDlg\#

\end


screen("TDialog.TransferBuffer":sensitive,"TransferBuffer":sensitive)
TDialog.TransferBuffer (Feld)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   TransferBuffer: pointer;

Beschreibung  Dieses Feld kann auf einen sog. Transfer-Puffer des
              Dialogs zeigen, der das Belegen und Auswerten aller
              Dialogelementobjekte, die am Datentransfermechanis-
              mus teilnehmen kînnen, erheblich vereinfacht.
              Wird von \#TDialog.SetupWindow\# auf \#nil\# gesetzt, d.h.
              der Transfermechanismus ist ausgeschaltet. Will man
              einen Transfer-Puffer installieren, sollte man die
              Methode SetupWindow Åberschreiben und nach dem Auf-
              ruf der geerbten Methode TransferBuffer auf diesen
              Puffer (der schon wie gewÅnscht vorbelegt sein
              sollte) setzen.
              Ein Transfer-Puffer ist normalerweise ein Record,
              in dem fÅr alle Dialogelementobjekte _in der Reihen-
              folge ihrer Initialisierung_ (!) Felder vorhanden
              sind. Dialogelementobjekten, die keine Daten Åber-
              tragen, werden auch keine Felder zugewiesen.
              Folgende Felder sind z.Z. notwendig:

                Objekt        Transferpuffer-Feld
                --------------------------------------------------
                TCheckBox     ein \#word\# (oder \#integer\#), das eine
                              der \#bf_XXXX-Konstanten\# enthÑlt
                TTriState     siehe TCheckBox
                TRadioButton  siehe TCheckBox
                TScrollBar    ein \#TScrollBarTransferRec\#-Record
                              zum Speichern des Bereichs und der
                              Position der Bildlaufleiste
                TStatic       ein \#string\#[x], wobei x:=\#TextLen\#-1
                              ist (d.h. die maximale Anzahl von
                              Zeichen in diesem Textobjekt _ohne_
                              das abschlieûende Nullbyte);
                              ist x _gerade_, _muû_ x um eins
                              erhîht werden!
                TEdit         siehe TStatic
                TComboBox     wenn die ComboBox mit einem Eingabe-
                              feld verknÅpft ist, wird zuerst ein
                              string (siehe TStatic) und dann ein
                              integer gespeichert; ansonsten wird
                              nur ein integer verwendet

              Von den ObjectGEM-Dialogelementobjekten fÅhren
              \#TControl\#, \#TButton\# und \#TGroupBox\# keinen Transfer
              durch. Einzelne Objekte kînnen mit den Methoden
              \#TControl.DisableTransfer\# und \#TControl.EnableTransfer\#
              vom Datentransfer ausgenommen bzw. daran beteiligt
              werden.
              Wenn man mit eigenen Dialogelementobjekten neue
              Feldtypen einfÅhrt, muû man beachten, daû jeder
              Typ eine _gerade_ LÑnge haben muû, da es sonst
              frÅher oder spÑter zu einem Adreûfehler kommt...

Querverweise  \#TDialog\#  \#TDialog.TransferData\#


Beispiel      type SampleTransferRecord =
                record
                  stat1   : string[x];  { zur Berechnung von }
                  edit1   : string[y];  { x bzw. y  s.o.     }
                  check1  : word;
                  radio1  : word;
                  tri1    : word;
                  scroll1 : TScrollBarTransferRec;
                  combed1s: string[z];
                  combed1i: integer;
                  comb2   : integer
                end;

\end


screen("TDialog.Init":sensitive)
TDialog.Init (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PWindow; ATitle: string;
                                                  Indx: integer);

Beschreibung  Ruft den Vorfahren \#TWindow.Init\# auf und weist dem
              Objekt mittels \#TDialog.LoadDialog\# den Dialogbaum
              mit dem Index Indx zu. Zum Schluû wird die Methode
              \#TDialog.SetupSize\# aufgerufen.
              Wird in Indx \#id_No\# Åbergeben, wird der Dialog-
              baum _nicht_ gesetzt; man sollte dann so bald wie
              mîglich die Methoden \#SetDlgTree\# und SetupSize
              selbst aufrufen. Diese Option sollte normalerweise
              nicht verwendet werden, allerdings kînnen so im
              Speicher erzeugte Resourcen verwendet werden
              (das wird z.B. von \#TApplication.Alert\# gemacht).

Querverweise  \#TDialog\#

\end


screen("TDialog.Done":sensitive)
TDialog.Done (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt alle Objekte der \#CtrlList\#-Liste frei und ruft
              dann den Vorfahren \#TWindow.Done\# auf.

Querverweise  \#TDialog\#

\end


screen("TDialog.GetVDIHandle":sensitive)
TDialog.GetVDIHandle (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetVDIHandle: integer; virtual;

Beschreibung  Gibt \#TApplication.vdiHandle\# zurÅck, d.h. Dialoge
              besitzen standardmÑûig _keine_ eigene VDI-Work-
              station.

Querverweise  \#TDialog\#  \#TWindow.GetVDIHandle\#

\end


screen("TDialog.CallChanged":sensitive,"CallChanged":sensitive)
TDialog.CallChanged (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure CallChanged(Indx: integer; dclk,
                                     edt,push: boolean); virtual;

Beschreibung  Wird immer dann aufgerufen, wenn ein anderes
              Dialogelement(-objekt) aktiv wird. In Indx wird
              der Index des neu aktiven Elements Åbergeben. dclk
              ist true, wenn die Anwahl durch Doppelklick erfolgt
              ist; edt ist true, wenn es sich bei dem neuen Ele-
              ment um ein Eingabefeld handelt (wird - wie push -
              intern benîtigt).
              CallChanged versucht, per \#TControl.TestIndex\# das
              zum Dialogelement gehîrige Dialogelementobjekt zu
              finden. War die Suche erfolgreich, wird anschlie-
              ûend \#TControl.Changed\# des betreffenden Objekts
              aufgerufen.
              Diese Methode sollte man nicht direkt aufrufen.
              Allerdings kann man sich durch öberschreiben in
              den Zeitpunkt einklinken, an dem die Benutzer-
              aktionen am besten "Åberwacht" werden kînnen.

Querverweise  \#TDialog\#

\end


screen("TDialog.Cancel":sensitive,"Cancel":sensitive)
TDialog.Cancel (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Cancel: boolean; virtual;

Beschreibung  Wird aufgerufen, wenn der Dialog abgebrochen werden
              soll (z.B. weil der Benutzer auf <Abbruch> geklickt
              hat). Die RÅckgabe ist true (default), wenn der
              Dialog beendet werden darf, false sonst.
              Wenn man diese Methode Åberschreibt, kann man auf
              den Abbruch angemessen reagieren (standardmÑûig
              passiert nichts).

Querverweise  \#TDialog\#  \#TDialog.WMClosed\#  \#TDialog.EndDlg\#

\end


screen("TDialog.CloseWindow":sensitive)
TDialog.CloseWindow (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure CloseWindow; virtual;

Beschreibung  Schlieût alle untergeordneten Fenster und beendet
              die Dialogbearbeitung (\#TDialog.Cont\# wird auf false
              gesetzt). Bei modalen Dialogen wird der Hinter-
              grund restauriert, bei nicht-modalen Dialogen
              wird \#TWindow.CloseWindow\# aufgerufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.Create":sensitive)
TDialog.Create (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Create; virtual;

Beschreibung  Wird von \#TDialog.MakeWindow\# aufgerufen, um den
              (Fenster-)Dialog zu erzeugen; natÅrlich kann diese
              Methode auch "von Hand" aufgerufen werden.
              Wenn \#ws_ex_Modeless\# nicht gesetzt ist oder
              \#ws_ex_TryModeless\# gesetzt, aber kein GEM-Fenster
              mehr verfÅgbar ist, wird \#TDialog.IsModal\# auf false
              gesetzt.
              Ist bis jetzt kein Fehler aufgetreten, wird
              \#Attr.Status\# auf \#ws_Created\# gesetzt, und die Abmes-
              sungen und Position des Dialog(fenster)s werden er-
              mittelt, wobei \#ws_ex_Center\#, \#ws_ex_Center2Parent\#,
              \#ws_ex_CenterOnce\# und ein evtl. vorhandener virtuel-
              ler Bildschirm (VSCR-Cookie) beachtet werden.
              Schlieûlich werden noch alle untergeordneten Dia-
              loge erzeugt.

Querverweise  \#TDialog\#

\end


screen("TDialog.Destroy":sensitive)
TDialog.Destroy (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Destroy; virtual;

Beschreibung  Zerstîrt zunÑchst alle untergeordneten Dialoge.
              Danach wird der Dialog geschlossen (sofern dies
              noch nicht geschehen ist); bei modalen Dialogen
              wird nun \#IsModal\# auf false und \#Attr.Status\# auf
              \#ws_NoWindow\# gesetzt, bei nicht-modalen Dialogen
              wird \#TWindow.Destroy\# aufgerufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.EndDlg":sensitive,"EndDlg":sensitive)
TDialog.EndDlg (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure EndDlg(Indx: integer; DblClick: boolean);
                                                          virtual;

Beschreibung  Wird von \#TDialog.WMButton\# und vom Tastatur-Handler
              aufgerufen, wenn der Benutzer ein Dialogelement an-
              gewÑhlt hat, mit dem der Dialog beendet werden kann.
              In Indx wird der Index des betreffenden Dialog-
              elements Åbergeben; ist DblClick true, erfolgte die
              Anwahl mit Doppelklick.
              ZunÑchst wird \#TDialog.Result\# auf Indx gesetzt. Dann
              wird mit \#TControl.TestID\# ÅberprÅft, ob das zum Dia-
              logelement gehîrige Objekt eine der Konstanten
              \#id_OK\#, \#id_Cancel\#, \#id_Help\#, \#id_Undo\# oder \#id_Esc\# ent-
              hÑlt; ist dies der Fall, wird entsprechend \#OK\#,
              \#Cancel\#, \link("TDialog.Help")Help\#, \link("TDialog.Undo")Undo\# oder \link("TDialog.Esc")Esc\# aufgerufen. Besitzt
              das Objekt den Wert \#id_NoExit\#, wird der Dialog
              einfach nicht beendet.
              Konnte kein Objekt fÅr das Dialogelement gefunden
              werden, wird \#TDialog.ExitDlg\# gefragt, ob der Dialog
              beendet werden soll.
              Hat EndDlg bis jetzt keine positive Antwort zum
              Verlassen des Dialogs erhalten, wird die Dialogbe-
              arbeitung normal fortgesetzt. Ansonsten hÑngt das
              Ende nur noch von \link("TWindow.CanClose")CanClose\# ab.

Querverweise  \#TDialog\#  \#TDialog.GetKBHandler\#

\end


screen("TDialog.Esc":sensitive)
TDialog.Esc (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Esc: boolean; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Esc> gedrÅckt
              oder ein Dialogelement angeklickt hat und ein
              passendes Dialogelementobjekt existiert, das den
              Wert \#id_Esc\# besitzt.
              Die RÅckgabe ist true, wenn der Dialog beendet
              werden soll, false sonst (default).
              Wenn man diese Methode Åberschreibt, kann man z.B.
              die gerade laufende Aktion abbrechen.

Querverweise  \#TDialog\#  \#TDialog.EndDlg\#

\end


screen("TDialog.Execute":sensitive)
TDialog.Execute (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Execute; virtual;

Beschreibung  Wird von \#TDialog.MakeWindow\# aufgerufen, wenn der
              abzuarbeitende Dialog modal ist, da in diesem Fall
              nicht auf die Åblichen Routinen, die das System
              _nicht_ blockieren, zurÅckgegriffen werden kann.
              Solange \#TDialog.Cont\# true ist, wird mit \#evnt_multi\#
              auf Ereignisse gewartet, die dann an den Tastatur-
              Handler bzw. an \#TDialog.WMButton\# verteilt werden.
              Bei modalen Dialogen ist es auûerdem mîglich, diese
              durch Anklicken auf ein nicht anwÑhlbares Dialog-
              element (z.B. den Hintergrund) auf dem Bildschirm
              zu verschieben.
              WICHTIG: Wenn man Execute direkt aufruft, muû
              sichergestellt sein, daû das System sowohl mit
              \#wind_update\#(\#BEG_UPDATE\#) als auch mit wind_update
              (\#BEG_MCTRL\#) blockiert ist! Normalerweise kÅmmern
              sich \#TDialog.OpenWindow\#/\#TDialog.CloseWindow\# darum.

Querverweise  \#TDialog\#         \#TDialog.GetKBHandler\#
              \#TDialog.Result\#  \#TApplication.ExecDialog\#

\end


screen("TDialog.ExitDlg":sensitive,"ExitDlg":sensitive)
TDialog.ExitDlg (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ExitDlg(AnIndx: integer): boolean; virtual;

Beschreibung  Wird von \#TDialog.EndDlg\# aufgerufen, wenn der Be-
              nutzer ein Dialogelement angewÑhlt hat, mit dem
              der Dialog beendet werden kann, dem aber keine der
              \#id_XXXX-Konstanten\# zugewiesen ist.
              ExitDlg muû nun entscheiden, ob der Dialog ver-
              lassen werden soll. StandardmÑûig wird true zurÅck-
              gegeben, d.h. der Dialog wird beendet.
              In AnIndx wird der Index des angewÑhlten Dialog-
              elements Åbergeben.

Querverweise  \#TDialog\#

\end


screen("TDialog.FirstThat":sensitive)
TDialog.FirstThat (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FirstThat(Test: \#PIterationFunc\#): PControl;

Beschreibung  FirstThat ruft fÅr jedes Objekt der \#CtrlList\#-Liste
              die durch Test bestimmte boolesche Funktion auf, bis
              Test true zurÅckgibt. FirstThat gibt dann den Zeiger
              auf das Objekt zurÅck, fÅr den Test true zurÅckgege-
              ben hat, oder nil, falls Test immer false geliefert
              hat. Der Pointer Test sollte eine GLOBALE (Unter-
              schied zu ObjectWindows!) Funktion sein, der ein
              pointer-Parameter Åbergeben wird und die boolean
              zurÅckgibt.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Test-Funktion nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TDialog\#  \#TDialog.ForEach\#


Beispiel      function IstMarkiert(p: pointer): boolean;
                { ... }

              IstMarkiert sollte eine globale Funktion sein.
              Sei Dialog ein TDialog-Objekt:

              p:=Dialog.FirstThat(@IstMarkiert);

\end


screen("TDialog.ForEach":sensitive)
TDialog.ForEach (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ForEach(Action: \#PIterationProc\#);

Beschreibung  ForEach ruft fÅr jedes Objekt der \#CtrlList\#-Liste
              die durch Action bestimmte Prozedur auf. Der Pointer
              Action sollte eine GLOBALE (Unterschied zu Object-
              Windows!) Prozedur sein, der ein pointer-Parameter
              Åbergeben wird.
              ACHTUNG: Im Gegensatz zu ObjectWindows kann bei
              einer lokalen Prozedur nicht auf die Variablen
              der Åbergeordneten Routine zugegriffen werden!

Querverweise  \#TDialog\#  \#TDialog.FirstThat\#


Beispiel      procedure Markiere(p: pointer);
                { ... }

              Markiere sollte eine globale Prozedur sein.
              Sei Dialog ein TDialog-Objekt:

              Dialog.ForEach(@Markiere);

\end


screen("TDialog.GetClassName":sensitive)
TDialog.GetClassName (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClassName: string; virtual;

Beschreibung  Gibt den Namen der Dialogklasse zurÅck. Abgeleitete
              Dialogobjekte, die wesentliche VerÑnderungen bzw.
              Erweiterungen gegenÅber TDialog besitzen, sollten
              diese Methode Åberschreiben, um einen anderen Namen
              zu liefern. TDialog gibt 'Dialog' zurÅck.

Querverweise  \#TDialog\#  \#TWindow.GetClassName\#

\end


screen("TDialog.GetFocus":sensitive,"GetFocus":sensitive)
TDialog.GetFocus (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetFocus: integer; virtual;

Beschreibung  Wenn der Dialog mind. ein Eingabefeld besitzt, gibt
              GetFocus den Index des Feldes zurÅck, in dem sich
              z.Z. der Eingabecursor befindet.
              Besitzt der Dialog kein Eingabefeld oder ist der
              Eingabecursor momentan nicht aktiv, erhÑlt man als
              RÅckgabe \#id_No\#.

Querverweise  \#TDialog\#  \#TDialog.SetFocus\#  \#TDialog.InitFocus\#

\end


screen("TDialog.GetKBHandler":sensitive,"GetKBHandler":sensitive)
TDialog.GetKBHandler (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetKBHandler: PEvent; virtual;

Beschreibung  Gibt einen Pointer auf den Tastatur-Handler des
              Dialogobjekts zurÅck. Der Handler ist nichts
              anderes als ein \#TEvent\#-Objekt, das direkt aufge-
              rufen wird.
              Das Objekt wird in \#TDialog.SetupWindow\# initiali-
              siert, vorher gibt GetKBHandler \#nil\# zurÅck.
              Als einzige Methode wurde \link("TEvent.TestKey")TestKey\# effektiv gemacht
              (d.h. Åberschrieben). Innerhalb dieser Methode
              werden die Alternate-Shortcuts sowie die <Help>-,
              <Undo>- und <Esc>-Taste ausgewertet. Auûerdem wird
              hier die BubbleHelp realisiert.

Querverweise  \#TDialog\#

\end


screen("TDialog.GetStyle":sensitive)
TDialog.GetStyle (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetStyle: integer; virtual;

Beschreibung  Gibt eine Bitmap der GEM-Fensterkomponenten zurÅck,
              die fÅr \#TDialog.Create\# benîtigt wird.
              TDialog.GetStyle liefert \#NAME\# or \#CLOSER\# or \#MOVER\#.
              Sollen andere Fensterelemente benutzt werden, muû
              man diese Methode Åberschreiben (es ist z.B. kein
              Problem, auch einem Dialogfenster ein \#SIZER\#-
              Element zuzuweisen).
              Ab AES 4.10 wird zusÑtzlich \#SMALLER\# fÅr die
              \#Iconification\# geliefert und, wenn der Backdrop-
              Mechanismus unterstÅtzt wird, \#BACKDROP\# (z.Z. nur
              unter Mag!C).

Querverweise  \#TDialog\#  \#TWindow.GetStyle\#

\end


screen("TDialog.GetWindowClass":sensitive)
TDialog.GetWindowClass (Methode)                     Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWindowClass(var AWndClass: \#TWndClass\#);
                                                          virtual;

Beschreibung  FÅllt das Feld \#Class\# aus, das die Dialogklasse
              beschreibt. Soll der Fensterdialog andere grund-
              legende Eigenschaften besitzen, muû diese Methode
              Åberschrieben werden.
              WICHTIG: In diesem Fall muû in der neuen Methode
              zuerst die ursprÅngliche Methode aufgerufen werden,
              da es sonst mit einiger Sicherheit einen Programm-
              absturz gibt...
              Von den Werten, die \#TWindow.GetWindowClass\# er-
              mittelt, wird \#cs_CreateOnAccOpen\# gelîscht und
              \#cs_SaveBits\# bzw. \#cs_WorkBackground\# neu gesetzt.
              \link("Class.hbrBackground")hbrBackground\# wird auf Null gesetzt.

Querverweise  \#TDialog\#


Beispiel      procedure TD.GetWindowClass(var AWndClass: TWndClass);

                begin
                  inherited GetWindowClass(AWndClass);
                  { ... }
                end;

\end


screen("TDialog.GetWorkMax":sensitive)
TDialog.GetWorkMax (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetWorkMax(var maxX,maxY: integer);
                                                      virtual;

Beschreibung  maxX und maxY werden auf die grîûe des Hintergrund-
              objekts der Dialogbox gesetzt, d.h. bei einem Fen-
              sterdialog kann das Fenster nie grîûer als die
              Dialogbox werden.

Querverweise  \#TDialog\#  \#TWindow.GetWorkMax\#

\end


screen("TDialog.Help":sensitive,"Help":sensitive)
TDialog.Help (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Help: boolean; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Help> gedrÅckt
              oder ein Dialogelement angeklickt hat und ein
              passendes Dialogelementobjekt existiert, das den
              Wert \#id_Help\# besitzt.
              Die RÅckgabe ist true, wenn der Dialog beendet
              werden soll, false sonst (default).
              Wenn man diese Methode Åberschreibt, kann man z.B.
              eine grîûere Hilfe-Dialogbox zum gerade aktuellen
              Dialog anzeigen.

Querverweise  \#TDialog\#  \#TDialog.EndDlg\#

\end


screen("TDialog.InitFocus":sensitive,"InitFocus":sensitive)
TDialog.InitFocus (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure InitFocus; virtual;

Beschreibung  Initialisiert den Eingabecursor, d.h. dieser wird
              auf das (von der Resource-Hierarchie her) erste
              Eingabefeld gesetzt. Wird von \#TDialog.SetFocus\# auf-
              gerufen.

Querverweise  \#TDialog\#  \#TDialog.GetFocus\#

\end


screen("TDialog.IsDialog":sensitive)
TDialog.IsDialog (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsDialog: boolean; virtual;

Beschreibung  Gibt true zurÅck, d.h. das Fenster ist ein Dialog-
              fenster. Wird intern benîtigt, da TWindow- und
              TDialog-Objekte in den gleichen Listen (\#MainWindow\#
              bzw. \#ChildList\#) verwaltet werden.

Querverweise  \#TDialog\#  \#TDialog.IsModal\#  \#TWindow.IsModeless\#
                                        \#TWindow.IsDialog\#

\end


screen("TDialog.LoadDialog":sensitive)
TDialog.LoadDialog (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LoadDialog(Indx: integer); virtual;

Beschreibung  Wird von \#TDialog.Init\# aufgerufen, um den Dialog
              im Objektbaum Indx mit dem Dialogobjekt zu ver-
              knÅpfen.
              Damit der Dialogbaum in beliebig vielen Fenstern
              _gleichzeitig_ verwendet und bearbeitet werden
              kann, wird der komplette Baum umkopiert, so daû
              alle énderungen an einer Kopie vorgenommen werden,
              die von \#TDialog.FreeDialog\# wieder gelîscht wird.
              Wenn der Åbergebene Dialogbaum gÅltig ist, wird
              anschlieûend \#TWindow.LoadDialog\# aufgerufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.FreeDialog":sensitive)
TDialog.FreeDialog (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure FreeDialog; virtual;

Beschreibung  Gibt den mit \#TDialog.LoadDialog\# installierten
              Dialogbaum (und den dafÅr allozierten Speicher)
              wieder frei.

Querverweise  \#TDialog\#

\end


screen("TDialog.MakeWindow":sensitive)
TDialog.MakeWindow (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure MakeWindow; virtual;

Beschreibung  Ruft zuerst \link("TDialog.Create")Create\# und dann \link("TDialog.OpenWindow")OpenWindow\# auf.
              Handelt es sich um einen modalen Dialog, wird
              dieser dann mit \link("TDialog.Execute")Execute\# abgearbeitet.

Querverweise  \#TDialog\#  \#TDialog.IsModal\#  \#TWindow.MakeWindow\#

\end


screen("TDialog.ObjcPaint":sensitive,"ObjcPaint":sensitive)
TDialog.ObjcPaint (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ObjcPaint(Indx: integer; Lazy: boolean);
                                                         virtual;

Beschreibung  Zeichnet das Dialogelement mit dem Index Indx neu.
              Dabei wird beachtet, ob der Dialog geîffnet ist und
              ob er sich in einem Fenster befindet.
              Ist Lazy true und AES 4.0 oder hîher vorhanden,
              wird das Dialogelement nur gezeichnet, wenn keine
              andere Applikation den Bildschirm blockiert. So
              kînnen z.B. Statusanzeigen realisiert werden.
              Wird u.a. von \#TControl.Paint\# aufgerufen.

Querverweise  \#TDialog\#  \#wb_Lazy\#

\end


screen("TDialog.OK":sensitive,"OK":sensitive)
TDialog.OK (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function OK: boolean; virtual;

Beschreibung  Wird aufgerufen, wenn der Dialog erfolgreich been-
              det werden soll (z.B. weil der Benutzer auf <OK>
              geklickt hat). Die RÅckgabe ist true, wenn der
              Dialog beendet werden darf, false sonst.
              Intern werden zunÑchst alle \#TEdit\#-Objekte mit
              deren \link("TEdit.CanClose")CanClose\#-Methode ÅberprÅft. Liefern alle
              true zurÅck, wird anschlieûend die Methode
              \#TransferData\#(\#tf_GetData\#) aufgerufen und true
              zurÅckgegeben.

Querverweise  \#TDialog\#  \#TDialog.WMClosed\#  \#TDialog.EndDlg\#

\end


screen("TDialog.OpenWindow":sensitive)
TDialog.OpenWindow (Methode)                         Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure OpenWindow; virtual;

Beschreibung  Wird von \#TDialog.MakeWindow\# aufgerufen.
              ZunÑchst wird geprÅft, ob \#ws_ex_Popup\# gesetzt ist
              und die Dialogposition evtl. korrigiert. Dann wird
              der Eingabecursor initialisiert und \#TransferData\#
              mit dem Parameter \#tf_SetData\# aufgerufen.
              Wenn es sich um einen modalen Dialog handelt, wird
              nun eine \#wind_update\#-Schachtelung sowohl mit
              \#BEG_UPDATE\# als auch mit \#BEG_MCTRL\# durchgefÅhrt.
              Danach wird \#Attr.Status\# auf \#ws_Open\# gesetzt und
              der Dialog gezeichnet.
              Ansonsten wird die geerbte \#TWindow.OpenWindow\#-
              Methode aufgerufen.

Querverweise  \#TDialog\#  \#TDialog.IsModal\#

\end


screen("TDialog.Paint":sensitive)
TDialog.Paint (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint(var PaintInfo: \#TPaintStruct\#);
                                                      virtual;

Beschreibung  Mittels \#objc_draw\#() wird die Dialogbox gezeichnet.
              Anschlieûend wird noch der Eingabecursor darge-
              stellt.
              Diese Methode sollte _nie_ direkt aufgerufen werden,
              sondern immer nur mittels \#ForceRedraw\#, \#WMRedraw\# oder
              \#TApplication.InvalidateRect\#. Wer meint, dies
              dennoch tun zu mÅssen, muû darauf achten, vor dem
              Aufruf von Paint die Methoden \link("TDialog.UpdateDialog")UpdateDialog\# und
              \#InitPaint\# sowie nach dem Aufruf \#ExitPaint\# aufzu-
              rufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.SetFocus":sensitive,"SetFocus":sensitive)
TDialog.SetFocus (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetFocus(Obj: integer); virtual;

Beschreibung  Setzt den Eingabecursor auf das Eingabefeld mit dem
              Index Obj. Wenn dies kein gÅltiges Eingabefeld ist
              (Objekt ist versteckt, disabled oder Åberhaupt gar
              kein Eingabefeld), wird \#InitFocus\# aufgerufen.

Querverweise  \#TDialog\#  \#TEdit.Focus\#

\end


screen("TDialog.SetupSize":sensitive)
TDialog.SetupSize (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupSize; virtual;

Beschreibung  Berechnet die Anfangsgrîûe des Dialogfensters.
              Nach dem Aufruf von \#TWindow.SetupSize\# wird \link("TWindow.Work")Work\#
              an die Ausmaûe des Dialogs angepaût.
              Wird von \#TDialog.Init\# aufgerufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.SetupWindow":sensitive)
TDialog.SetupWindow (Methode)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetupWindow; virtual;

Beschreibung  In dieser Methode sollten alle Einstellungen, die
              das Dialogfenster (d.h. nicht nur das Dialogobjekt
              an sich) betreffen, vorgenommen werden. Wird von
              \#TDialog.Init\# (bzw. \#TWindow.Init\#) aufgerufen.
              Wird diese Methode Åberschrieben, sollte die ge-
              erbte Methode nach Mîglichkeit am Anfang der neuen
              Methode aufgerufen werden.
              \#Attr.ExStyle\# wird mit \#ws_ex_TryModeless\#+
              \#ws_ex_CenterOnce\# initialisiert. Wenn global
              \#as_MoveTransparent\# oder \#as_MoveDials\# gesetzt ist,
              dann wird zusÑtzlich noch \#ws_ex_MoveTransparent\#
              bzw. \#ws_ex_MoveDial\# gesetzt.
              \#Cont\#, \#CtrlList\#, \#TransferBuffer\# und \#IsModal\# werden
              initialisiert, und drei \#TKey\#-Objekte (siehe
              \#TWindow.SetupWindow\#) sowie der Tastatur-Handler
              werden installiert.

Querverweise  \#TDialog\#  \#TDialog.GetKBHandler\#

\end


screen("TDialog.TransferData":sensitive,"TransferData":sensitive)
TDialog.TransferData (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure TransferData(Direction: word); virtual;

Beschreibung  Wenn der Transfermechanismus durch Setzen von
              \#TransferBuffer\# auf einen Datentransfer-Puffer
              eingeschaltet ist, ÅbertrÑgt diese Methode Daten
              zwischen dem Puffer und den \#TControl\#-Objekten,
              bei denen \#wb_Transfer\# gesetzt ist.
              TranferData ruft die \#Transfer\#-Methode jedes be-
              teiligten Dialogelementobjekts auf und Åbergibt
              einen Zeiger auf das betreffende Feld des Transfer-
              Puffers sowie die in Direction vorgegebene Richtung.
              Direction muû eine der \#tf_XXXX-Konstanten\# enthalten.

Querverweise  \#TDialog\#  \#TDialog.OpenWindow\#  \#TDialog.OK\#

\end


screen("TDialog.Undo":sensitive)
TDialog.Undo (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function Undo: boolean; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Undo> gedrÅckt
              oder ein Dialogelement angeklickt hat und ein
              passendes Dialogelementobjekt existiert, das den
              Wert \#id_Undo\# besitzt.
              Die RÅckgabe ist true, wenn der Dialog beendet
              werden soll, false sonst (default).
              Wenn man diese Methode Åberschreibt, kann man z.B.
              eine gerade ausgefÅhrte Aktion rÅckgÑngig machen.

Querverweise  \#TDialog\#  \#TDialog.EndDlg\#

\end


screen("TDialog.UpdateDialog":sensitive)
TDialog.UpdateDialog (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure UpdateDialog; virtual;

Beschreibung  Wenn der Dialog modal ist, wird zunÑchst \link("TWindow.Work")Work\# auf
              \#Curr\# gesetzt. Danach wird die geerbte Methode
              \#TWindow.UpdateDialog\# aufgerufen.
              Braucht (und sollte) nicht direkt aufgerufen werden.

Querverweise  \#TDialog\#  \#TDialog.IsModal\#

\end


screen("TDialog.WMButton":sensitive)
TDialog.WMButton (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMButton(mX,mY,BStat,KStat,
                                  Clicks: integer); virtual;

Beschreibung  Wird von \#TApplication.MUButton\# aufgerufen, wenn der
              Benutzer auf ein Dialogelement geklickt hat.
              In dieser Methode wird im wesentlichen die Benutzer-
              anwahl mit einer ObjectGEM-internen \#form_button\#-
              Routine ausgewertet. Auûerdem wird hier ein Klick
              mit der rechten Maustaste an den Tastatur-Handler
              weitergeleitet, der dann - wenn vorhanden - eine
              BubbleHelp anzeigt.
              Bei modalen Dialogen wird hier auch das Verschieben
              des Dialogs durchgefÅhrt.

Querverweise  \#TDialog\#  \#TDialog.GetKBHandler\#  \#TDialog.Execute\#

\end


screen("TDialog.WMClosed":sensitive)
TDialog.WMClosed (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure WMClosed; virtual;

Beschreibung  Wenn \link("TWindow.CanClose")CanClose\# true zurÅckgibt, wird der Dialog be-
              endet und mit \link("TDialog.Destroy")Destroy\# freigegeben. Zuvor muû aller-
              dings auch \#OK\# bzw. - wenn \#cs_CancelOnClose\# gesetzt
              ist - \#Cancel\# true geliefert haben. Wenn der zu
              OK bzw. Cancel gehîrige Button disabled ist, kann
              der Dialog _nicht_ verlassen werden!
              Kann der Dialog verlassen werden, wird - sofern
              \#cs_QuitOnClose\# gesetzt ist - die Applikation be-
              endet.
              Wird von \#TApplication.MUMesag\# aufgerufen.

Querverweise  \#TDialog\#

\end


screen("TDialog.Cut":sensitive)
TDialog.Cut (Methode)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Cut; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<X>
              drÅckt. Wenn ein Eingabefeld aktiv ist, wird die
              zugehîrige \#TEdit.Cut\#-Methode aufgerufen.

Querverweise  \#TDialog\#  \#TDialog.Copy\#  \#TDialog.Paste\#

\end


screen("TDialog.Delete":sensitive)
TDialog.Delete (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Delete; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Delete> drÅckt.
              StandardmÑûig wird der Tastendruck an den Tastatur-
              Handler weitergeleitet.

Querverweise  \#TDialog\#  \#TDialog.GetKBHandler\#

\end


screen("TDialog.Copy":sensitive)
TDialog.Copy (Methode)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Copy; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<C>
              drÅckt. Wenn ein Eingabefeld aktiv ist, wird die
              zugehîrige \#TEdit.Copy\#-Methode aufgerufen.

Querverweise  \#TDialog\#  \#TDialog.Cut\#  \#TDialog.Paste\#

\end


screen("TDialog.Paste":sensitive)
TDialog.Paste (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paste; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<V>
              drÅckt. Wenn ein Eingabefeld aktiv ist, wird die
              zugehîrige \#TEdit.Paste\#-Methode aufgerufen.

Querverweise  \#TDialog\#  \#TDialog.Cut\#  \#TDialog.Copy\#

\end


screen("TDialog.SetDefaultButton":sensitive,"SetDefaultButton":sensitive)
TDialog.SetDefaultButton (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetDefaultButton(Obj: integer); virtual;

Beschreibung  Macht das Dialogelement mit dem Index Obj zum
              neuen Default-Button.

Querverweise  \#TDialog\#  \#TDialog.GetDefaultButton\#

\end


screen("TDialog.GetDefaultButton":sensitive,"GetDefaultButton":sensitive)
TDialog.GetDefaultButton (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetDefaultButton: integer; virtual;

Beschreibung  Liefert den Dialogelementindex des aktuellen
              Default-Buttons.

Querverweise  \#TDialog\#  \#TDialog.SetDefaultButton\#

\end


screen("TToolbar":sensitive,"PToolbar":sensitive)
TToolbar                                             Unit \#OWindows\#
------------------------------------------------------------------

TToolbar-Objekte werden mit Dialogelementen von Fenster-Toolbars
verknÅpft, die dem jeweiligen Fenster mit \#TWindow.LoadToolbar\# zu-
gewiesen wurden. Sie sind in ihrer Funktionsweise den \#TKeyMenu\#-
Objekten recht Ñhnlich.

	Pointer
		PToolbar = ^TToolbar;

	Felder
		\link("TToolbar.ADialog")ADialog\#
		\link("TToolbar.VKey")VKey\#
		\link("TToolbar.VStat")VStat\#
		\#ObjTree\#
		\link("TToolbar.ObjIndx")ObjIndx\#
		\link("TToolbar.ObjAddr")ObjAddr\#
		\link("TToolbar.VPipe")VPipe\#
		\link("TToolbar.VGHnd")VGHnd\#

	Methoden
		\link("TToolbar.Init")Init\#
		\link("TToolbar.Done")Done\#
		\link("TToolbar.Check")Check\#
		\#ClearMenuIndex\#
		\link("TToolbar.Disable")Disable\#
		\link("TToolbar.Enable")Enable\#
		\link("TToolbar.GetCheck")GetCheck\#
		\link("TToolbar.GetHelp")GetHelp\#
		\#GetMenuIndex\#
		\link("TToolbar.GetState")GetState\#
		\link("TToolbar.IsHelpAvailable")IsHelpAvailable\#
		\link("TToolbar.Paint")Paint\#
		\link("TToolbar.SetCheck")SetCheck\#
		\link("TToolbar.SetHelp")SetHelp\#
		\#SetMenuIndex\#
		\link("TToolbar.SetState")SetState\#
		\link("TToolbar.TestKey")TestKey\#
		\link("TToolbar.TestMessage")TestMessage\#
		\link("TToolbar.Toggle")Toggle\#
		\link("TToolbar.Uncheck")Uncheck\#

	Vorfahre
		\#TEvent\#
	Nachfahren
		---

\end


screen("TToolbar.ADialog":sensitive)
TToolbar.ADialog (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ADialog: PDialog;

Beschreibung  Dies ist ein universeller Dialog-Pointer, der in
              \#TToolbar.Init\# zunÑchst auf \#nil\# gesetzt wird. So ist
              jedes TToolbar-Objekt bereits auf die Verwaltung
              eines Dialogs vorbereitet (was in der Praxis auch
              meistens genutzt wird).
              In der \link("TEvent.Work")Work\#-Methode kann der Dialog dann initiali-
              siert bzw. abgearbeitet werden (siehe Beispiel-
              programme).

Querverweise  \#TToolbar\#

\end


screen("TToolbar.VGHnd":sensitive)
TToolbar.VGHnd (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VGHnd: boolean;

Beschreibung  Gibt an, ob \link("TToolbar.VPipe")VPipe\#^[3] unmittelbar vor dem Versenden
              auf das GEM-Handle des Åbergeordneten Fensters ge-
              setzt werden soll (da sich diese Kennung ja Ñndern
              kann).
              Wird von \#TToolbar.Init\# gesetzt.

Querverweise  \#TToolbar\#  \#TEvent.Parent\#
                        \#TToolbar.TestKey\#  \#TToolbar.TestMessage\#

\end


screen("TToolbar.VKey":sensitive)
TToolbar.VKey (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VKey: integer;

Beschreibung  Gibt zusammen mit \link("TToolbar.VStat")VStat\# die Taste an, auf die
              \link("TToolbar.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TToolbar.Init\# gesetzt.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.VPipe":sensitive)
TToolbar.VPipe (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VPipe: \#PPipearray\#;  (nur lesen)

Beschreibung  EnthÑlt einen Pointer auf eine komplette GEM-Nach-
              richt, die von \link("TToolbar.TestKey")TestKey\# bzw. \link("TToolbar.TestMessage")TestMessage\# bei posi-
              tiver Anwahl verschickt wird.
              Kann mit \#TToolbar.Init\# gesetzt werden.

Querverweise  \#TToolbar\#  \#TToolbar.VGHnd\#

\end


screen("TToolbar.VStat":sensitive)
TToolbar.VStat (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VStat: integer;

Beschreibung  Gibt zusammen mit \link("TToolbar.VKey")VKey\# die Taste an, auf die
              \link("TToolbar.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TToolbar.Init\# gesetzt.
              WICHTIG: Wenn egal ist, ob die linke oder die rechte
              <Shift>-Taste gedrÅckt ist, sollte hier \#K_SHIFT\# ein-
              getragen sein.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.ObjAddr":sensitive)
TToolbar.ObjAddr (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ObjAddr: PObj;  (nur lesen)

Beschreibung  \#TToolbar.Init\# setzt hier die zum Dialogelement
              \link("TToolbar.ObjIndx")ObjIndx\# gehîrige Adresse ein.

Querverweise  \#TToolbar\#
              \#TApplication.LoadResource\#  \#TApplication.InitResource\#

\end


screen("TToolbar.ObjIndx":sensitive)
TToolbar.ObjIndx (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ObjIndx: integer;  (nur lesen)

Beschreibung  EnthÑlt die Nummer des Dialogelementobjekts, die an
              \#TToolbar.Init\# Åbergeben wird. Aus diesem Index kann
              \link("TToolbar.ObjAddr")ObjAddr\# berechnet werden.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.ObjTree":sensitive,"ObjTree":sensitive)
TToolbar.ObjTree (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ObjTree: integer;  (nur lesen)

Beschreibung  EnthÑlt den Index des Objektbaums der Toolbar, zu
              der das TToolbar-Objekt gehîrt. Wird fÅr \link("TToolbar.Paint")Paint\# und
              \link("TToolbar.TestMessage")TestMessage\# benîtigt und von \#TToolbar.Init\# gesetzt.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.Init":sensitive)
TToolbar.Init (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor TToolbar.Init(AParent: PWindow; ATree,
                           AnIndx,Stat,Key: integer; Msg: pointer;
                           GetHnd,Switch: boolean; Hlp: string);

Beschreibung  Ruft den Vorfahren \#TEvent.Init\# auf. Dann wird \link("TToolbar.VStat")VStat\#
              auf Stat, \link("TToolbar.VKey")VKey\# auf Key, \link("TToolbar.VGHnd")VGHnd\# auf GetHnd und \link("TToolbar.ADialog")ADialog\#
              auf \#nil\# gesetzt sowie \link("TToolbar.VPipe")VPipe\# angelegt, wenn Msg<>nil
              ist.
              ATree und AnIndx geben den Objektbaum und den
              Objektindex des Toolbar-Elements an, mit dem das
              TToolbar-Objekt verknÅpft werden soll. Der Objekt-
              baum muû deshalb angegeben werden, da eine Toolbar
              ja zur Laufzeit gewechselt werden kann, es aber
              recht umstÑndlich wÑre, dann auch jedesmal alle
              TToolbar-Objekte auszutauschen.
              Switch legt fest, ob das Toolbar-Element ein Push-
              button (false) ist, der also eine Aktion auslîst,
              oder ob das Element einen Zustand darstellt (true).
              Hlp enthÑlt den Hilfstext fÅr die BubbleHelp.

Querverweise  \#TToolbar\#  \#TWindow.LoadToolbar\#

\end


screen("TToolbar.TestMessage":sensitive,"GOP_TOOLBAR":sensitive)
TToolbar.TestMessage (Methode)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMessage(Pipe: \#Pipearray\#): boolean;
                                                     virtual;

Beschreibung  Wird von \#TWindow.WMToolbar\# aufgerufen, wenn ein
              Toolbar-Element angewÑhlt wurde. Die Methode Åber-
              prÅft, ob es sich dabei um das eigene Objekt han-
              delt, und gibt dann true zurÅck, ansonsten false.
              \link("TEvent.Work")Work\# wird in dieser Methode _nicht_ aufgerufen,
              dies wird von WMToolbar erledigt!
              Die Åbergebene Message hat folgendes Format:

                [0]: \#GO_PRIVATE\# ($1235)
                [1]: \link("TApplication.apID")apID\#
                [2]: 0
                [3]: GOP_TOOLBAR (1)
                [4]: Objektbaum-Index der aktiven Toolbar
                [5]: Index des angewÑhlten Elements
                [6]: Status der Umschalttasten
                [7]: Anzahl der Mausklicks

Querverweise  \#TToolbar\#  \#TToolbar.TestKey\#

\end


screen("TToolbar.Done":sensitive)
TToolbar.Done (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt eine evtl. in \link("TToolbar.VPipe")VPipe\# vorhandene GEM-Message frei
              und ruft den Vorfahren \#TEvent.Done\# auf.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.Check":sensitive)
TToolbar.Check (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Check; virtual;

Beschreibung  Ruft \link("TToolbar.SetCheck")SetCheck\#(\#bf_Checked\#) auf und markiert damit
              das mit \link("TToolbar.ObjIndx")ObjIndx\# und \link("TToolbar.ObjAddr")ObjAddr\# angegebenen Toolbar-
              Element.

Querverweise  \#TToolbar\#  \#TToolbar.Uncheck\#  \#TToolbar.Toggle\#

\end


screen("TToolbar.Disable":sensitive)
TToolbar.Disable (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Disable; virtual;

Beschreibung  Ruft \link("TToolbar.SetState")SetState\#(\#bf_Disabled\#) auf und macht damit das
              zugehîrige Toolbar-Element nicht anwÑhlbar.

Querverweise  \#TToolbar\#  \#TToolbar.Enable\#

\end


screen("TToolbar.Enable":sensitive)
TToolbar.Enable (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Enable; virtual;

Beschreibung  Ruft \link("TToolbar.SetState")SetState\#(\#bf_Enabled\#) auf und macht damit das
              zugehîrige Toolbar-Element wieder anwÑhlbar.

Querverweise  \#TToolbar\#  \#TToolbar.Disable\#

\end


screen("TToolbar.GetCheck":sensitive)
TToolbar.GetCheck (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCheck: integer; virtual;

Beschreibung  Gibt \#bf_Checked\# bzw. \#bf_Unchecked\# zurÅck, je nachdem
              ob das zugehîrige Toolbar-Element markiert ist oder
              nicht.

Querverweise  \#TToolbar\#  \#TToolbar.SetCheck\#

\end


screen("TToolbar.GetState":sensitive)
TToolbar.GetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetState: integer; virtual;

Beschreibung  Gibt \#bf_Enabled\# bzw. \#bf_Disabled\# zurÅck, je nachdem
              ob das zugehîrige Toolbar-Element anwÑhlbar ist oder
              nicht.

Querverweise  \#TToolbar\#  \#TToolbar.SetState\#

\end


screen("TToolbar.SetCheck":sensitive)
TToolbar.SetCheck (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCheck(CheckFlag: integer); virtual;

Beschreibung  Bestimmt die Markierung des zugehîrigen Toolbar-
              Elements, d.h. \#bf_Checked\# oder \#bf_Unchecked\#.

Querverweise  \#TToolbar\#  \#TToolbar.GetCheck\#
                        \#TToolbar.Uncheck\#   \#TToolbar.Check\#

\end


screen("TToolbar.SetState":sensitive)
TToolbar.SetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetState(StateFlag: integer); virtual;

Beschreibung  Setzt den Zustand des zugehîrigen Toolbar-Elements,
              d.h. \#bf_Enabled\# oder \#bf_Disabled\#.

Querverweise  \#TToolbar\#  \#TToolbar.GetState\#
                        \#TToolbar.Disable\#   \#TToolbar.Enable\#

\end


screen("TToolbar.TestKey":sensitive)
TToolbar.TestKey (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestKey(Stat,Key: integer): boolean;
                                                      virtual;

Beschreibung  Wenn Stat=\link("TToolbar.VStat")VStat\#, Key=\link("TToolbar.VKey")VKey\# und \link("TToolbar.GetState")GetState\#<>\#bf_Disabled\#
              ist, liefert TestKey true zurÅck. Auûerdem werden
              dann folgende Aktionen ausgefÅhrt: Das zugehîrige
              Toolbar-Element wird entsprechend markiert, \link("TEvent.Work")Work\#
              wird aufgerufen, und wenn \link("TToolbar.VPipe")VPipe\#<>\#nil\# ist, wird die
              darin enthaltene GEM-Message verschickt.
              Ansonsten gibt TestKey false zurÅck.
              WICHTIG: Wenn in VStat \#K_SHIFT\# eingetragen ist,
              werden beide <Shift>-Tasten gleichwertig behandelt!

Querverweise  \#TToolbar\#  \#TToolbar.TestMessage\#  \#TToolbar.VGHnd\#

\end


screen("TToolbar.Toggle":sensitive)
TToolbar.Toggle (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Toggle; virtual;

Beschreibung  Wechselt beim zugehîrigen Toolbar-Element mit der
              Methode \link("TToolbar.SetCheck")SetCheck\# den Zustand der Markierung.

Querverweise  \#TToolbar\#  \#TToolbar.Check\#  \#TToolbar.Uncheck\#

\end


screen("TToolbar.Uncheck":sensitive)
TToolbar.Uncheck (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Uncheck; virtual;

Beschreibung  Ruft \link("TToolbar.SetCheck")SetCheck\#(\#bf_Unchecked\#) auf und nimmt damit eine
              evtl. vorhandene Markierung des zugehîrigen Toolbar-
              Elements zurÅck.

Querverweise  \#TToolbar\#  \#TToolbar.Check\#  \#TToolbar.Toggle\#

\end


screen("TToolbar.Paint":sensitive)
TToolbar.Paint (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Paint; virtual;

Beschreibung  Zeichnet das zugehîrige Toolbar-Element neu, wenn
              die aktive Toolbar mit \#ObjTree\# Åbereinstimmt. Die
              Rechteckliste des Fensters wird automatisch be-
              achtet.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.IsHelpAvailable":sensitive)
TToolbar.IsHelpAvailable (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsHelpAvailable: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das mit \link("TToolbar.GetHelp")GetHelp\# ein Hilfs-
              text fÅr die BubbleHelp geliefert werden kann.

Querverweise  \#TToolbar\#

\end


screen("TToolbar.GetHelp":sensitive)
TToolbar.GetHelp (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetHelp: string; virtual;

Beschreibung  Gibt einen Hilfstext fÅr die BubbleHelp zurÅck.

Querverweise  \#TToolbar\#          \#TToolbar.IsHelpAvailable\#
              \#TToolbar.SetHelp\#

\end


screen("TToolbar.SetHelp":sensitive)
TToolbar.SetHelp (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetHelp(Hlp: string); virtual;

Beschreibung  Weist dem Toolbarelement-Objekt einen neuen Hilfs-
              text fÅr die BubbleHelp zu.

Querverweise  \#TToolbar\#       \#TToolbar.GetHelp\#
              \#TToolbar.Init\#

\end


screen("TToolbar.ClearMenuIndex":sensitive,"ClearMenuIndex":sensitive)
TToolbar.ClearMenuIndex (Methode)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ClearMenuIndex; virtual;

Beschreibung  Ruft \#SetMenuIndex\#(0) auf und lîscht damit eine
              evtl. bestehende VerknÅpfung zu einem MenÅ-
              Eintrag.

Querverweise  \#TToolbar\#  \#TToolbar.GetMenuIndex\#

\end


screen("TToolbar.GetMenuIndex":sensitive,"GetMenuIndex":sensitive)
TToolbar.GetMenuIndex (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetMenuIndex: byte; virtual;

Beschreibung  Liefert den Index des MenÅ-Eintrags zurÅck, mit dem
              dieses Objekt verknÅpft ist. Null bedeutet, daû
              keine VerknÅpfung besteht.
              Die RÅckgabe entspricht dem hîherwertigen Byte des
              Objekttyps ob_type.

Querverweise  \#TToolbar\#  \#TToolbar.ClearMenuIndex\#
                        \#TToolbar.SetMenuIndex\#

\end


screen("TToolbar.SetMenuIndex":sensitive,"SetMenuIndex":sensitive)
TToolbar.SetMenuIndex (Methode)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetMenuIndex(Indx: byte); virtual;

Beschreibung  VerknÅpft das Objekt mit dem MenÅ-Eintrag Indx.
              Hiermit kînnen Anwender-konfigurierbare \#Toolbars\#
              realisiert werden, da statt des Aufrufs dieser
              Methode das hîherwertige Byte von ob_type auch
              direkt geÑndert werden darf.
              Wenn sich die VerknÅpfung auf eine Fenster-MenÅ-
              leiste im selben Fenster beziehen soll, muû
              \#cs_WindowMenuToolbar\# gesetzt werden.

Querverweise  \#TToolbar\#  \#TToolbar.GetMenuIndex\#
                        \#TToolbar.ClearMenuIndex\#

\end


screen("TKeyMenu":sensitive,"PKeyMenu":sensitive)
TKeyMenu                                             Unit \#OWindows\#
------------------------------------------------------------------

TKeyMenu ist ein spezialisiertes TEvent-Objekt, daû auf eine
MenÅanwahl per Maus oder Shortcut reagiert. Jeder MenÅeintrag
sollte mit einem solchen Objekt verknÅpft sein, da in diesen
Objekten die eigentlichen Aktionen nach der Anwahl (Abarbeiten
von Dialogen etc.) geschehen sollten.
Wenn entweder auf Maus- oder aber auf Tastaturanwahl verzichtet
werden soll, stehen dafÅr spezielle Nachfahren von TKeyMenu zur
VerfÅgung.
TKeyMenu kann sowohl fÅr "normale" MenÅleisten als auch fÅr
solche im Fenster verwendet werden.

	Pointer
		PKeyMenu = ^TKeyMenu;

	Felder
		\link("TKeyMenu.ADialog")ADialog\#
		\link("TKeyMenu.VGHnd")VGHnd\#
		\link("TKeyMenu.VKey")VKey\#
		\#VMNum\#
		\link("TKeyMenu.VPipe")VPipe\#
		\link("TKeyMenu.VStat")VStat\#
		\#VTNum\#

	Methoden
		\link("TKeyMenu.Init")Init\#
		\link("TKeyMenu.Done")Done\#
		\link("TKeyMenu.Check")Check\#
		\link("TKeyMenu.Disable")Disable\#
		\link("TKeyMenu.Enable")Enable\#
		\link("TKeyMenu.GetCheck")GetCheck\#
		\link("TKeyMenu.GetState")GetState\#
		\link("TKeyMenu.GetText")GetText\#
		\link("TKeyMenu.SetCheck")SetCheck\#
		\link("TKeyMenu.SetState")SetState\#
		\link("TKeyMenu.SetText")SetText\#
		\link("TKeyMenu.TestKey")TestKey\#
		\link("TKeyMenu.TestMenu")TestMenu\#
		\link("TKeyMenu.Toggle")Toggle\#
		\link("TKeyMenu.Uncheck")Uncheck\#

	Vorfahre
		\#TEvent\#
	Nachfahren
		\#TKey\#  \#TMenu\#

\end


screen("TKeyMenu.ADialog":sensitive)
TKeyMenu.ADialog (Feld)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   ADialog: PDialog;

Beschreibung  Dies ist ein universeller Dialog-Pointer, der in
              \#TKeyMenu.Init\# zunÑchst auf \#nil\# gesetzt wird. So ist
              jedes TKeyMenu-Objekt bereits auf die Verwaltung
              eines Dialogs vorbereitet (was in der Praxis auch
              meistens genutzt wird).
              In der \link("TEvent.Work")Work\#-Methode kann der Dialog dann initiali-
              siert bzw. abgearbeitet werden (siehe Beispiel-
              programme).

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.VGHnd":sensitive)
TKeyMenu.VGHnd (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VGHnd: boolean;

Beschreibung  Gibt an, ob \link("TKeyMenu.VPipe")VPipe\#^[3] unmittelbar vor dem Versenden
              auf das GEM-Handle des Åbergeordneten Fensters ge-
              setzt werden soll (da sich diese Kennung ja Ñndern
              kann). Wenn \link("TEvent.Parent")Parent\# auf das Applikations-Objekt zeigt,
              wird die Kennung des obersten Fensters eingetragen.
              Wenn wind_get(WF_OWNER) vorhanden ist (das ist bei
              neueren TOS-Versionen der Fall), kînnen so auch Nach-
              richten an Fenster fremder Applikationen verschickt
              werden.
              Wird von \#TKeyMenu.Init\# auf false initialisiert und
              kann mit \#TKey.Init\# bzw. \#TMenu.Init\# gesetzt werden.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.TestKey\#  \#TKeyMenu.TestMenu\#

\end


screen("TKeyMenu.VKey":sensitive)
TKeyMenu.VKey (Feld)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VKey: integer;

Beschreibung  Gibt zusammen mit \link("TKeyMenu.VStat")VStat\# die Taste an, auf die
              \link("TKeyMenu.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TKeyMenu.Init\# gesetzt.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.VMNum":sensitive,"VMNum":sensitive)
TKeyMenu.VMNum (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VMNum: integer;

Beschreibung  Gibt den Index des MenÅeintrags an, auf den
              \#TKeyMenu.TestMenu\# positiv reagieren soll.
              Wird von \#TKeyMenu.Init\# gesetzt.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.VPipe":sensitive)
TKeyMenu.VPipe (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VPipe: \#PPipearray\#;  (nur lesen)

Beschreibung  EnthÑlt einen Pointer auf eine komplette GEM-Nach-
              richt, die von \link("TKeyMenu.TestKey")TestKey\# bzw. \link("TKeyMenu.TestMenu")TestMenu\# bei positiver
              Anwahl verschickt wird.
              \#TKeyMenu.Init\# besetzt dieses Feld mit \#nil\#, d.h. es
              wird keine Nachricht verschickt. Kann mit \#TKey.Init\#
              oder \#TMenu.Init\# gesetzt werden.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.VGHnd\#

\end


screen("TKeyMenu.VStat":sensitive)
TKeyMenu.VStat (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VStat: integer;

Beschreibung  Gibt zusammen mit \link("TKeyMenu.VKey")VKey\# die Taste an, auf die
              \link("TKeyMenu.TestKey")TestKey\# positiv reagieren soll. Wird von
              \#TKeyMenu.Init\# gesetzt.
              WICHTIG: Wenn egal ist, ob die linke oder die rechte
              <Shift>-Taste gedrÅckt ist, sollte hier \#K_SHIFT\# ein-
              getragen sein.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.VTNum":sensitive,"VTNum":sensitive)
TKeyMenu.VTNum (Feld)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   VTNum: integer;

Beschreibung  EnthÑlt den Index des MenÅtitels vom zugehîrigen
              MenÅeintrag \#VMNum\#. Wird von TKeyMenu.Init gesetzt
              und von \link("TKeyMenu.TestKey")TestKey\# einzig und allein zum Invertieren
              des MenÅtitels benîtigt.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.Init":sensitive)
TKeyMenu.Init (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject;
                                 Stat,Key,mNum,tNum: integer);

Beschreibung  Ruft den Vorfahren \#TEvent.Init\# auf.
              Dann wird \link("TKeyMenu.VStat")VStat\# auf Stat, \link("TKeyMenu.VKey")VKey\# auf Key, \#VMNum\# auf
              mNum und \#VTNum\# auf tNum gesetzt, sowie \link("TKeyMenu.ADialog")ADialog\# und
              \link("TKeyMenu.VPipe")VPipe\# mit \#nil\# und \link("TKeyMenu.VGHnd")VGHnd\# mit false initialisiert.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.Done":sensitive)
TKeyMenu.Done (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt eine evtl. in \link("TKeyMenu.VPipe")VPipe\# vorhandene GEM-Message frei
              und ruft den Vorfahren \#TEvent.Done\# auf.

Querverweise  \#TKeyMenu\#

\end


screen("TKeyMenu.Check":sensitive)
TKeyMenu.Check (Methode)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Check; virtual;

Beschreibung  Ruft \link("TKeyMenu.SetCheck")SetCheck\#(\#bf_Checked\#) auf und markiert damit
              den Åber \#VMNum\# angegebenen MenÅeintrag mit einem
              HÑkchen.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.Uncheck\#  \#TKeyMenu.Toggle\#

\end


screen("TKeyMenu.Disable":sensitive)
TKeyMenu.Disable (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Disable; virtual;

Beschreibung  Ruft \link("TKeyMenu.SetState")SetState\#(\#bf_Disabled\#) auf und macht damit den
              MenÅeintrag mit Index \#VMNum\# nicht anwÑhlbar.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.Enable\#

\end


screen("TKeyMenu.Enable":sensitive)
TKeyMenu.Enable (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Enable; virtual;

Beschreibung  Ruft \link("TKeyMenu.SetState")SetState\#(\#bf_Enabled\#) auf und macht damit den
              MenÅeintrag mit Index \#VMNum\# wieder anwÑhlbar.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.Disable\#

\end


screen("TKeyMenu.GetCheck":sensitive)
TKeyMenu.GetCheck (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetCheck: integer; virtual;

Beschreibung  Gibt \#bf_Checked\# bzw. \#bf_Unchecked\# zurÅck, je nachdem
              ob der MenÅeintrag mit Index \#VMNum\# mit einem HÑkchen
              markiert ist oder nicht.
              Ist VMNum kein korrekter Eintrag zugewiesen, erhÑlt
              man als RÅckgabe \#id_No\#.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.SetCheck\#

\end


screen("TKeyMenu.GetState":sensitive)
TKeyMenu.GetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetState: integer; virtual;

Beschreibung  Gibt \#bf_Enabled\# bzw. \#bf_Disabled\# zurÅck, je nachdem
              ob der MenÅeintrag mit Index \#VMNum\# anwÑhlbar ist
              oder nicht.
              Ist VMNum kein korrekter Eintrag zugewiesen, erhÑlt
              man als RÅckgabe \#id_No\#.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.SetState\#

\end


screen("TKeyMenu.GetText":sensitive)
TKeyMenu.GetText (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Gibt den Text des MenÅeintrags mit Index \#VMNum\#
              zurÅck bzw. einen Leerstring, wenn VMNum kein
              korrekter Eintrag zugewiesen ist.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.SetText\#

\end


screen("TKeyMenu.SetCheck":sensitive)
TKeyMenu.SetCheck (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetCheck(CheckFlag: integer); virtual;

Beschreibung  Bestimmt die Markierung des MenÅeintrags \#VMNum\#,
              d.h. \#bf_Checked\# oder \#bf_Unchecked\#.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.GetCheck\#
                        \#TKeyMenu.Uncheck\#   \#TKeyMenu.Check\#

\end


screen("TKeyMenu.SetState":sensitive)
TKeyMenu.SetState (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetState(StateFlag: integer); virtual;

Beschreibung  Setzt den Zustand des MenÅeintrags \#VMNum\#, d.h.
              \#bf_Enabled\# oder \#bf_Disabled\#.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.GetState\#
                        \#TKeyMenu.Disable\#   \#TKeyMenu.Enable\#

\end


screen("TKeyMenu.SetText":sensitive)
TKeyMenu.SetText (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  Weist dem MenÅeintrag \#VMNum\# einen neuen Text zu.
              WICHTIG: Man muû selbst darauf achten, daû der
              String nicht zu lang ist! Ist der String allerdings
              zu kurz, wird er mit Leerzeichen aufgefÅllt.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.GetText\#

\end


screen("TKeyMenu.TestKey":sensitive)
TKeyMenu.TestKey (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestKey(Stat,Key: integer): boolean;
                                                      virtual;

Beschreibung  Wenn Stat=\link("TKeyMenu.VStat")VStat\#, Key=\link("TKeyMenu.VKey")VKey\# und \link("TKeyMenu.GetState")GetState\#<>\#bf_Disabled\#
              ist, liefert TestKey true zurÅck. Auûerdem werden
              dann folgende Aktionen ausgefÅhrt: Der MenÅtitel
              \#VTNum\# wird invertiert; wenn \link("TKeyMenu.VPipe")VPipe\#<>\#nil\# ist, wird
              die entsprechende GEM-Message verschickt; zum
              Schluû wird dann noch \link("TEvent.Work")Work\# aufgerufen.
              Ansonsten gibt TestKey false zurÅck.
              WICHTIG: Wenn in VStat \#K_SHIFT\# eingetragen ist,
              werden beide <Shift>-Tasten gleichwertig behandelt!

Querverweise  \#TKeyMenu\#  \#TKeyMenu.TestMenu\#  \#TKeyMenu.VGHnd\#

\end


screen("TKeyMenu.TestMenu":sensitive)
TKeyMenu.TestMenu (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMenu(mNum: integer): boolean; virtual;

Beschreibung  Wenn mNum<>\#VMNum\# ist, gibt TestMenu false zurÅck.
              Ansonsten liefert diese Methode true. Vorher wird
              noch - wenn \link("TKeyMenu.VPipe")VPipe\#<>\#nil\# ist - die entsprechende GEM-
              Message verschickt und dann \link("TEvent.Work")Work\# aufgerufen.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.TestKey\#  \#TKeyMenu.VGHnd\#

\end


screen("TKeyMenu.Toggle":sensitive)
TKeyMenu.Toggle (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Toggle; virtual;

Beschreibung  Wechselt beim MenÅeintrag \#VMNum\# mit \link("TKeyMenu.SetCheck")SetCheck\# den
              Zustand zwischen gesetztem und nicht gesetztem
              HÑkchen.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.Check\#  \#TKeyMenu.Uncheck\#

\end


screen("TKeyMenu.Uncheck":sensitive)
TKeyMenu.Uncheck (Methode)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure Uncheck; virtual;

Beschreibung  Ruft \link("TKeyMenu.SetCheck")SetCheck\#(\#bf_Unchecked\#) auf und entfernt damit
              ein evtl. vor dem MenÅeintrag mit Index \#VMNum\# vor-
              handenes HÑkchen.

Querverweise  \#TKeyMenu\#  \#TKeyMenu.Check\#  \#TKeyMenu.Toggle\#

\end


screen("TKey":sensitive,"PKey":sensitive)
TKey                                                 Unit \#OWindows\#
------------------------------------------------------------------

TKey ist ein spezielles TKeyMenu-Objekt, das nur auf einen
Tastaturshortcut reagiert. ZusÑtzlich kann eine GEM-Message
Åbergeben werden, die bei Aktivierung automatisch verschickt
wird.

	Pointer
		PKey = ^TKey;

	Methoden
		\link("TKey.Init")Init\#
		\link("TKey.TestMenu")TestMenu\#

	Vorfahre
		\#TKeyMenu\#
	Nachfahren
		---

\end


screen("TKey.Init":sensitive)
TKey.Init (Methode)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject; Stat,
                    Key: integer; Msg: pointer; GetHnd: boolean);

Beschreibung  Ruft \#TKeyMenu.Init\# auf, wobei die MenÅ-Parameter
              auf -1 gesetzt werden, d.h. alle MenÅfunktionen von
              TKeyMenu werden ausgeschaltet.
              \link("TKeyMenu.VGHnd")VGHnd\# wird auf GetHnd gesetzt. Wenn Msg<>\#nil\# ist,
              sollte der Pointer auf einen 16 Bytes groûen Be-
              reich zeigen (bequemerweise z.B. ein \#Pipearray\#),
              in dem sich eine komplette GEM-Message befindet.
              Diese Message wird dann in \link("TKeyMenu.VPipe")VPipe\# umkopiert, wobei
              VPipe^[1] mit \link("TApplication.apID")apID\# und VPipe^[2] mit 0 initiali-
              siert wird.

Querverweise  \#TKey\#

\end


screen("TKey.TestMenu":sensitive)
TKey.TestMenu (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestMenu(mNum: integer): boolean; virtual;

Beschreibung  Liefert einfach nur false zurÅck, d.h. das TKey-
              Objekt reagiert _nicht_ mehr auf eine MenÅanwahl.

Querverweise  \#TKey\#

\end


screen("TMenu":sensitive,"PMenu":sensitive)
TMenu                                                Unit \#OWindows\#
------------------------------------------------------------------

TMenu ist ein spezielles TKeyMenu-Objekt, das nur auf Maus-
anwahl eines MenÅeintrags reagiert. ZusÑtzlich kann eine GEM-
Message Åbergeben werden, die bei Aktivierung automatisch ver-
schickt wird.

	Pointer
		PMenu = ^TMenu;

	Methoden
		\link("TMenu.Init")Init\#
		\link("TMenu.TestKey")TestKey\#

	Vorfahre
		\#TKeyMenu\#
	Nachfahren
		---

\end


screen("TMenu.Init":sensitive)
TMenu.Init (Methode)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PEventObject;
                   mNum: integer; Msg: pointer; GetHnd: boolean);

Beschreibung  Ruft \#TKeyMenu.Init\# auf, wobei die Tastatur-
              Parameter und der MenÅtitel auf -1 gesetzt werden,
              d.h. alle Tastaturfunktionen von TKeyMenu werden
              ausgeschaltet.
              \link("TKeyMenu.VGHnd")VGHnd\# wird auf GetHnd gesetzt. Wenn Msg<>\#nil\# ist,
              sollte der Pointer auf einen 16 Bytes groûen Be-
              reich zeigen (bequemerweise z.B. ein \#Pipearray\#),
              in dem sich eine komplette GEM-Message befindet.
              Diese Message wird dann in \link("TKeyMenu.VPipe")VPipe\# umkopiert, wobei
              VPipe^[1] mit \link("TApplication.apID")apID\# und VPipe^[2] mit 0 initiali-
              siert wird.

Querverweise  \#TMenu\#

\end


screen("TMenu.TestKey":sensitive)
TMenu.TestKey (Methode)                              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function TestKey(Stat,Key: integer): boolean;
                                                      virtual;

Beschreibung  Liefert einfach nur false zurÅck, d.h. das TMenu-
              Objekt reagiert _nicht_ mehr auf eine Tastatur-
              anwahl.

Querverweise  \#TMenu\#

\end


screen("Parent":sensitive)
Parent-Felder                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TClipboard.Parent\#
	\#TControl.Parent\#
	\#TEvent.Parent\#
	\#TWindow.Parent\#

\end


screen("ID":sensitive)
ID-Felder                                                \#ObjectGEM\#
------------------------------------------------------------------

	\#INFOXSSI.id\#
	\#TControl.ID\#
	\#TCookie.ID\#

\end


screen("gohi")
Hi-Felder                                                \#ObjectGEM\#
------------------------------------------------------------------

	\#APPLRECORD.What.Hi\#
	\#LongRec.Hi\#
	\#WordRec.Hi\#

\end


screen("golo")
Lo-Felder                                                \#ObjectGEM\#
------------------------------------------------------------------

	\#APPLRECORD.What.Lo\#
	\#LongRec.Lo\#
	\#WordRec.Lo\#

\end


screen("Style":sensitive)
Style-Felder                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Style\#
	\#TEvent.Style\#
	\#TGEMAttr.Style\#
	\#TScroller.Style\#
	\#TWindowAttr.Style\#
	\#TWndClass.Style\#

\end


screen("Status":sensitive)
Status-Felder                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Status\#
	\#TValidator.Status\#
	\#TWindowAttr.Status\#

\end


screen("Window":sensitive)
Window-Felder                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TScroller.Window\#
	\#TValidator.Window\#

\end


screen("Attr":sensitive,"Attr.Style":sensitive)
Attr-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Attr\#
	\#TWindow.Attr\#

\end


screen("vdiHandle":sensitive)
vdiHandle-Felder                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.vdiHandle\#
	\#TWindow.vdiHandle\#

\end


screen("SetupVDI":sensitive)
SetupVDI-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.SetupVDI\#
	\#TTextWindow.SetupVDI\#
	\#TWindow.SetupVDI\#

\end


screen("GetVDIHandle":sensitive)
GetVDIHandle-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.GetVDIHandle\#
	\#TWindow.GetVDIHandle\#

\end


screen("Version":sensitive)
Version-Felder                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#INFOXSSI.version\#
	\#TMetaInfo.Version\#
	\#TXAccAttr.Version\#
	\#XAcc.Version\#

\end


screen("namfld","Name":sensitive)
Name-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Name\#
	\#TXAccAttr.Name\#
	\#XAcc.Name\#

\end


screen("apID":sensitive)
apID-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.apID\#
	\#TXAccAttr.apID\#
	\#XAcc.apID\#

\end


screen("menuID":sensitive)
menuID-Felder                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.menuID\#
	\#TXAccAttr.menuID\#
	\#XAcc.menuID\#

\end


screen("MenuTree":sensitive)
MenuTree-Felder                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.MenuTree\#
	\#TWndClass.MenuTree\#

\end


screen("ObjIndx":sensitive)
ObjIndx-Felder                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.ObjIndx\#
	\#TToolbar.ObjIndx\#

\end


screen("ObjAddr":sensitive)
ObjAddr-Felder                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.ObjAddr\#
	\#TToolbar.ObjAddr\#

\end


screen("VPipe":sensitive)
VPipe-Felder                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TKeyMenu.VPipe\#
	\#TToolbar.VPipe\#

\end


screen("VGHnd":sensitive)
VGHnd-Felder                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TKeyMenu.VGHnd\#
	\#TToolbar.VGHnd\#

\end


screen("ADialog":sensitive)
ADialog-Felder                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TIcon.ADialog\#
	\#TKeyMenu.ADialog\#
	\#TToolbar.ADialog\#

\end


screen("VKey":sensitive)
VKey-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TIcon.VKey\#
	\#TKeyMenu.VKey\#
	\#TToolbar.VKey\#

\end


screen("VStat":sensitive)
VStat-Felder                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TIcon.VStat\#
	\#TKeyMenu.VStat\#
	\#TToolbar.VStat\#

\end


screen("XPos":sensitive)
XPos-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TIcon.XPos\#
	\#TScroller.XPos\#

\end


screen("YPos":sensitive)
YPos-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TIcon.YPos\#
	\#TScroller.YPos\#

\end


screen("Clipboard":sensitive)
Clipboard-Felder                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Clipboard\#
	\#TEdit.Clipboard\#
	\#TWindow.Clipboard\#

\end


screen("Icon":sensitive)
Icon-Felder                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Icon\#
	\#TWindow.Icon\#

\end


screen("Size":sensitive)
Size                                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TScrollBar.Size\#  (Feld)
	\#TWindow.Size\#     (Methode)

\end


screen("HCursor":sensitive)
HCursor                                                  \#ObjectGEM\#
------------------------------------------------------------------

	\link("thcursor")HCursor\#                (Typ)
	\#TIconWndClass.hCursor\#  (Feld)
	\#TWndClass.hCursor\#      (Feld)

\end


screen("hbrBackground":sensitive)
hbrBackground-Felder                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TIconWndClass.hbrBackground\#
	\#TWndClass.hbrBackground\#

\end


screen("workIn":sensitive)
workIn-Felder                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.workIn\#
	\#TWindow.workIn\#

\end


screen("workOut":sensitive)
workOut-Felder                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.workOut\#
	\#TWindow.workOut\#

\end


screen("Work":sensitive)
Work                                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.Work\#   (Methode)
	\#TEvent.Work\#      (Methode)
	\#TScrollBar.Work\#  (Methode)
	\#TWindow.Work\#     (Feld)

\end


screen("Edit":sensitive)
Edit                                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.Edit\#  (Feld)
	\#TEdit.Edit\#      (Methode)

\end


screen("Popup":sensitive)
Popup                                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Popup\#  (Methode)
	\#TComboBox.Popup\#     (Feld)

\end


screen("Max":sensitive)
Max                                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TRangeValidator.Max\#  (Feld)
	\link("Max_fn")Max\#                  (Funktion)

\end


screen("Min":sensitive)
Min                                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TRangeValidator.Min\#  (Feld)
	\link("Min_fn")Min\#                  (Funktion)

\end


screen("Esc":sensitive)
Esc                                                      \#ObjectGEM\#
------------------------------------------------------------------

	\link("ESC_const")ESC\#          (Konstante)
	\#TDialog.Esc\#  (Methode)

\end


screen("Deinstall":sensitive)
Deinstall-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TButton.Deinstall\#
	\#TCheckBox.Deinstall\#

\end


screen("Install":sensitive)
Install-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TButton.Install\#
	\#TCheckBox.Install\#
	\#TRadioButton.Install\#

\end


screen("SetRange":sensitive)
SetRange-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TScrollBar.SetRange\#
	\#TScroller.SetRange\#

\end


screen("Execute":sensitive)
Execute-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.Execute\#
	\#TPopup.Execute\#

\end


screen("WMClosed":sensitive)
WMClosed-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.WMClosed\#
	\#TWindow.WMClosed\#

\end


screen("WMButton":sensitive)
WMButton-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.WMButton\#
	\#TWindow.WMButton\#

\end


screen("FirstWndThat":sensitive)
FirstWndThat-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.FirstWndThat\#
	\#TWindow.FirstWndThat\#

\end


screen("ForEachWnd":sensitive)
ForEachWnd-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.ForEachWnd\#
	\#TWindow.ForEachWnd\#

\end


screen("CloseWindow":sensitive)
CloseWindow-Methoden                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.CloseWindow\#
	\#TWindow.CloseWindow\#

\end


screen("Create":sensitive)
Create-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.Create\#
	\#TWindow.Create\#

\end


screen("Destroy":sensitive)
Destroy-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.Destroy\#
	\#TWindow.Destroy\#

\end


screen("GetClassName":sensitive)
GetClassName-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.GetClassName\#
	\#TTextWindow.GetClassName\#
	\#TWindow.GetClassName\#

\end


screen("GetWindowClass":sensitive)
GetWindowClass-Methoden                                  \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.GetWindowClass\#
	\#TTextWindow.GetWindowClass\#
	\#TWindow.GetWindowClass\#

\end


screen("GetStyle":sensitive)
GetStyle-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.GetStyle\#
	\#TTextWindow.GetStyle\#
	\#TWindow.GetStyle\#

\end


screen("IsDialog":sensitive)
IsDialog-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.IsDialog\#
	\#TWindow.IsDialog\#

\end


screen("SetCursor":sensitive)
SetCursor-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TEdit.SetCursor\#
	\#TWindow.SetCursor\#

\end


screen("GetWorkMax":sensitive)
GetWorkMax-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.GetWorkMax\#
	\#TWindow.GetWorkMax\#

\end


screen("LoadDialog":sensitive)
LoadDialog-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.LoadDialog\#
	\#TWindow.LoadDialog\#

\end


screen("FreeDialog":sensitive)
FreeDialog-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.FreeDialog\#
	\#TWindow.FreeDialog\#

\end


screen("MakeWindow":sensitive)
MakeWindow-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.MakeWindow\#
	\#TWindow.MakeWindow\#

\end


screen("OpenWindow":sensitive)
OpenWindow-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.OpenWindow\#
	\#TWindow.OpenWindow\#

\end


screen("SetupSize":sensitive)
SetupSize-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.SetupSize\#
	\#TWindow.SetupSize\#

\end


screen("SetupWindow":sensitive)
SetupWindow-Methoden                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.SetupWindow\#
	\#TWindow.SetupWindow\#

\end


screen("UpdateDialog":sensitive)
UpdateDialog-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.UpdateDialog\#
	\#TWindow.UpdateDialog\#

\end


screen("IsValid":sensitive)
IsValid-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TEdit.IsValid\#
	\#TFilterValidator.IsValid\#
	\#TLookupValidator.IsValid\#
	\#TPXPictureValidator.IsValid\#
	\#TRangeValidator.IsValid\#
	\#TValidator.IsValid\#

\end


screen("Lookup":sensitive)
Lookup-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TLookupValidator.Lookup\#
	\#TStringLookupValidator.Lookup\#

\end


screen("IsValidInput":sensitive)
IsValidInput-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TFilterValidator.IsValidInput\#
	\#TPXPictureValidator.IsValidInput\#
	\#TRangeValidator.IsValidInput\#
	\#TValidator.IsValidInput\#

\end


screen("CanClose":sensitive)
CanClose-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.CanClose\#
	\#TEdit.CanClose\#
	\#TWindow.CanClose\#

\end


screen("Undo":sensitive)
Undo-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TDialog.Undo\#
	\#TEdit.Undo\#

\end


screen("Clear":sensitive)
Clear-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TEdit.Clear\#
	\#TStatic.Clear\#
	\#TTextWindow.Clear\#

\end


screen("SetCheck":sensitive)
SetCheck-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.SetCheck\#
	\#TIcon.SetCheck\#
	\#TKeyMenu.SetCheck\#
	\#TPopup.SetCheck\#
	\#TToolbar.SetCheck\#

\end


screen("GetCheck":sensitive)
GetCheck-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.GetCheck\#
	\#TIcon.GetCheck\#
	\#TKeyMenu.GetCheck\#
	\#TPopup.GetCheck\#
	\#TToolbar.GetCheck\#

\end


screen("Check":sensitive)
Check-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.Check\#
	\#TIcon.Check\#
	\#TKeyMenu.Check\#
	\#TPopup.Check\#
	\#TToolbar.Check\#

\end


screen("Uncheck":sensitive)
Uncheck-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.Uncheck\#
	\#TIcon.Uncheck\#
	\#TKeyMenu.Uncheck\#
	\#TPopup.Uncheck\#
	\#TToolbar.Uncheck\#

\end


screen("Toggle":sensitive)
Toggle-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.Toggle\#
	\#TIcon.Toggle\#
	\#TKeyMenu.Toggle\#
	\#TPopup.Toggle\#
	\#TToolbar.Toggle\#

\end


screen("Changed":sensitive)
Changed-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.Changed\#
	\#TControl.Changed\#
	\#TScrollBar.Changed\#

\end


screen("GetText":sensitive)
GetText-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TButton.GetText\#
	\#TComboBox.GetText\#
	\#TGroupBox.GetText\#
	\#TIcon.GetText\#
	\#TKeyMenu.GetText\#
	\#TPopup.GetText\#
	\#TStatic.GetText\#

\end


screen("SetText":sensitive)
SetText-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TButton.SetText\#
	\#TComboBox.SetText\#
	\#TEdit.SetText\#
	\#TGroupBox.SetText\#
	\#TIcon.SetText\#
	\#TKeyMenu.SetText\#
	\#TPopup.SetText\#
	\#TStatic.SetText\#

\end


screen("TestIndex":sensitive)
TestIndex-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.TestIndex\#
	\#TControl.TestIndex\#
	\#TScrollBar.TestIndex\#

\end


screen("Disable":sensitive)
Disable-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Disable\#
	\#TKeyMenu.Disable\#
	\#TPopup.Disable\#
	\#TToolbar.Disable\#

\end


screen("Enable":sensitive)
Enable-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Enable\#
	\#TKeyMenu.Enable\#
	\#TPopup.Enable\#
	\#TToolbar.Enable\#

\end


screen("GetState":sensitive)
GetState-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.GetState\#
	\#TKeyMenu.GetState\#
	\#TPopup.GetState\#
	\#TToolbar.GetState\#

\end


screen("SetState":sensitive)
SetState-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.SetState\#
	\#TEdit.SetState\#
	\#TKeyMenu.SetState\#
	\#TPopup.SetState\#
	\#TRadioButton.SetState\#
	\#TToolbar.SetState\#

\end


screen("Paint":sensitive)
Paint-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.Paint\#
	\#TControl.Paint\#
	\#TDialog.Paint\#
	\#TEdit.Paint\#
	\#TIcon.Paint\#
	\#TTextWindow.Paint\#
	\#TToolbar.Paint\#
	\#TWindow.Paint\#

\end


screen("GetScroller":sensitive)
GetScroller-Methoden                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TTextWindow.GetScroller\#
	\#TWindow.GetScroller\#

\end


screen("DDGetPath":sensitive)
DDGetPath-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDGetPath\#
	\#TWindow.DDGetPath\#

\end


screen("DDGetPreferredTypes":sensitive)
DDGetPreferredTypes-Methoden                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDGetPreferredTypes\#
	\#TWindow.DDGetPreferredTypes\#

\end


screen("DDHeaderReply":sensitive)
DDHeaderReply-Methoden                                   \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDHeaderReply\#
	\#TWindow.DDHeaderReply\#

\end


screen("DDReadData":sensitive)
DDReadData-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDReadData\#
	\#TWindow.DDReadData\#

\end


screen("DDReadArgs":sensitive)
DDReadArgs-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDReadArgs\#
	\#TWindow.DDReadArgs\#

\end


screen("DDFinished":sensitive)
DDFinished-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.DDFinished\#
	\#TWindow.DDFinished\#

\end


screen("SetColor":sensitive)
SetColor-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.SetColor\#
	\#TEdit.SetColor\#
	\#TTextWindow.SetColor\#

\end


screen("IconPaint":sensitive)
IconPaint-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.IconPaint\#
	\#TWindow.IconPaint\#

\end


screen("LoadIcon":sensitive)
LoadIcon-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.LoadIcon\#
	\#TWindow.LoadIcon\#

\end


screen("LoadMenu":sensitive)
LoadMenu-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.LoadMenu\#
	\#TWindow.LoadMenu\#

\end


screen("FreeMenu":sensitive)
FreeMenu-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.FreeMenu\#
	\#TWindow.FreeMenu\#

\end


screen("HandleMenu":sensitive)
HandleMenu-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.HandleMenu\#
	\#TWindow.HandleMenu\#

\end


screen("MNSelected":sensitive)
MNSelected-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.MNSelected\#
	\#TWindow.MNSelected\#

\end


screen("FreeIcon":sensitive)
FreeIcon-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.FreeIcon\#
	\#TWindow.FreeIcon\#

\end


screen("IsIconified":sensitive)
IsIconified-Methoden                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.IsIconified\#
	\#TWindow.IsIconified\#

\end


screen("GetIconTitle":sensitive)
GetIconTitle-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.GetIconTitle\#
	\#TWindow.GetIconTitle\#

\end


screen("IndexOf":sensitive)
IndexOf-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.IndexOf\#
	\#TCollection.IndexOf\#
	\#TSortedCollection.IndexOf\#
	\#TWindow.IndexOf\#

\end


screen("At":sensitive)
At-Methoden                                              \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.At\#
	\#TCollection.At\#
	\#TWindow.At\#

\end


screen("Insert":sensitive)
Insert-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TCollection.Insert\#
	\#TSortedCollection.Insert\#

\end


screen("Compare":sensitive)
Compare-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TSortedCollection.Compare\#
	\#TStrCollection.Compare\#
	\#TStringCollection.Compare\#

\end


screen("FreeItem":sensitive)
FreeItem-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TCollection.FreeItem\#
	\#TStrCollection.FreeItem\#
	\#TStringCollection.FreeItem\#

\end


screen("FirstThat":sensitive)
FirstThat-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TCollection.FirstThat\#
	\#TDialog.FirstThat\#

\end


screen("ForEach":sensitive)
ForEach-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TCollection.ForEach\#
	\#TDialog.ForEach\#

\end


screen("Error":sensitive)
Error-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Error\#
	\#TCollection.Error\#
	\#TFilterValidator.Error\#
	\#TPXPictureValidator.Error\#
	\#TRangeValidator.Error\#
	\#TStringLookupValidator.Error\#
	\#TValidator.Error\#

\end


screen("GetHelp":sensitive)
GetHelp-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.GetHelp\#
	\#TIcon.GetHelp\#
	\#TToolbar.GetHelp\#

\end


screen("SetHelp":sensitive)
SetHelp-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.SetHelp\#
	\#TIcon.SetHelp\#
	\#TToolbar.SetHelp\#

\end


screen("IsHelpAvailable":sensitive)
IsHelpAvailable-Methoden                                 \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.IsHelpAvailable\#
	\#TIcon.IsHelpAvailable\#
	\#TToolbar.IsHelpAvailable\#

\end


screen("TestMessage":sensitive)
TestMessage-Methoden                                     \#ObjectGEM\#
------------------------------------------------------------------

	\#TEvent.TestMessage\#
	\#TToolbar.TestMessage\#

\end


screen("TestKey":sensitive)
TestKey-Methoden                                         \#ObjectGEM\#
------------------------------------------------------------------

	\#TEvent.TestKey\#
	\#TIcon.TestKey\#
	\#TKeyMenu.TestKey\#
	\#TMenu.TestKey\#
	\#TToolbar.TestKey\#

\end


screen("TestMenu":sensitive)
TestMenu-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TEvent.TestMenu\#
	\#TKey.TestMenu\#
	\#TKeyMenu.TestMenu\#

\end


screen("Next":sensitive)
Next-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Next\#
	\#TEvent.Next\#
	\#TWindow.Next\#

\end


screen("Previous":sensitive)
Previous-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Previous\#
	\#TEvent.Previous\#
	\#TWindow.Previous\#

\end


screen("IconSelect":sensitive)
IconSelect-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.IconSelect\#
	\#TWindow.IconSelect\#

\end


screen("FirstIcon":sensitive)
FirstIcon-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.FirstIcon\#
	\#TWindow.FirstIcon\#

\end


screen("NextIcon":sensitive)
NextIcon-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.NextIcon\#
	\#TWindow.NextIcon\#

\end


screen("GetClipboard":sensitive)
GetClipboard-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.GetClipboard\#
	\#TEdit.GetClipboard\#
	\#TWindow.GetClipboard\#

\end


screen("Print":sensitive)
Print-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TTextWindow.Print\#
	\#TWindow.Print\#

\end


screen("SelectAll":sensitive)
SelectAll-Methoden                                       \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.SelectAll\#
	\#TTextWindow.SelectAll\#
	\#TWindow.SelectAll\#

\end


screen("Delete":sensitive)
Delete-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Delete\#
	\#TCollection.Delete\#
	\#TDialog.Delete\#
	\#TWindow.Delete\#

\end


screen("Cut":sensitive)
Cut-Methoden                                             \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Cut\#
	\#TDialog.Cut\#
	\#TEdit.Cut\#
	\#TTextWindow.Cut\#
	\#TWindow.Cut\#

\end


screen("Copy":sensitive)
Copy-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Copy\#
	\#TDialog.Copy\#
	\#TEdit.Copy\#
	\#TTextWindow.Copy\#
	\#TWindow.Copy\#

\end


screen("Paste":sensitive)
Paste-Methoden                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Paste\#
	\#TDialog.Paste\#
	\#TEdit.Paste\#
	\#TTextWindow.Paste\#
	\#TWindow.Paste\#

\end


screen("Transfer":sensitive)
Transfer-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TCheckBox.Transfer\#
	\#TComboBox.Transfer\#
	\#TControl.Transfer\#
	\#TScrollBar.Transfer\#
	\#TStatic.Transfer\#

\end


screen("Hide":sensitive)
Hide-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Hide\#
	\#TIcon.Hide\#

\end


screen("Unhide":sensitive)
Unhide-Methoden                                          \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.Unhide\#
	\#TIcon.Unhide\#

\end


screen("SetSelection":sensitive)
SetSelection-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.SetSelection\#
	\#TPopup.SetSelection\#

\end


screen("GetSelection":sensitive)
GetSelection-Methoden                                    \#ObjectGEM\#
------------------------------------------------------------------

	\#TComboBox.GetSelection\#
	\#TPopup.GetSelection\#

\end


screen("IsHidden":sensitive)
IsHidden-Methoden                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#TControl.IsHidden\#
	\#TIcon.IsHidden\#

\end


screen("TestButton":sensitive)
TestButton-Methoden                                      \#ObjectGEM\#
------------------------------------------------------------------

	\#TEvent.TestButton\#
	\#TIcon.TestButton\#

\end


screen("Init":sensitive)
Init-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Init\#
	\#TButton.Init\#
	\#TCheckBox.Init\#
	\#TClipboard.Init\#
	\#TCollection.Init\#
	\#TComboBox.Init\#
	\#TControl.Init\#
	\#TDialog.Init\#
	\#TEdit.Init\#
	\#TEvent.Init\#
	\#TEventObject.Init\#
	\#TFilterValidator.Init\#
	\#TGroupBox.Init\#
	\#TIcon.Init\#
	\#TKey.Init\#
	\#TKeyMenu.Init\#
	\#TMenu.Init\#
	\#TObject.Init\#
	\#TPopup.Init\#
	\#TPXPictureValidator.Init\#
	\#TRadioButton.Init\#
	\#TRangeValidator.Init\#
	\#TScrollBar.Init\#
	\#TScroller.Init\#
	\#TSortedCollection.Init\#
	\#TStatic.Init\#
	\#TStringCollection.Init\#
	\#TStringLookupValidator.Init\#
	\#TTextWindow.Init\#
	\#TToolbar.Init\#
	\#TTriState.Init\#
	\#TValidator.Init\#
	\#TWindow.Init\#

\end


screen("Free":sensitive)
Free-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TCollection.Free\#
	\#TObject.Free\#

\end


screen("Done":sensitive)
Done-Methoden                                            \#ObjectGEM\#
------------------------------------------------------------------

	\#TApplication.Done\#
	\#TButton.Done\#
	\#TCollection.Done\#
	\#TComboBox.Done\#
	\#TControl.Done\#
	\#TDialog.Done\#
	\#TEdit.Done\#
	\#TEvent.Done\#
	\#TEventObject.Done\#
	\#TGroupBox.Done\#
	\#TIcon.Done\#
	\#TKeyMenu.Done\#
	\#TObject.Done\#
	\#TPopup.Done\#
	\#TPXPictureValidator.Done\#
	\#TScroller.Done\#
	\#TStatic.Done\#
	\#TStringLookupValidator.Done\#
	\#TTextWindow.Done\#
	\#TToolbar.Done\#
	\#TWindow.Done\#

\end


screen("Variablen")
Variablen                                                \#ObjectGEM\#
------------------------------------------------------------------

	\#Application\#
	\#pxya\#         (Array)
	\#SysInfo\#      (Record)

\end


screen("Application":sensitive)
Application (Variable)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   var Application: PApplication;

Beschreibung  Application ist zunÑchst mit \#nil\# initialisiert und
              wird von \#TApplication.Init\# mit @\#self\# besetzt, d.h.
              zur Laufzeit zeigt der Pointer immer auf das aktive
              (und einzige) TApplication-Objekt.
              Normalerweise wird mit dieser Variable von anderen
              Objekten auf die TApplication-Methoden zugegriffen,
              z.B. Application^.Alert(...).

Querverweise  \#TApplication\#

\end


screen("pxya":sensitive)
pxya (Variable)                                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   var pxya: ptsin_ARRAY;

Beschreibung  pxya ist ein integer-Array, das z.B. fÅr VDI- und
              AES-Aufrufe temporÑr genutzt werden kann.
              Nach dem Aufruf irgendeiner ObjectGEM-Routine kann
              sich der Inhalt geÑndert haben!

\end


screen("SysInfo":sensitive,"BGDefCol":sensitive,"SFHeight":sensitive,"SFWidth":sensitive,"Desktop":sensitive,
       "SysInfo.BGDefCol":sensitive,"SysInfo.SFHeight":sensitive,"SysInfo.SFWidth":sensitive,
       "SysInfo.Desktop":sensitive)
SysInfo (Variable)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   var SysInfo: record               (nur lesen)
                             BGDefCol,
                             SFHeight,
                             SFWidth : integer;
                             Desktop : \#GRECT\#
                           end;

Beschreibung  BGDefCol gibt den Farbindex des Dialoghintergrunds
              an; wird erst ab AES 3.40 verwendet und ist nor-
              malerweise \#LWhite\# (8).
              SFHeight und SFWidth geben die Hîhe und Breite des
              groûen Systemfonts in Pixel an.
              In Desktop werden die mit \#GetDesk\# ermittelten Aus-
              maûe des Desktop-Hintergrunds eingetragen.
              Alle Werte werden von \#TApplication.Init\# gesetzt.

\end


screen("Prozeduren und Funktionen")
Prozeduren und Funktionen                                \#ObjectGEM\#
------------------------------------------------------------------

	\#Cookie-Routinen\#
	\#Datei-Routinen\#
	\#Grafik-Routinen\#
	\#Maus-Routinen\#
	\#Pointer-Routinen\#
	\#Profile-Routinen\#
	\#Rechteck-Routinen\#
	\#Versions-Routinen\#
	\#Zeichenketten-Routinen\#

	\#Sonstige Prozeduren und Funktionen\#

\end


screen("Cookie-Routinen")
Cookie-Routinen                                        Unit \#OProcs\#
------------------------------------------------------------------

	\#ChangeCookie\#  (Funktion)
	\#GetCookie\#     (Funktion)
	\#NewCookie\#     (Funktion)
	\#RemoveCookie\#  (Funktion)

\end


screen("Datei-Routinen")
Datei-Routinen                                           \#ObjectGEM\#
------------------------------------------------------------------

	\#BootDevice\#       (Funktion)
	\#Exist\#            (Funktion)
	\#FileSelect\#       (Funktion)
	\#GetDrives\#        (Funktion)
	\#GetExtension\#     (Funktion)
	\#GetFilename\#      (Funktion)
	\#GetHomeDir\#       (Funktion)
	\#GetPath\#          (Funktion)
	\#GetTempDir\#       (Funktion)
	\#GetTempFilename\#  (Funktion)

\end


screen("Grafik-Routinen")
Grafik-Routinen                                      Unit \#OWindows\#
------------------------------------------------------------------

	\#vdi_fix\#     (Prozedur)
	\#vr_convert\#  (Prozedur)

\end


screen("Maus-Routinen")
Maus-Routinen                                        Unit \#OWindows\#
------------------------------------------------------------------

	\#ArrowMouse\#      (Prozedur)
	\#BusyMouse\#       (Prozedur)
	\#GetMouse\#        (Prozedur)
	\#HideMouse\#       (Prozedur)
	\#IsMouseBusy\#     (Funktion)
	\#IsMouseVisible\#  (Funktion)
	\#LastMouse\#       (Prozedur)
	\#SetMouse\#        (Funktion)
	\#SetMousePos\#     (Prozedur)
	\#ShowMouse\#       (Prozedur)
	\#SliceMouse\#      (Prozedur)
	\#SliceMouseNext\#  (Prozedur)

\end


screen("Profile-Routinen")
Profile-Routinen                                     Unit \#OWindows\#
------------------------------------------------------------------

	\#ClosePrivateProfile\#        (Funktion)
	\#GetPrivateProfileInt\#       (Funktion)
	\#GetPrivateProfileString\#    (Funktion)
	\#OpenPrivateProfile\#         (Funktion)
	\#SavePrivateProfile\#         (Funktion)
	\#WritePrivateProfileInt\#     (Funktion)
	\#WritePrivateProfileString\#  (Funktion)
	\#GetProfileInt\#              (Funktion)
	\#GetProfileString\#           (Funktion)
	\#WriteProfileInt\#            (Funktion)
	\#WriteProfileString\#         (Funktion)

\end


screen("Rechteck-Routinen")
Rechteck-Routinen                                      Unit \#OProcs\#
------------------------------------------------------------------

	\#A2toGR\#        (Prozedur)
	\#GRtoA2\#        (Prozedur)
  \#rc_intersect\#  (Funktion)

\end


screen("Versions-Routinen")
Versions-Routinen                                        \#ObjectGEM\#
------------------------------------------------------------------

	\#DtoS\#           (Funktion)
  \#GEMDOSVersion\#  (Funktion)
  \#GEMVersion\#     (Funktion)
  \#MiNTVersion\#    (Funktion)
  \#TOSDate\#        (Funktion)
  \#TOSVersion\#     (Funktion)
	\#VtoS\#           (Funktion)

\end


screen("Zeichenketten-Routinen")
Zeichenketten-Routinen                                 Unit \#OProcs\#
------------------------------------------------------------------

	\#atof\#        (Funktion)
	\#atol\#        (Funktion)
	\#ChrDispose\#  (Prozedur)
	\#ChrNew\#      (Funktion)
  \#DisposeStr\#  (Prozedur)
	\#ftoa\#        (Funktion)
	\#LowChar\#     (Funktion)
	\#ltoa\#        (Funktion)
  \#NewStr\#      (Funktion)
	\#RPos\#        (Funktion)
	\#StrLPas\#     (Funktion)
	\#StrPLeft\#    (Funktion)
	\#StrPLower\#   (Funktion)
	\#StrPRight\#   (Funktion)
	\#StrPSpace\#   (Funktion)
	\#StrPTrim\#    (Prozedur)
	\#StrPTrimF\#   (Funktion)
	\#StrPUpper\#   (Funktion)
	\#UpChar\#      (Funktion)

\end


screen("Pointer-Routinen")
Pointer-Routinen                                         \#ObjectGEM\#
------------------------------------------------------------------

  \#GetOSHeaderPtr\#  (Funktion)
	\#GetQSB\#          (Prozedur)
  \#HiWord\#          (Funktion)
  \#LoWord\#          (Funktion)
	\#Ptr\#             (Funktion)

\end


screen("Sonstige Prozeduren und Funktionen")
Sonstige Prozeduren und Funktionen                       \#ObjectGEM\#
------------------------------------------------------------------

	\#Abstract\#         (Prozedur)
	\#appl_yield\#       (Prozedur)
  \#Between\#          (Funktion)
	\#bTst\#             (Funktion)
	\#form_box\#         (Prozedur)
	\#GetDesk\#          (Prozedur)
  \#IsDesktopActive\#  (Funktion)
  \#MapKey\#           (Funktion)
  \link("Max_fn")Max\#              (Funktion)
  \link("Min_fn")Min\#              (Funktion)
  \#Sgn\#              (Funktion)

\end


screen("ChangeCookie":sensitive)
ChangeCookie (Funktion)                                Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function ChangeCookie(cookie: \#TCookieID\#;
                                      newval: longint): boolean;

Beschreibung  éndert den Wert des in cookie Åbergebenen Cookies
              auf newval. Wenn kein CookieJar existiert oder der
              angegebene Cookie nicht vorhanden ist, wird false
              zurÅckgegeben, sonst true.

Querverweise  \#Cookie-Routinen\#

\end


screen("GetCookie":sensitive)
GetCookie (Funktion)                                 Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetCookie(cookie: TCookieID;
                                    var value: longint): boolean;

Beschreibung  Gibt in value den Wert des Cookies cookie zurÅck,
              wenn dieser existiert. Die RÅckgabe ist dann true.
              Ansonsten wird false zurÅckgegeben und value nicht
              verÑndert.

Querverweise  \#Cookie-Routinen\#

\end


screen("NewCookie":sensitive)
NewCookie (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function NewCookie(cookie: TCookieID;
                                     value: longint): boolean;

Beschreibung  Legt einen neuen Cookie mit Kennung cookie und
              Wert value an, wenn ein CookieJar existiert und
              noch mind. ein Platz darun frei ist. Die RÅckgabe
              ist dann true.

Querverweise  \#Cookie-Routinen\#

\end


screen("RemoveCookie":sensitive)
RemoveCookie (Funktion)                                Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function RemoveCookie(cookie: TCookieID): boolean;

Beschreibung  Entfernt den Cookie mit Kennung cookie aus dem
              CookieJar. Existiert kein CookieJar oder ist
              der angegebene Cookie nicht vorhanden, wird false
              zurÅckgegeben.

Querverweise  \#Cookie-Routinen\#

\end


screen("BootDevice":sensitive)
BootDevice (Funktion)                                  Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function BootDevice: char;

Beschreibung  Liefert die Laufwerksbezeichnung des Boot-Laufwerks
              ('A', 'B' etc.). Dazu wird die Systemvariable
              _bootdev ($446) ausgewertet.

Querverweise  \#Datei-Routinen\#

\end


screen("GetDrives":sensitive)
GetDrives (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetDrives: longint;

Beschreibung  Liefert \#Dsetdrv\#(\#Dgetdrv\#) zurÅck, d.h. die Bitmap
              aller angemeldeten GEMDOS-Laufwerke. Bit 0 ent-
              spricht dabei Laufwerk A: etc.

Querverweise  \#Datei-Routinen\#

\end


screen("GetPath":sensitive)
GetPath (Funktion)                                     Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetPath(FileName: string): string;

Beschreibung  Liefert den in FileName enthaltenen Pfad (incl.
              Backslash). Wenn FileName keine Pfadangabe ent-
              hÑlt, wird ein Leerstring zurÅckgegeben.

Querverweise  \#Datei-Routinen\#  \#FSplit\#

\end


screen("GetExtension":sensitive)
GetExtension (Funktion)                                Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetExtension(FileName: string): string;

Beschreibung  Liefert die Datei-Extension von FileName (incl.
              Punkt). FÅr 'C:\\TEST.DB' wÅrde man also '.DB'
              erhalten.

Querverweise  \#Datei-Routinen\#  \#FSplit\#

\end


screen("GetFilename":sensitive)
GetFilename (Funktion)                                 Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetFilename(FileName: string;
                                         Ext: boolean): string;

Beschreibung  Gibt den Dateinamen von FileName ohne Pfadangabe
              zurÅck. Die Extension wird nur angehÑngt, wenn
              Ext true ist, sonst wird sie (incl. Punkt) abge-
              schnitten.

Querverweise  \#Datei-Routinen\#  \#FSplit\#

\end


screen("GetTempFilename":sensitive)
GetTempFilename (Funktion)                             Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetTempFilename: string;

Beschreibung  Gibt einen Dateinamen zurÅck (12 Zeichen), der sich
              aus Datum und Uhrzeit zusammensetzt. Dieser Name
              kann fÅr temporÑre Dateien etc. verwendet werden.
              Z.Z. unterscheiden sich die zurÅckgelieferten
              Namen nur dann, wenn GetTempFilename im Abstand
              von mind. 2 Sekunden aufgerufen wird.

Querverweise  \#Datei-Routinen\#  \#GetTempDir\#

\end


screen("GetTempDir":sensitive)
GetTempDir (Funktion)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetTempDir: string;

Beschreibung  Liefert das globale temporÑre Verzeichnis als
              absoluten Pfad (incl. Backslash). Dazu wird nach
              folgenden Environment-Variablen gesucht, bis eine
              davon einen gÅltigen Pfad enthÑlt: TMPDIR, TEMPDIR,
              TMP, TEMP, TRASHDIR. Ist keine dieser Variablen
              gÅltig, wird das Verzeichnis der Applikation
              genommen.

Querverweise  \#Datei-Routinen\#  \#GetTempFilename\#
                              \#TApplication.apPath\#

\end


screen("GetHomeDir":sensitive)
GetHomeDir (Funktion)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetHomeDir(RootDefault: boolean): string;

Beschreibung  Liefert das User-Home-Verzeichnis als absoluten
              Pfad (incl. Backslash), wozu die Environment-
              Variable HOME ausgewertet wird.
              Wenn HOME nicht gesetzt ist, wird - in AbhÑngig-
              keit von RootDefault - das Boot-Wurzelverzeichnis
              (true) oder das Verzeichnis der Applikation (false)
              gewÑhlt.

Querverweise  \#Datei-Routinen\#  \#TApplication.apPath\#  \#Profiles\#

\end


screen("Exist":sensitive)
Exist (Funktion)                                       Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Exist(FileName: string): boolean;

Beschreibung  Gibt an, ob die Datei FileName existiert. Die \#DTA\#
              der Applikation wird _nicht_ verÑndert! Aus Sicher-
              heitsgrÅnden wird intern eine \#wind_update\#-Schach-
              telung vorgenommen.

Querverweise  \#Datei-Routinen\#  \#PathExist\#  \#TApplication.apDTA\#

\end


screen("PathExist":sensitive)
PathExist (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function PathExist(PathName: string): boolean;

Beschreibung  Gibt an, ob der Pfad (Ordner) PathName existiert.
              Die \#DTA\# der Applikation wird _nicht_ verÑndert!
              Aus SicherheitsgrÅnden wird intern eine \#wind_update\#-
              Schachtelung vorgenommen.
              PathName kann mit oder ohne abschlieûenden Back-
              slash ('\\') angegeben werden. Wird ein Wurzel-
              verzeichnis Åbergeben (z.B. 'C:\'), so wird Åber-
              prÅft, ob das Laufwerk vorhanden ist.

Querverweise  \#Datei-Routinen\#  \#Exist\#  \#TApplication.apDTA\#

\end


screen("FileSelect":sensitive)
FileSelect (Funktion)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function FileSelect(AParent: PWindow; ATitle,
                          AMask: string; var APath,AFile: string;
                          ForceExist: boolean): boolean;

Beschreibung  Ermîglicht eine einfache Bearbeitung des Datei-
              auswahl-Dialogs. Wenn die Fileselectbox aus einer
              Dialogbox heraus aufgerufen wird, sollte AParent
              auf diesen Dialog zeigen (mittels @\#self\#), damit
              die Dialogbox, wenn sie modal sein sollte, korrekt
              restauriert werden kann (sonst muû AParent nil
              sein).
              In ATitle wird ein Titel fÅr die Dateiauswahl
              Åbergeben. Es wird automatisch darauf geachtet,
              ob die vorhandene TOS-Version \#fsel_exinput\# unter-
              stÅtzt, sonst wird der Titel ignoriert (das ABC-
              GEM wird beachtet, ebenso wie ein FSEL-Cookie).
              In AMask wird die Dateimaske Åbergeben (z.B.
              '*.TXT','TEST.?A?'). Wird ein Leerstring Åber-
              geben, werden alle Dateien angezeigt.
              In APath muû der gewÅnschte Pfad (Leerstring=
              aktueller Pfad) angegeben werden, AFile muû
              keinen bestimmten Wert enthalten (s.u.).
              Wenn ForceExist auf true gesetzt wird, kann
              der Dialog nicht mit <OK> verlassen werden,
              wenn die ausgewÑhlte Datei gar nicht existiert.
              Wenn eine Datei mit <OK> ausgewÑhlt wurde, wird
              true zurÅckgegeben und APath enthÑlt den Pfad der
              Datei, die in AFile geliefert wird (AFile enthÑlt
              also _keine_ Pfadangaben). Ansonsten wird false
              geliefert, und AFile und APath werden nicht
              verÑndert.
              Aus SicherheitsgrÅnden wird intern eine
              \#wind_update\#-Schachtelung vorgenommen.

Querverweise  \#Datei-Routinen\#

\end


screen("vdi_fix":sensitive,"FF_STAND":sensitive,"FF_DEVSPEC":sensitive)
vdi_fix (Prozedur)                                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure vdi_fix(var pfd: MFDB;
                              theAddr: pointer; w,h: integer);

Beschreibung  FÅllt eine \#MFDB\#-Struktur aus. fd_addr wird auf
              theAddr gesetzt, fd_w auf w und fd_h auf h.
              fd_wdwidth wird aus fd_w errechnet.
              fd_nplanes wird standardmÑûig auf 1 gesetzt,
              fd_stand auf FF_STAND; hier sind also evtl.
              selbst énderungen durchzufÅhren.
              fd_r1, fd_r2 und fd_r3 werden ausgenullt.
              Folgende Konstanten sind fÅr fd_stand vorgesehen:

								const FF_STAND   = 1;
											FF_DEVSPEC = 0;

Querverweise  \#Grafik-Routinen\#

\end


screen("vr_convert":sensitive)
vr_convert (Prozedur)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure vr_convert(handle: integer;
                               psrcMFDB: MFDB; format: integer);

Beschreibung  Wandelt eine durch psrcMFDB beschriebene Bitmap
              auf der VDI-Workstation handle in das Format format
              um, wenn sie nicht schon in diesem vorliegt (d.h.
              format sollte ungleich fd_stand sein).

Querverweise  \#Grafik-Routinen\#  \#vr_trnfm\#

\end


screen("ArrowMouse":sensitive)
ArrowMouse (Prozedur)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ArrowMouse;

Beschreibung  Wandelt den Mauscursor in den normalen Pfeil um,
              wenn gleich viele (oder mehr) Aufrufe von Arrow-
              Mouse gegenÅber \#BusyMouse\# (bzw. \#SliceMouse\#)
              gemacht wurden.

Querverweise  \#Maus-Routinen\#  \#IsMouseBusy\#

\end


screen("BusyMouse":sensitive)
BusyMouse (Prozedur)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure BusyMouse;

Beschreibung  Wandelt den Mauscursor in die Biene um, um anzu-
              zeigen, daû z.Z. eine Aktion ausgefÅhrt wird.
              ObjectGEM merkt sich, wie oft BusyMouse aufgerufen
              wurde. Damit der Mauscursor wieder als Pfeil dar-
              gestellt wird, muû \#ArrowMouse\# mind. genauso oft
              aufgerufen werden, wodurch sich verschachtelte
              énderungen des Mauscursors nicht gegenseitig
              stîren. Aus genau diesem Grund sollten diese
              beiden Mausformen _nie_ direkt mit \#graf_mouse\#
              gesetzt werden!

Querverweise  \#Maus-Routinen\#  \#IsMouseBusy\#  \#SliceMouse\#

\end


screen("SliceMouse":sensitive)
SliceMouse (Prozedur)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SliceMouse;

Beschreibung  Wandelt den Mauscursor in eine schwarz-weiû ge-
              viertelte Scheibe um, die mit \#SliceMouseNext\# zum
              Drehen gebracht werden kann.
              ObjectGEM merkt sich, wie oft SliceMouse aufgerufen
              wurde (\#BusyMouse\# und SliceMouse benutzen denselben
              ZÑhler). Damit der Mauscursor wieder als Pfeil dar-
              gestellt wird, muû \#ArrowMouse\# mind. genauso oft
              aufgerufen werden, wodurch sich verschachtelte
              énderungen des Mauscursors nicht gegenseitig
              stîren.

Querverweise  \#Maus-Routinen\#  \#IsMouseBusy\#

\end


screen("SliceMouseNext":sensitive)
SliceMouseNext (Prozedur)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SliceMouseNext;

Beschreibung  Wechselt bei jedem Aufruf die Mausformen \#IDC_SLICE1\#
              bis \#IDC_SLICE4\# ab, so daû man den Fortgang einer
              Aktion durch das Drehen der Scheibe anzeigen kann.
              Darf nur aufgerufen werden, wenn vorher \#SliceMouse\#
              aufgerufen wurde.

Querverweise  \#Maus-Routinen\#

\end


screen("HideMouse":sensitive)
HideMouse (Prozedur)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure HideMouse;

Beschreibung  Macht den Mauscursor unsichtbar.

Querverweise  \#Maus-Routinen\#  \#ShowMouse\#  \#IsMouseVisible\#

\end


screen("LastMouse":sensitive)
LastMouse (Prozedur)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure LastMouse;

Beschreibung  Stellt den Mauscursor wieder her, der vor dem
              letzten \#graf_mouse\#-Aufruf aktuell war.

Querverweise  \#Maus-Routinen\#

\end


screen("ShowMouse":sensitive)
ShowMouse (Prozedur)                                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure ShowMouse;

Beschreibung  Macht den Mauscursor sichtbar.

Querverweise  \#Maus-Routinen\#  \#HideMouse\#  \#IsMouseVisible\#

\end


screen("IsMouseBusy":sensitive)
IsMouseBusy (Funktion)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsMouseBusy: boolean;

Beschreibung  Gibt an, ob der Mauscursor z.Z. als Biene darge-
              stellt wird, d.h. ob \#BusyMouse\# (bzw. \#SliceMouse\#)
              îfter als \#ArrowMouse\# aufgerufen wurde.

Querverweise  \#Maus-Routinen\#

\end


screen("IsMouseVisible":sensitive)
IsMouseVisible (Funktion)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsMouseVisible: boolean;

Beschreibung  Gibt an, ob der Mauscursor z.Z. sichtbar ist,
              d.h. ob \#ShowMouse\# hÑufiger als \#HideMouse\# aufge-
              rufen wurde.

Querverweise  \#Maus-Routinen\#

\end


screen("SetMousePos":sensitive)
SetMousePos (Prozedur)                               Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetMousePos(mX,mY: integer);

Beschreibung  Setzt den Mauscursor an die Position (mY,mY).
              Intern wird \#appl_tplay\# verwendet.

Querverweise  \#Maus-Routinen\#

\end


screen("SetMouse":sensitive)
SetMouse (Prozedur)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function SetMouse(Indx: HCursor;
                                  Form: MFORMPtr): integer;

Beschreibung  Entspricht im wesentlichen \#graf_mouse\#, allerdings
              kînnen zusÑtzliche \#Mausformen\# verwendet werden.
              Auûerdem kann durch Verwendung dieser Routine
              die aktuelle Einstellung mit \#GetMouse\# erfragt
              werden.

Querverweise  \#Maus-Routinen\#

\end


screen("GetMouse":sensitive)
GetMouse (Prozedur)                                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetMouse(var Indx: HCursor;
                                             var Form: MFORM);

Beschreibung  Liefert die aktuelle Mausform zurÅck. In Indx
              erhÑlt man die Nummer, in Form die evtl. benutzer-
              definierten Daten.

Querverweise  \#Maus-Routinen\#  \#SetMouse\#

\end


screen("OpenPrivateProfile":sensitive)
OpenPrivateProfile (Funktion)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function OpenPrivateProfile
                                    (FileName: string): boolean;

Beschreibung  LÑdt die in FileName angegebene INF-Datei in den
              Speicher, wo sie mit einer \#TStrCollection\# ver-
              waltet wird. Alle Profile-Operationen, die auf
              dieser INF-Datei ausgefÅhrt werden, benîtigen
              dadurch keine Plattenzugriffe mehr und werden so
              beschleunigt.
              Es kann immer nur ein Profile im Speicher ver-
              waltet werden, Zugriffe auf andere Profiles
              werden direkt auf der Platte ausgefÅhrt.
              OpenPrivateProfile liefert true, wenn die INF-
              Datei eingelesen werden konnte. Existiert die
              Datei nicht (d.h. das Profile wird mit diesem
              Aufruf neu angelegt) oder trat ein Fehler auf,
              ist die RÅckgabe false.
              WICHTIG: Die Datei $HOME/user.inf kann mit dieser
              Routine _nicht_ geîffnet werden, da diese Datei
              evtl. eine globale Konfigurationsdatei wird.

Querverweise  \#Profile-Routinen\#  \#SavePrivateProfile\#
	            \#Profiles\#          \#ClosePrivateProfile\#

\end


screen("ClosePrivateProfile":sensitive)
ClosePrivateProfile (Funktion)                       Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function ClosePrivateProfile: boolean;

Beschreibung  Schlieût eine zuvor mit \#OpenPrivateProfile\# geîffnete
              INF-Datei. Wenn an dem Profile énderungen vorge-
              nommen wurden, wird vorher noch \#SavePrivateProfile\#
              aufgerufen.
              Die RÅckgabe ist true, wenn das Profile korrekt ge-
              schlossen werden konnte, false, wenn gar kein Pro-
              file geîffnet war oder beim Speichern ein Fehler
              aufgetreten ist.
              Wird von \#TApplication.Done\# aufgerufen.

Querverweise  \#Profile-Routinen\#  \#Profiles\#

\end


screen("SavePrivateProfile":sensitive)
SavePrivateProfile (Funktion)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function SavePrivateProfile: boolean;

Beschreibung  Speichert eine mit \#OpenPrivateProfile\# geîffnete
              INF-Datei, wenn énderungen vorgenommen wurden.
              Die RÅckgabe ist true, wenn beim Speichern kein
              Fehler aufgetreten ist.
              Aus SicherheitsgrÅnden wird eine evtl. schon vor-
              handene INF-Datei erst gelîscht, wenn die neue
              Datei fehlerfrei geschrieben werden konnte. Dazu
              wird eine temporÑre Datei, die mit \#GetTempFilename\#
              ermittelt wird, angelegt.
              Wird von \#ClosePrivateProfile\# aufgerufen.

Querverweise  \#Profile-Routinen\#  \#Profiles\#

\end


screen("GetPrivateProfileInt":sensitive)
GetPrivateProfileInt (Funktion)                      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetPrivateProfileInt(AppName,
                              KeyName: string; Default: longint;
                              FileName: string): longint;

Beschreibung  Diese Funktion ruft den Wert einer IntegerschlÅssel-
              anweisung aus der durch FileName angegebenen INF-
              Datei (z.B. 'TEST.INF') ab.
              GetPrivateProfileInt sucht die Datei nach einer
              durch den Parameter KeyName bestimmten SchlÅssel-
              anweisung ab und ÅberprÅft dann die öbereinstim-
              mung von AppName und dem in der Datei stehenden
              Anwendungsnamen.
              Ein Integereintrag in der INF-Datei muû folgende
              Form haben:

              [Anwendungsname]
              SchlÅsselanweisung = wert
              ...

              Das kînnte also z.B. so aussehen:

              [Drucker]
              Kopien=2

							Wird die SchlÅsselanweisung nicht oder nicht
							unter dem Anwendungsnamen gefunden, wird Default
							zurÅckgegeben. Ansonsten wird der Wert der
							SchlÅsselanweisung geliefert, wobei den Ziffern
							folgende Buchstaben ignoriert werden (z.B. gibt
							'Kopien=3abc' den Wert 3 zurÅck).
							Wichtig: Die Groû-/Kleinschreibung bei AppName
							und KeyName wird _nicht_ berÅcksichtigt.
              Aus SicherheitsgrÅnden wird intern eine
              \#wind_update\#-Schachtelung durchgefÅhrt,
              auûer wenn mit \#OpenPrivateProfile\# die Profile-
              Operationen in den Speicher verlagert wurden.

Querverweise  \#Profile-Routinen\#  \#WritePrivateProfileInt\#
	            \#Profiles\#

\end


screen("GetPrivateProfileString":sensitive)
GetPrivateProfileString (Funktion)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetPrivateProfileString(AppName,KeyName,
                               Default,FileName: string): string;

Beschreibung  Diese Funktion ruft den Wert einer SchlÅsselan-
              weisung aus der durch FileName angegebenen INF-
              Datei (z.B. 'TEST.INF') ab.
              GetPrivateProfileString sucht die Datei nach einer
              durch den Parameter KeyName bestimmten SchlÅssel-
              anweisung ab und ÅberprÅft dann die öbereinstim-
              mung von AppName und dem in der Datei stehenden
              Anwendungsnamen.
              Ein Stringeintrag in der INF-Datei muû folgende
              Form haben:

              [Anwendungsname]
              SchlÅsselanweisung = string
              ...

              Das kînnte also z.B. so aussehen:

              [Grafik]
              Bildname=TIGER.IMG

							Wird die SchlÅsselanweisung nicht oder nicht
							unter dem Anwendungsnamen gefunden, wird Default
							zurÅckgegeben. Ansonsten wird die Zeichenkette
							hinter den SchlÅsselanweisung geliefert.
							Wichtig: Die Groû-/Kleinschreibung bei AppName
							und KeyName wird _nicht_ berÅcksichtigt.
              Aus SicherheitsgrÅnden wird intern eine
              \#wind_update\#-Schachtelung durchgefÅhrt,
              auûer wenn mit \#OpenPrivateProfile\# die Profile-
              Operationen in den Speicher verlagert wurden.

Querverweise  \#Profile-Routinen\#  \#WritePrivateProfileString\#
              \#Profiles\#

\end


screen("WritePrivateProfileInt":sensitive)
WritePrivateProfileInt (Funktion)                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function WritePrivateProfileInt(AppName,
                                KeyName: string; Value: longint;
                                FileName: string): boolean;

Beschreibung  Diese Funktion kopiert den durch den Parameter
              Value Åbergebenen Wert in die durch FileName
              angegebene INF-Datei (z.B. 'MYAPP.INF'). Sie
              sucht die Datei nach der SchlÅsselanweisung ab,
              die durch den Parameter KeyName bestimmt ist,
              der wiederum unter dem Anwendungsnamen AppName
              zu finden ist. Wird keine öbereinstimmung ge-
              funden, fÅgt die Funktion der Datei eine ent-
              sprechende SchlÅsselanweisung (und wenn nîtig
              auch den zugehîrigen Anwendungsnamen) hinzu.
              Ist die SchlÅsselanweisung hingegen vorhanden,
              wird der zugehîrige Wert durch Value ersetzt.
              Der RÅckgabewert ist true, wenn die Funktion
              erfolgreich war, false sonst.
              Weitere Anmerkungen zu den Profiles sind unter
              \#WritePrivateProfileString\# zu finden.

Querverweise  \#Profile-Routinen\#  \#GetPrivateProfileInt\#
              \#Profiles\#

\end


screen("WritePrivateProfileString":sensitive)
WritePrivateProfileString (Funktion)                 Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function WritePrivateProfileString(AppName,
                        KeyName,Value,FileName: string): boolean;

Beschreibung  Diese Funktion kopiert den durch den Parameter
              Value Åbergebenen String in die durch FileName
              angegebene INF-Datei (z.B. 'MYAPP.INF'). Sie
              sucht die Datei nach der SchlÅsselanweisung ab,
              die durch den Parameter KeyName bestimmt ist,
              der wiederum unter dem Anwendungsnamen AppName
              zu finden ist. Wird keine öbereinstimmung ge-
              funden, fÅgt die Funktion der Datei eine ent-
              sprechende SchlÅsselanweisung (und wenn nîtig
              auch den zugehîrigen Anwendungsnamen) hinzu.
              Ist die SchlÅsselanweisung hingegen vorhanden,
              wird der zugehîrige String durch Value ersetzt.
              Der RÅckgabewert ist true, wenn die Funktion
              erfolgreich war, false sonst (z.B. auch, wenn
              in AppName oder KeyName ein Leerstring Åber-
              geben wird).
              Wird in FileName kein absoluter Pfad Åbergeben,
              wird der Pfad mit \#GetHomeDir\# ermittelt. Existiert
              die Datei noch nicht, wird sie neu angelegt.
              Eine SchlÅsselanweisung kann aus der INF-Datei
              gelîscht werden, indem fÅr Value ein Leerstring
              Åbergeben wird.
              Kommentarzeilen in den Profiles werden mit einem
              Semikolon am Anfang markiert.
							Eine Anwendung sollte eine INF-Datei benutzen,
							wenn irgendwelche Informationen bzgl. der Kon-
							figuration des Programms gespeichert werden
							sollen. Auûerdem haben die Profiles den Vorteil,
							daû die Informationen darin als lesbarer ASCII-
							Text vorliegen, der - wenn es sein muû - auch
							"von Hand" relativ einfach geÑndert werden kann.
							Zum Umkopieren des Profiles wird eine temporÑre
							Datei angelegt, die mit \#GetTempFilename\# ermittelt
							wird.
              Aus SicherheitsgrÅnden wird intern eine
              \#wind_update\#-Schachtelung durchgefÅhrt,
              es sei denn, mit \#OpenPrivateProfile\# wurden die
              Profile-Operationen in den Speicher verlagert
              (was aus GeschwindigkeitsgrÅnden immer zu
              empfehlen ist).
              Ein Beispiel fÅr den Aufbau eines Profiles ist
              unter \#GetPrivateProfileString\# zu finden.

Querverweise  \#Profile-Routinen\#  \#Profiles\#

\end


screen("GetProfileInt":sensitive)
GetProfileInt (Funktion)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetProfileInt(AppName,KeyName: string;
                                      Default: longint): longint;

Beschreibung  Entspricht im wesentlichen \#GetPrivateProfileInt\#,
              abgesehen davon, daû diese Routine immer auf der
              Datei $HOME/user.inf arbeitet.
              Dabei handelt es sich um eine globale Konfigurati-
              onsdatei, Åber die z.Z. gerade diskutiert wird.
              Deshalb ist auch nicht ausgeschlossen, daû sich
              Name, Ort, Inhalt etc. der Datei noch Ñndern!

Querverweise  \#Profile-Routinen\#  \#Profiles\#  \#GetHomeDir\#

\end


screen("GetProfileString":sensitive)
GetProfileString (Funktion)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetProfileString(AppName,KeyName,
                                       Default: string): string;

Beschreibung  Entspricht im wesentlichen \#GetPrivateProfileString\#,
              abgesehen davon, daû diese Routine immer auf der
              Datei $HOME/user.inf arbeitet.
              Dabei handelt es sich um eine globale Konfigurati-
              onsdatei, Åber die z.Z. gerade diskutiert wird.
              Deshalb ist auch nicht ausgeschlossen, daû sich
              Name, Ort, Inhalt etc. der Datei noch Ñndern!

Querverweise  \#Profile-Routinen\#  \#Profiles\#  \#GetHomeDir\#

\end


screen("WriteProfileInt":sensitive)
WriteProfileInt (Funktion)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function WriteProfileInt(AppName,KeyName: string;
                                        Value: longint): boolean;

Beschreibung  Entspricht im wesentlichen \#WritePrivateProfileInt\#,
              abgesehen davon, daû diese Routine immer auf der
              Datei $HOME/user.inf arbeitet.
              Dabei handelt es sich um eine globale Konfigurati-
              onsdatei, Åber die z.Z. gerade diskutiert wird.
              Deshalb ist auch nicht ausgeschlossen, daû sich
              Name, Ort, Inhalt etc. der Datei noch Ñndern!

Querverweise  \#Profile-Routinen\#  \#Profiles\#  \#GetHomeDir\#

\end


screen("WriteProfileString":sensitive)
WriteProfileString (Funktion)                        Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function WriteProfileString(AppName,KeyName,
                                         Value: string): boolean;

Beschreibung  Entspricht grîûtenteils \#WritePrivateProfileString\#,
              abgesehen davon, daû diese Routine immer auf der
              Datei $HOME/user.inf arbeitet.
              Dabei handelt es sich um eine globale Konfigurati-
              onsdatei, Åber die z.Z. gerade diskutiert wird.
              Deshalb ist auch nicht ausgeschlossen, daû sich
              Name, Ort, Inhalt etc. der Datei noch Ñndern!

Querverweise  \#Profile-Routinen\#  \#Profiles\#  \#GetHomeDir\#

\end


screen("rc_intersect":sensitive)
rc_intersect (Funktion)                                Unit \#OProcs\#
------------------------------------------------------------------

Deklaration    function rc_intersect(r1: GRECT;
                                       var r2: GRECT): boolean;

Beschreibung  Gibt true zurÅck, wenn sich die beiden Rechtecke
              r1 und r2 Åberschneiden. Das Schnitt-Rechteck wird
              in r2 zurÅckgegeben, die \#GRECT\#-Struktur wird
              komplett ausgefÅllt (mit beiden Koordinaten-
              angaben).
              Ansonsten wird false zurÅckgegeben und r2
              nicht verÑndert.

Querverweise  \#Rechteck-Routinen\#

\end


screen("A2toGR":sensitive)
A2toGR (Prozedur)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure A2toGR(var r: \#GRECT\#);

Beschreibung  Wandelt die absoluten Koordinaten in Breite und
              Hîhe des Rechtecks um.

Querverweise  \#Rechteck-Routinen\#  \#GRtoA2\#

\end


screen("GRtoA2":sensitive)
GRtoA2 (Prozedur)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure GRtoA2(var r: \#GRECT\#);

Beschreibung  Wandelt Breite und Hîhe des Rechtecks in zwei
              gegenÅberliegende (absolute) Punkte um.

Querverweise  \#Rechteck-Routinen\#  \#A2toGR\#

\end


screen("DtoS":sensitive)
DtoS (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function DtoS(l: longint): string;

Beschreibung  Wandelt ein Datum, das im Format $mmttjjjj vorliegt
              (das sind z.B. die Systemdaten) in einen "lesbaren"
              Datumsstring um. Ist kein _IDT-Cookie vorhanden, hat
              der String immer die Form 'tt.mm.jjjj'. Ansonsten
              wird der Cookie-Wert analysiert, die Bits 11..8
              geben das Datumsformat an:

		             	0:  mm?tt?jjjj
 		            	1:  tt?mm?jjjj
   		          	2:  jjjj?mm?tt
     		        	3:  jjjj?tt?mm

              In den Bits 7..0 ist das Trennzeichen angegeben,
              #0 wird als '/' interpretiert.

Querverweise  \#Versions-Routinen\#

\end


screen("GEMDOSVersion":sensitive)
GEMDOSVersion (Funktion)                               Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GEMDOSVersion: word;

Beschreibung  Gibt die GEMDOS-Version zurÅck.

Querverweise  \#Versions-Routinen\#  \#Sversion\#  \#VtoS\#

\end


screen("GEMVersion":sensitive)
GEMVersion (Funktion)                                Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GEMVersion: word;

Beschreibung  Liefert die GEM-(AES-)Version bzw. Null, wenn kein
              Applikationsobjekt instantiiert wurde.

Querverweise  \#Versions-Routinen\#  \#VtoS\#

\end


screen("MiNTVersion":sensitive)
MiNTVersion (Funktion)                                 Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function MiNTVersion: word;

Beschreibung  Gibt die MiNT-Version zurÅck, wenn dieses instal-
              liert ist, andernfalls Null.

Querverweise  \#Versions-Routinen\#  \#VtoS\#

\end


screen("TOSDate":sensitive)
TOSDate (Funktion)                                     Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function TOSDate: longint;

Beschreibung  Liefert das Datum der verwendeten TOS-Version.

Querverweise  \#Versions-Routinen\#  \#TOSVersion\#  \#DtoS\#

\end


screen("TOSVersion":sensitive)
TOSVersion (Funktion)                                  Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function TOSVersion: word;

Beschreibung  Gibt die verwendete TOS-Version zurÅck.

Querverweise  \#Versions-Routinen\#  \#TOSDate\#  \#VtoS\#

\end


screen("VtoS":sensitive)
VtoS (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function VtoS(w: word): string;

Beschreibung  Wandelt eine Versionsangabe, die im Format $0hll
              vorliegt (das sind z.B. alle von den ObjectGEM-
              Versions-Routinen gelieferten Zahlen), in den
              String 'h.ll' um.

Querverweise  \#Versions-Routinen\#

\end


screen("atof":sensitive)
atof (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function atof(s: string): real;

Beschreibung  Wandelt eine Zeichenkette in eine Flieûkommazahl
              um. Leerzeichen werden automatisch abgeschnitten,
              ein unÑres Plus wird beachtet.

Querverweise  \#Zeichenketten-Routinen\#  \#Val\#  \#ftoa\#

\end


screen("atol":sensitive)
atol (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function atol(s: string): longint;

Beschreibung  Wandelt eine Zeichenkette in eine Integer-Zahl um.
              Leerzeichen werden automatisch abgeschnitten, ein
              unÑres Plus wird beachtet.

Querverweise  \#Zeichenketten-Routinen\#  \#Val\#  \#ltoa\#

\end


screen("ChrDispose":sensitive)
ChrDispose (Prozedur)                                  Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure ChrDispose(var p: PChar);

Beschreibung  Gibt die mit \#ChrNew\# allozierte Zeichenkette wieder
              frei und setzt p auf \#nil\#.

Querverweise  \#Zeichenketten-Routinen\#

\end


screen("ChrNew":sensitive)
ChrNew (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function ChrNew(s: string): PChar;

Beschreibung  Wandelt den String s in eine nullterminierte
              Zeichenkette um und alloziert den benîtigten
              Speicher. Im Gegensatz zu \#StrNew\# wird auch eine
              leere Zeichenkette umgewandelt.
              Als RÅckgabe erhÑlt man einen Pointer auf die
              neue Zeichenkette oder \#nil\#, falls der Speicher
              nicht alloziert werden konnte.
              Darf _nur_ mit \#ChrDispose\# wieder freigegeben
              werden!

Querverweise  \#Zeichenketten-Routinen\#

\end


screen("DisposeStr":sensitive)
DisposeStr (Prozedur)                                  Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure DisposeStr(var p: PString);

Beschreibung  Gibt den mit \#NewStr\# angelegten String wieder frei.

Querverweise  \#Zeichenketten-Routinen\#

\end


screen("ftoa":sensitive)
ftoa (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function ftoa(f: real): string;

Beschreibung  Wandelt eine Flieûkommazahl in einen String um.
              Rechts vom Komma werden alle Nullen abgeschnitten,
              wenn es sich nicht um die einzige Ziffer nach dem
              Komma handelt.

Querverweise  \#Zeichenketten-Routinen\#  \#Str\#  \#atof\#

\end


screen("ltoa":sensitive)
ltoa (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function ltoa(l: longint): string;

Beschreibung  Wandelt eine Integer-Zahl in einen String um.

Querverweise  \#Zeichenketten-Routinen\#  \#Str\#  \#atol\#

\end


screen("NewStr":sensitive)
NewStr (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function NewStr(s: string): PString;

Beschreibung  Legt einen dynamischen String an, es wird ent-
              sprechend viel Speicher alloziert.
              Als RÅckgabe erhÑlt man einen Pointer auf den
              String oder \#nil\#, wenn nicht genug Speicher
              vorhanden ist bzw. in s ein Leerstring Åber-
              geben wurde.

Querverweise  \#Zeichenketten-Routinen\#  \#DisposeStr\#

\end


screen("RPos":sensitive)
RPos (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function RPos(subStr,Str: string): byte;

Beschreibung  Die Funktion RPos sucht einen Teilstring subStr
              rÅckwÑrts in einem String Str. Falls Str den Teil-
              string subStr enthÑlt, liefert RPos als Resultat
              den Index des ersten Åbereinstimmenden Zeichens
              des letzten Vorkommens von subStr in Str, sonst
              Null.

Querverweise  \#Zeichenketten-Routinen\#  \#Pos\#

\end


screen("StrLPas":sensitive)
StrLPas (Funktion)                                     Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrLPas(p: PChar; maxc: integer): string;

Beschreibung  Wandelt die nullterminierte Zeichenkette p in
              einen String um, wobei maximal maxc Zeichen
              Åbernommen werden.

Querverweise  \#Zeichenketten-Routinen\#  \#StrPas\#

\end


screen("StrPLeft":sensitive)
StrPLeft (Funktion)                                    Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPLeft(s: string; c: integer): string;

Beschreibung  Gibt die c linken Zeichen von s zurÅck. Wenn c<=0
              ist, wird ein Leerstring zurÅckgegeben.

Querverweise  \#Zeichenketten-Routinen\#  \#StrPRight\#

\end


screen("StrPRight":sensitive)
StrPRight (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPRight(s: string; c: integer): string;

Beschreibung  Gibt die c rechten Zeichen von s zurÅck. Wenn c<=0
              ist, wird ein Leerstring zurÅckgegeben.

Querverweise  \#Zeichenketten-Routinen\#  \#StrPLeft\#

\end


screen("StrPSpace":sensitive)
StrPSpace (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPSpace(anz: integer): string;

Beschreibung  Gibt eine Zeichenkette zurÅck, die aus anz Leer-
              zeichen besteht. FÅr c<=0 wird ein Leerstring
              zurÅckgegeben.

Querverweise  \#Zeichenketten-Routinen\#

\end


screen("StrPTrim":sensitive)
StrPTrim (Prozedur)                                    Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure StrPTrim(var s: string);

Beschreibung  Schneidet bei dem String s links und rechts alle
              Leerzeichen bzw. ASCII #0 ab.

Querverweise  \#Zeichenketten-Routinen\#  \#StrPTrimF\#

\end


screen("StrPTrimF":sensitive)
StrPTrimF (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPTrimF(s: string): string;

Beschreibung  Gibt den String s zurÅck, bei dem links und rechts
              alle Leerzeichen und ASCII #0 abgeschnitten wurden.

Querverweise  \#Zeichenketten-Routinen\#  \#StrPTrim\#

\end


screen("StrPUpper":sensitive)
StrPUpper (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPUpper(s: string): string;

Beschreibung  Gibt den in Groûbuchstaben umgewandelten String
              s zurÅck. Umlaute werden berÅcksichtigt.

Querverweise  \#Zeichenketten-Routinen\#  \#UpChar\#

\end


screen("UpChar":sensitive)
UpChar (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function UpChar(ch: char): char;

Beschreibung  Wandelt Klein- in Groûbuchstaben um. Im Gegensatz
              zu \#UpCase\# werden die Umlaute berÅcksichtigt!

Querverweise  \#Zeichenketten-Routinen\#  \#StrPUpper\#

\end


screen("StrPLower":sensitive)
StrPLower (Funktion)                                   Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function StrPLower(s: string): string;

Beschreibung  Gibt den in Kleinbuchstaben umgewandelten String
              s zurÅck. Umlaute werden berÅcksichtigt.

Querverweise  \#Zeichenketten-Routinen\#  \#LowChar\#

\end


screen("LowChar":sensitive)
LowChar (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function LowChar(ch: char): char;

Beschreibung  Wandelt Groû- in Kleinbuchstaben um. Umlaute
              werden berÅcksichtigt!

Querverweise  \#Zeichenketten-Routinen\#  \#StrPLower\#

\end


screen("GetQSB":sensitive)
GetQSB (Prozedur)                                    Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure GetQSB(var p: pointer; var len: longint);

Beschreibung  Gibt in p einen Pointer auf den AES-"Quarter Screen
              Buffer" zurÅck, wenn dieser vorhanden ist, sonst ist
              p=\#nil\#. Im Falle der Existenz wird in len die LÑnge
              des Buffers in Bytes angegeben.
              Unter \#MultiTOS\# wird immer \#nil\# zurÅckgegeben, da
              dort das Zugriffsrecht auf den Puffer nicht defi-
              niert ist.

Querverweise  \#Pointer-Routinen\#  \#TApplication.IsQSBUsed\#

\end


screen("GetOSHeaderPtr":sensitive)
GetOSHeaderPtr (Funktion)                              Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function GetOSHeaderPtr: pointer;

Beschreibung  Gibt einen Zeiger auf den OS-Header zurÅck, d.h.
              es wird _sysbase ($4f2) ausgewertet und dann der
              Zeiger os_beg bei Offset $08 geliefert.

Querverweise  \#Pointer-Routinen\#

\end


screen("HiWord":sensitive)
HiWord (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function HiWord(p: pointer): word;

Beschreibung  Gibt das High-Word des Pointers p zurÅck.

Querverweise  \#Pointer-Routinen\#  \#LoWord\#  \#Ptr\#  \#Hi\#

\end


screen("LoWord":sensitive)
LoWord (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function LoWord(p: pointer): word;

Beschreibung  Gibt das Low-Word des Pointers p zurÅck.

Querverweise  \#Pointer-Routinen\#  \#HiWord\#  \#Ptr\#  \#Lo\#

\end


screen("Ptr":sensitive)
Ptr (Funktion)                                         Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Ptr(hi,lo: word): pointer;

Beschreibung  Berechnet aus dem High-Word hi und dem Low-Word
              lo den zugehîrigen Pointer. Ist so eine Art
              Ersatz fÅr die von PP nicht unterstÅtzte Ptr-
              Funktion, allerdings hat diese Implementierung
              volle GÅltigkeit auf 680xx-Prozessoren.

Querverweise  \#Pointer-Routinen\#  \#HiWord\#  \#LoWord\#

\end


screen("Between":sensitive)
Between (Funktion)                                     Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Between(x,min,max: longint): boolean;

Beschreibung  Gibt an, ob sich der Wert x zwischen min und max
              befindet (inklusive).

\end


screen("bTst":sensitive)
bTst (Funktion)                                        Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function bTst(value,mask: longint): boolean;

Beschreibung  Gibt an, ob die Bits, die in mask gesetzt sind,
              auch in value gesetzt sind.

Querverweise  \#TControl.IsFlagSet\#

\end


screen("IsDesktopActive":sensitive)
IsDesktopActive (Funktion)                           Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsDesktopActive: boolean;

Beschreibung  Gibt true zurÅck, wenn der GEM-Desktop z.Z. aktiv
              ist, d.h. wenn keine andere Applikation gestartet
              ist. Dazu wird unter einem Singletasking-TOS die
              lokale GEMDOS-Variable act_pd (auf die p_run zeigt)
              ausgewertet.
              Unter \#MultiTOS\# wird mit \#appl_find\# der aktuelle
              Prozeû ermittelt und mit der Systemshell, die mit
              \#appl_search\# bestimmt wird, verglichen.

\end


screen("MapKey":sensitive)
MapKey (Funktion)                                      Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function MapKey(Key: word): word;

Beschreibung  Dient zur LÑnder-unabhÑngigen Auswertung der
              Tastatur. Wird intern vom \#TDialog\#-Keyboard-
              Handler benutzt. Die Funktion Ñndert eine
              VDI-Taste (RÅckgabe von z.B. \#evnt_keybd\#) in
              ein word-groûes, codiertes Zeichen:

              HighByte LowByte
              -------- -------    ACLR sind Shift-Status-Bits
              SxxxACLR CHARCODE = ASCII-(S=0) oder Scan(S=1)-Code

              Die Routine stammt ursprÅnglich von
              Ken Badertscher (Atari).

Querverweise  ST/STE/TT-Profibuch  \#Tastatur-Werte\#

\end


screen("Max_fn")
Max (Funktion)                                         Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Max(a,b: longint): longint;

Beschreibung  Gibt die grîûere Zahl von a und b zurÅck.

Querverweise  \link("Min_fn")Min\#

\end


screen("Min_fn")
Min (Funktion)                                         Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Min(a,b: longint): longint;

Beschreibung  Gibt die kleinere Zahl von a und b zurÅck.

Querverweise  \link("Max_fn")Max\#

\end


screen("Sgn":sensitive)
Sgn (Funktion)                                         Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   function Sgn(x: longint): integer;

Beschreibung  Dies ist die sog. Signum-Funktion, d.h. die
              RÅckgabe ist -1 fÅr x<0, 0 fÅr x=0 und 1 fÅr x>0.

Querverweise  \#Abs\#

\end


screen("Abstract":sensitive)
Abstract (Prozedur)                                    Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure Abstract;

Beschreibung  Ein Aufruf dieser Prozedur beendet das Programm
              mit dem Laufzeitfehler 211 ("Call to abstract
              method"). Wird ein abstrakter Objekttyp implemen-
              tiert, sollte man Aufrufe von Abstract in den-
              jenigen virtuellen Methoden einsetzen, die von
              Nachkommen des Typs neu definiert werden _mÅssen_.
              Dies stellt sicher, daû jeder Versuch fehlschlÑgt,
              den abstrakten Objekttyp zu instantiieren.

Querverweise  \#TSortedCollection.Compare\#

\end


screen("appl_yield":sensitive)
appl_yield (Prozedur)                                  Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure appl_yield;

Beschreibung  Gibt anderen Prozessen (Accessories) Rechenzeit ab,
              wenn z.B. eine langwierige Berechnung durchgefÅhrt
              wird. Intern wird \#evnt_timer\#(1,0) aufgerufen.

\end


screen("form_box":sensitive)
form_box (Prozedur)                                    Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure form_box(flag: integer; r: \#GRECT\#);

Beschreibung  Zeichnet sich grîûer werdende bzw. schrumpfende
              Rechtecke mittels \#form_dial\#. In r wird das
              Rechteck bei seiner grîûten Ausdehnung Åber-
              geben, die kleinste Ausdehnung berechnet form_box
              als Mittelpunkt des groûen Rechtecks. FÅr flag
              kînnen die Werte \#FMD_GROW\# und \#FMD_SHRINK\# Åber-
              geben werden.

\end


screen("GetDesk":sensitive)
GetDesk (Prozedur)                                     Unit \#OProcs\#
------------------------------------------------------------------

Deklaration   procedure GetDesk(var r: \#GRECT\#);

Beschreibung  Gibt in r die Koordinaten des Fensters 0, d.h.
              des Desktops zurÅck. In r liegen danach beide
              Koordinatenangaben vor.

\end


screen("Records")
Record-Typen                                             \#ObjectGEM\#
------------------------------------------------------------------

  \#APPLRECORD\#
  \#GRECT\#
  \#INFOXSSI\#
  \#LongRec\#
  \#TCookie\#
  \#TEventData\#
  \#TGEMAttr\#
  \#TIconWndClass\#
  \#TMenuEntries\#
  \#TMenuEntry\#
  \#TMetaInfo\#
  \#TPaintStruct\#
  \#TRsFile\#
  \#TScrollBarTransferRec\#
  \#TWindowAttr\#
  \#TWndClass\#
  \#TXAccAttr\#
  \#WordRec\#
  \#XBRA\#

\end


screen("APPLRECORD":sensitive,"PAPPLRECORD":sensitive,"Typ":sensitive,
       "What":sensitive,"Long":sensitive,"What.Long":sensitive,
       "What.Hi":sensitive,"What.Lo":sensitive,"APPLRECORD.Typ":sensitive,
       "APPLRECORD.What":sensitive,"APPLRECORD.What.Long":sensitive,
       "APPLRECORD.What.Hi":sensitive,"APPLRECORD.What.Lo":sensitive,
       "AT_TIMER":sensitive,"AT_BUTTON":sensitive,"AT_MOUSE":sensitive,
       "AT_KEYBD":sensitive)
APPLRECORD (Record)                                    Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PAPPLRECORD = ^APPLRECORD;
              APPLRECORD  = record
                              Typ: longint;
                              What: record
                                      case boolean of
                                        false: (Long: longint);
                                        true:  (Hi,Lo: word)
                                    end
                            end;

Beschreibung  Dient zum Speichern von Benutzeraktionen bei
              \#appl_trecord\# und \#appl_tplay\#. Folgende Aktionen
              sind mîglich:

                Typ      Wert  What
                ------------------------------------------------
                AT_TIMER    0  Anzahl der verstrichenen Milli-
                               sekunden
                AT_BUTTON   1  Status der Maustaste im unteren
                               Wort (0: nicht gedrÅckt, 1: ge-
                               drÅckt); Anzahl der Klicks im
                               oberen Wort
                AT_MOUSE    2  X/Y-Koordinaten (oberes/unteres
                               Wort)
                AT_KEYBD    3  eingegebenes Zeichen (unteres
                               Wort); Status der Umschalttasten
                               (oberes Wort)

Querverweise  \#TPopup.Execute\#  ST/STE/TT-Profibuch

\end


screen("GRECT":sensitive,"PGRECT":sensitive,"GRECT.A1":sensitive,"GRECT.A2":sensitive,
       "g_x":sensitive,"g_y":sensitive,"g_w":sensitive,"g_h":sensitive,
       "X":sensitive,"Y":sensitive,"W":sensitive,"H":sensitive,"A1":sensitive,
       "X1":sensitive,"Y1":sensitive,"X2":sensitive,"Y2":sensitive,"A2":sensitive,
       "GRECT.g_x":sensitive,"GRECT.g_y":sensitive,"GRECT.g_w":sensitive,"GRECT.g_h":sensitive,
       "GRECT.X":sensitive,"GRECT.Y":sensitive,"GRECT.W":sensitive,"GRECT.H":sensitive,
       "GRECT.X1":sensitive,"GRECT.Y1":sensitive,"GRECT.X2":sensitive,"GRECT.Y2":sensitive)
GRECT (Record)                                         Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PGRECT = ^GRECT;
              GRECT  = record
                         case integer of
                           0: (g_x,g_y,g_w,g_h    : integer);
                           1: (X,Y,W,H,X1,Y1,X2,Y2: integer);
                           2: (A1,A2              : ARRAY_4)
                       end;

Beschreibung  EnthÑlt die Grîûe eines Bildschirmrechtecks.
              X und Y geben die linke obere Ecke des Rechtecks
              an, W und H die Breite und Hîhe. In X1..Y2 kînnen
              die beiden gegenÅberliegenden Eckpunkte als abso-
              lute Koordinaten gespeichert werden (die meisten
              ObjectGEM-Routinen speichern beide Arten).
              In A1 und A2 sind die relativen bzw. die absoluten
              Koordinaten zusammengefaût. g_x..g_h sind nur aus
              KompatibilitÑtsgrÅnden zur ursprÅnglichen C-
              Deklaration vorhanden.

Querverweise  \#Rechteck-Routinen\#

\end


screen("INFOXSSI":sensitive,"PINFOXSSI":sensitive,"INFOXSSI.id":sensitive,
       "save_stat":sensitive,"prg_stat":sensitive,"INFOXSSI.version":sensitive,
       "INFOXSSI.save_stat":sensitive,"INFOXSSI.prg_stat":sensitive,
       "vec_stat":sensitive,"INFOXSSI.vec_stat":sensitive)
INFOXSSI (Record)                                      Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PINFOXSSI = ^INFOXSSI;
              INFOXSSI  = record
                            id       : longint;
                            version  : word;
                            save_stat,
                            prg_stat : integer;
                            vec_stat : longint
                          end;

Beschreibung  Bildschirmschoner, die das "eXtended ScreenSaver
              Interface" unterstÅtzen, richten einen XSSI-Cookie
              ein, der auf eine INFOXSSI-Struktur zeigt.
              id enthÑlt die Kennung des Bildschirmschoners; fÅr
              den Aufbau einer solchen Kennung gilt dasselbe wie
              fÅr XBRA-Kennungen (BeforeDawn: 'DAWN', TwiLight:
              'DATL', midnight: 'midn'). In version findet man
              die unterstÅtzte XSSI-Version ($0100 oder $0101).
              save_stat gibt an, ob gerade geschont wird (_nega-
              tiver_ Wert) oder nicht (0). Applikationen kînnen
              so evtl. ihre Grafikausgabe anhalten.
              Mit prg_stat kann ein Programm dem Bildschirm-
              schoner eine Mitteilung schicken:

                 0: ganz normal schonen
                 1: sofort _aufhîren_ zu schonen
                -1: sofort aktiv werden

              vec_stat (ab Version 1.01) ist ein Bitfeld, in dem
              der Status der einzelnen Åberwachten Vektoren ein-
              getragen ist (Bit gesetzt=aktiv):

								Bit 0: Tastatur
								    1: Maus
								    2: Joystick
								    3: MIDI
								    4: Modem 1
								    5: Modem 2
								    6: Serial 1
								    7: Serial 2
								 8-14: Reserviert
								   15: Grafik in MenÅzeile unterdrÅcken (Uhren)
								   16: AES-Grafikausgaben Åberwachen
								17,18: GrafikÅberwachung:
								         00: Durchlassen
								         01: UnterdrÅcken
								         10: öberwachen (bei Grafik aufwachen)
								         11: reserviert
								19,20: TextÅberwachung (GEMDOS und VDI);
								       Bits entsprechend der GrafikÅberwachung
								21-31: Reserviert

              Im Moment wird die Struktur noch nicht benîtigt,
              es ist jedoch nicht ausgeschlossen, daû ObjectGEM
              spÑter evtl. den XSSI-Cookie automatische beachtet
              und auswertet.

Querverweise  midnight- bzw. BeforeDawn-Dokumentation

\end


screen("LongRec":sensitive,"PLongRec":sensitive,"LongRec.Hi":sensitive,"LongRec.Lo":sensitive)
LongRec (Record)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PLongRec = ^LongRec;
              LongRec  = record
                           Hi,Lo: word
                         end;

Beschreibung  Ein Hilfs-Record, der den Zugriff auf das hîher-
              und niederwertige Wort eines \#longint\#s ermîglicht.

Querverweise  \#WordRec\#

\end


screen("TCookie":sensitive,"PCookie":sensitive,"Val":sensitive,
       "TCookie.ID":sensitive,"TCookie.Val":sensitive)
TCookie (Record)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PCookie = ^TCookie;
              TCookie = record
                          ID:  \#TCookieID\#;
                          Val: longint
                        end;

Beschreibung  EnthÑlt einen kompletten CookieJar-Eintrag. Dieser
              besteht aus einer (hoffentlich) eindeutigen Kennung
              und einem Wert, der z.B. als Pointer auf eine zuge-
              hîrige Struktur oder fÅr eine Versionsnummer genutzt
              werden kann.
              Der CookieJar nimmt eine Art programmspezifische
              "Systemvariablen" auf, die von vielen Tools instal-
              liert werden. Applikationen werten diese Variablen
              normalerweise nur aus.

Querverweise  \#Cookie-Routinen\#  ST/STE/TT-Profibuch

\end


screen("TEventData":sensitive,"PEventData":sensitive,
       "Pipe":sensitive,"mX":sensitive,"mY":sensitive,"Clicks":sensitive,
       "BStat":sensitive,"KStat":sensitive,"Key":sensitive,
       "TEventData.Pipe":sensitive,"TEventData.mX":sensitive,"TEventData.mY":sensitive,"TEventData.Clicks":sensitive,
       "TEventData.BStat":sensitive,"TEventData.KStat":sensitive,"TEventData.Key":sensitive)
TEventData (Record)                                    Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PEventData = ^TEventData;
              TEventData = record
                             Pipe       : \#Pipearray\#;
                             mX,mY      : integer;
                             BStat,KStat: integer;
                             Key,Clicks : integer
                           end;

Beschreibung  Dieser Record wird von \#TApplication.GetEvent\# und
              von allen von \#TApplication.MessageLoop\# aufgerufenen
              Methoden zur DatenÅbergabe genutzt. Er enthÑlt alle
              wichtigen RÅckgabewerte von \#evnt_multi\#.
              Pipe nimmt eine komplette GEM-Message auf. In mX
              und mY wird die Mausposition, in BStat die gedrÅckte
              Maustaste (1=links, 2=rechts) und in Clicks die An-
              zahl der Mausklicks gespeichert. KStat enthÑlt den
              Status der Umschalttasten, Key den eigentlichen
              Tastencode.
              Je nach aufgetretenem Ereignis werden nicht immer
              alle Felder gleichzeitig gefÅllt.

Querverweise  \#MapKey\#

\end


screen("TPaintStruct":sensitive,"PPaintStruct":sensitive,
       "fErase":sensitive,"feColor":sensitive,"rcPaint":sensitive,
       "TPaintStruct.fErase":sensitive,"TPaintStruct.feColor":sensitive,"TPaintStruct.rcPaint":sensitive)
TPaintStruct (Record)                                  Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PPaintStruct = ^TPaintStruct;
              TPaintStruct = record
                               fErase : boolean;
                               feColor: \#HBrush\#;
                               rcPaint: \#GRECT\#
                             end;

Beschreibung  Diese Struktur wird von \#TWindow.WMRedraw\# ausgefÅllt
              und von \#TWindow.Paint\# ausgewertet.
              fErase gibt an, ob der Fensterhintergrund vor dem
              Aufruf der Paint-methode gelîscht wurde (d.h.
              \#Class.hbrBackground\# ist grîûer als Null). feColor
              enthÑlt dann die entsprechende Farbe.
              rcPaint ist das wohl wichtigste Feld, in ihm wird
              nÑmlich der neu zu zeichnende Bereich Åbergeben.

\end


screen("TRsFile":sensitive,"PRsFile":sensitive,"rsh":sensitive,
       "rsd":sensitive,"TRsFile.rsh":sensitive,"TRsFile.rsd":sensitive,
       "RSHDR":sensitive,"RSHDRPtr":sensitive)
TRsFile (Record)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PRsFile = ^TRsFile;
              TRsFile = record
                          case boolean of
                            false: (rsh: RSHDR);
                            true:  (rsd: array [0..65535] of byte)
                        end;

Beschreibung  Mit diesem Record kann entweder komfortabel auf den
              Header einer Resource-Datei oder aber auf jedes
              einzelne Byte dieser Datei zugegriffen werden.
              Der Header ist in der Unit Gem folgendermaûen
              deklariert:

                RSHDRPtr = ^RSHDR;
                RSHDR    = record
                             rsh_vrsn   : word;
                             rsh_object : word;
                             rsh_tedinfo: word;
                             rsh_iconblk: word;
                             rsh_bitblk : word;
                             rsh_frstr  : word;
                             rsh_string : word;
                             rsh_imdata : word;
                             rsh_frimg  : word;
                             rsh_trindex: word;
                             rsh_nobs   : word;
                             rsh_ntree  : word;
                             rsh_nted   : word;
                             rsh_nib    : word;
                             rsh_nbb    : word;
                             rsh_nstring: word;
                             rsh_nimages: word;
                             rsh_rssize : word
                           end;

              Die Struktur wird ObjectGEM-intern verwendet und
              braucht normalerweise anderweitig nicht verwendet
              werden.

Querverweise  ST/STE/TT-Profibuch

\end


screen("TScrollBarTransferRec":sensitive,"PScrollBarTransferRec":sensitive,
       "LowValue":sensitive,"HighValue":sensitive,"Position":sensitive,
       "TScrollBarTransferRec.LowValue":sensitive,"TScrollBarTransferRec.HighValue":sensitive,
       "TScrollBarTransferRec.Position":sensitive)
TScrollBarTransferRec (Record)                         Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PScrollBarTransferRec = ^TScrollBarTransferRec;
              TScrollBarTransferRec = record
                                        LowValue : longint;
                                        HighValue: longint;
                                        Position : longint
                                      end;

Beschreibung  Speichert den Bereich und die Position einer Bild-
              laufleiste (Slider). Wird fÅr den Datentransfer-
              mechanismus verwendet.

Querverweise  \#TScrollBar.Transfer\#  \#TScrollBar.SetRange\#

\end


screen("TXAccAttr":sensitive,"PXAccAttr":sensitive,"TXAccAttr.Version":sensitive,
       "TXAccAttr.Name":sensitive,"TXAccAttr.apID":sensitive,"TXAccAttr.menuID":sensitive,
       "MsgGroups":sensitive,"AppTypeMR":sensitive,"AppTypeHR":sensitive,"Protocol":sensitive,
       "ExtFeatures":sensitive,"GenericName":sensitive,"pXDSC":sensitive,"AVSrvMsg":sensitive,"AVAccMsg":sensitive,
       "TXAccAttr.MsgGroups":sensitive,"TXAccAttr.AppTypeMR":sensitive,"TXAccAttr.AppTypeHR":sensitive,
       "TXAccAttr.ExtFeatures":sensitive,"TXAccAttr.GenericName":sensitive,"TXAccAttr.pXDSC":sensitive,
       "TXAccAttr.Protocol":sensitive,"TXAccAttr.AVSrvMsg":sensitive,"TXAccAttr.AVAccMsg":sensitive,
       "PROTO_XACC":sensitive,"PROTO_AV":sensitive,"TAppTypeMR":sensitive,"PAppTypeMR":sensitive)
TXAccAttr (Record)                                     Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PXAccAttr = ^TXAccAttr;
              TXAccAttr = record
								Version,
								MsgGroups,
								Protocol   : byte;
								AppTypeMR  : TAppTypeMR; (s.u.)
								AppTypeHR,
								ExtFeatures,
								GenericName,
								Name       : PString;
								apID,
								menuID     : integer;
								AVSrvMsg,
								AVAccMsg   : word;
								pXDSC      : PChar
							end;

Beschreibung  EnthÑlt die Beschreibung einer Applikation mit
              allen fÅr das XAcc-Protokoll wichtigen Daten.
              Version bezeichnet die Programmversion und kann
              beliebig gesetzt werden. MsgGroups enthÑlt eine
              Bitmap der verstandenen XAcc-Message-Groups.
              Bit 0 entspricht Gruppe 1 und umfaût die Messages
              \#ACC_TEXT\# und \#ACC_KEY\#. Bit 1 entspricht Gruppe 2
              mit den Messages \#ACC_META\# und \#ACC_IMG\#.
              Protocol ist eine Bitmap der unterstÅtzten Proto-
              kolle, z.Z. kînnen PROTO_XACC (Bit 0) und PROTO_AV
              (Bit 1) eingetragen sein.
              In Name ist der (XAcc-)Name des Programms ge-
              speichert, der nichts mit dem Dateinamen zu tun
              haben muû! apID und menuID geben AES-Kennung und
              die Nummer des Desk-MenÅeintrags an.
              AppTypeMR gibt den maschinenlesbaren Programmtyp
              an (s.u.), AppTypeHR den dazugehîrigen "menschen-
              lesbaren". Wenn AppTypeHR nicht angegeben ist,
              versucht ObjectGEM diesen aus AppTypeMR zu er-
              mitteln.
              ExtFeatures enthÑlt zusÑtzliche Eigenschaften
              einer Applikation. Diese sind nicht genormt und
              kînnen daher nur von Programmen ausgewertet werden,
              die sich gegenseitig "kennen".
              GenericName gibt den sog. generischen Namen einer
              Applikation an. Dieser kann z.B. dann gesetzt
              werden, wenn Programme mit gleicher FunktionalitÑt
              verschiedene Namen benutzen, aber irgendwie als
              zusammengehîrig erkannt werden mÅssen.
              pXDSC ist ein Zeiger auf die "Extended names"
              einer Applikation. Die Auswertung ist aber nur
              dann nîtig, wenn mehr als ein "extended feature"
              benîtigt wird, da ObjectGEM nur das erste Feature
              in ExtFeatures eintrÑgt. Der genaue XDSC-Aufbau
              ist in der XAcc-Dokumentation beschrieben. Wenn
              keine "Extended names" vorhanden sind, ist pXDSC
              \#nil\#!
              Folgende maschinenlesbaren Programmtypen sind
              bisher definiert:
              
              	WP   Textverarbeitung
              	DP   DTP
              	ED   Texteditor
              	DB   Datenbank
              	SS   Tabellenkalkulation
              	RG   Rastergrafikprogramm
              	VG   Vektorgrafikprogramm
              	GG   allgemeines Grafikprogramm
              	MU   Musikanwendung
              	CD   CAD
              	DC   Datenkommunikation
              	DT   Desktop
              	PE   Programmierumgebung

              AVSrvMsg und AVAccMsg werden fÅr Applikationen be-
              nutzt, die das AV-Protokoll unterstÅtzen. Je nach-
              dem, ob der Record den Server oder ein anderes AV-
              Accessory beschreibt, ist der jeweils andere Wert
              Null. Die Bits in AVSrvMsg haben folgende Bedeutung
              (gesetztes Bit=Message wird verstanden):

              	   1  \#AV_SENDKEY\#
              	   2  \#AV_ASKFILEFONT\#
                   4  \#AV_ASKCONFONT\#, \#AV_OPENCONSOLE\#
              	   8  \#AV_ASKOBJECT\#
              	  16  \#AV_OPENWIND\#
              	  32  \#AV_STARTPROG\#
              	  64  \#AV_ACCWINDOPEN\#, \#AV_ACCWINDCLOSED\#
              	 128  \#AV_STATUS\#, \#AV_GETSTATUS\#
              	 256  \#AV_COPY_DRAGGED\#
              	 512  \#AV_PATH_UPDATE\#, \#AV_WHAT_IZIT\#,
              	      \#AV_DRAG_ON_WINDOW\#
              	1024  \#AV_EXIT\#

              Die Bits in AVAccMsg bedeuten folgendes:

              	   1  \#VA_SETSTATUS\#
              	   2  \#VA_START\#

              Wenn eine Applikation nur das AV-Protokoll unter-
              stÅtzt, werden die XAcc-spezifischen Parameter
              ausgenullt; wenn beide Protokolle vorhanden sind,
              haben die Werte des XAcc-Protokolls PrioritÑt
              (z.B. der Name).
              
              TAppTypeMR ist definiert als

                type PAppTypeMR = ^TAppTypeMR;
                     TAppTypeMR = string[2];


Querverweise  \#TApplication.XAcc\#       \#TApplication.XAccList\#
              \#XAcc- und AV-Protokoll\#  \#TApplication.AVServer\#

\end


screen("WordRec":sensitive,"PWordRec":sensitive,"WordRec.Hi":sensitive,"WordRec.Lo":sensitive)
WordRec (Record)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PWordRec = ^WordRec;
              WordRec  = record
                           Hi,Lo: byte
                         end;

Beschreibung  Ein Hilfs-Record, der den Zugriff auf das hîher-
              und niederwertige Byte eines \#word\#s ermîglicht.

Querverweise  \#LongRec\#

\end


screen("XBRA":sensitive,"PXBRA":sensitive,
       "xb_magic":sensitive,"xb_id":sensitive,"xb_oldvec":sensitive,
       "XBRA.xb_magic":sensitive,"XBRA.xb_id":sensitive,"XBRA.xb_oldvec":sensitive)
XBRA (Record)                                          Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PXBRA = ^XBRA;
              XBRA  = record
                        xb_magic : array [0..3] of char;
                        xb_id    : array [0..3] of char;
                        xb_oldvec: pointer
                      end;

Beschreibung  Speicherresidente, vektorverbiegende Programme
              setzen das sog. XBRA-Verfahren ein, um z.B. dop-
              pelte Installationen zu verhindern oder sich
              wieder deinstallieren zu kînnen.
              GEM-Applikationen werten diese Struktur, die
              unmittelbar vor der neuen Adresse des verbogenen
              Vektors zu finden ist, - wenn Åberhaupt - nur
              aus.
              xb_magic muû die Zeichenkette "XBRA" ($58425241)
              enthalten. xb_id enthÑlt die Kennung des verbie-
              genden Programms, die aus "druckbaren" ASCII-
              Zeichen bestehen sollte. In xb_oldvec schlieûlich
              ist der alte Vektor gespeichert.

Querverweise  ST/STE/TT-Profibuch

\end


screen("Typen")
Typen                                                    \#ObjectGEM\#
------------------------------------------------------------------

  \#HBrush\#
  \link("thcursor")HCursor\#
  \#HWnd\#
  \#IterationFunc\#
  \#IterationProc\#
  \#Pipearray\#
  \#TByteArray\#
  \#TCharSet\#
  \#TCookieID\#
  \#THandle\#
  \#TItemList\#
  \#TPicResult\#
  \#TWordArray\#

  \link("einfache_Typen")einfache Datentypen\#

\end


screen("einfache_Typen","Bool":sensitive,"PBool":sensitive,"PStr":sensitive,
       "PBoolean":sensitive,"PByte":sensitive,"PInteger":sensitive,
       "PLongint":sensitive,"PObj":sensitive,"PPointer":sensitive,
       "PShort":sensitive,"PString":sensitive,"PTree":sensitive,
       "PWord":sensitive)
Einfache Datentypen                                    Unit \#OTypes\#
------------------------------------------------------------------

  type
    PBoolean = ^boolean;
    PByte    = ^byte;
    PInteger = ^integer;
    PLongint = ^longint;
    PObj     = \#AESOBJECTPtr\#;
    PPointer = ^pointer;
    PShort   = ^shortint;
    PString  = ^string;
    PTree    = \#AESTreePtr\#;
    PWord    = ^word;


  Folgende Typen sind aus KompatibilitÑtsgrÅnden zu BorlandPascal
  bzw. Windows/ObjectWindows vorhanden:

    PBool = ^Bool;
    Bool  = word;    word-Boolean (von PurePascal _nicht_
                                               unterstÅtzt)
    PStr  = \#PChar\#;

\end


screen("THandle":sensitive)
THandle (Typ)                                          Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   THandle = longint;

Beschreibung  THandle definiert einen generischen Handle-Typ.
              WICHTIG: Unter ObjectWindows ist dieser als _word_
              deklariert!

Querverweise  \#HBrush\#  \link("thcursor")HCursor\#  \#HWnd\#

\end


screen("HWnd":sensitive)
HWnd (Typ)                                             Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   HWnd = \#THandle\#;

Beschreibung  Wird zur Speicherung der ObjectGEM-internen Kennung
              eines jeden Fensterobjekts verwendet.

Querverweise  \#TWindowAttr.Handle\#  \#TApplication.GetPWindow\#
                                  \#TApplication.InvalidateRect\#

\end


screen("thcursor")
HCursor (Typ)                                          Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   HCursor = \#THandle\#;

Beschreibung  Speichert eine Mausform. Dabei kann es sich um eine
              Konstante (\#ARROW\# etc.) handeln, oder aber um einen
              Pointer (Wert>$7fff), der auf eine \#MFORM\#-Struktur
              zeigt.

Querverweise  \#TWndClass.hCursor\#

\end


screen("HBrush":sensitive)
HBrush (Typ)                                           Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   HBrush = \#THandle\#;

Beschreibung  Wird zur Speicherung eines "Zeichenstiftes" ver-
              wendet. Im Moment ist dies ein VDI-Farbindex, mit
              dem eine FlÑche gefÅllt wird. SpÑter werden hier-
              mit aber evtl. auch verschiedene Muster etc.
              verwaltet.

Querverweise  \#TWndClass.hbrBackground\#  \#TPaintStruct.feColor\#

\end


screen("Pipearray":sensitive,"PPipearray":sensitive)
Pipearray (Typ)                                        Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PPipearray = ^Pipearray;
              Pipearray  = ARRAY_8;

Beschreibung  Dies ist ein Array von 8 integer-Werten, das zur
              Speicherung einer GEM-Message verwendet wird. FÅr
              die Nachrichten existiert eine Konvention Åber
              die Belegung der einzelnen Felder:

                [0]: Nachrichtennummer
                [1]: Nummer (\link("TApplication.apID")apID\#) des Absenders
                [2]: Anzahl der Bytes, die noch nachtrÑglich
                     per \#appl_read\# gelesen werden mÅssen
                     (siehe \#TApplication.MessageBuffer\#)

              Feld 2 enthÑlt normalerweise eine Null. Die
              Belegung der anderen Felder hÑngt von der ver-
              schickten Nachricht ab.

Querverweise  \#TEventData.Pipe\#  ST/STE/TT-Profibuch

\end


screen("IterationProc":sensitive,"PIterationProc":sensitive)
IterationProc (Typ)                                    Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PIterationProc = ^IterationProc;
              IterationProc  = procedure(p: pointer);

Beschreibung  Wird von \#ForEach\# und \#ForEachWnd\# als Standardtyp
              fÅr die aufzurufende Prozedur verwendet.

Querverweise  \#IterationFunc\#

\end


screen("IterationFunc":sensitive,"PIterationFunc":sensitive)
IterationFunc (Typ)                                    Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PIterationFunc = ^IterationProc;
              IterationFunc  = function(p: pointer): boolean;

Beschreibung  Wird von \#FirstThat\#, \#LastThat\# und \#FirstWndThat\# als
              Standardtyp fÅr die aufzurufende Funktion verwendet.

Querverweise  \#IterationProc\#

\end


screen("TItemList":sensitive,"PItemList":sensitive,"MaxCollectionSize":sensitive)
TItemList (Typ)                                        Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PItemList = ^TItemList;
              TItemList = array [0..MaxCollectionSize-1]
                                                of pointer;

Beschreibung  Ein Array von generischen Zeigern, die intern von
              \#TCollection\#-Objekten verwendet werden. Im Gegen-
              satz zu ObjectWindows kînnen allerdings wesentlich
              mehr Elemente gespeichert werden!
              MaxCollectionSize ist festgelegt als

								const MaxCollectionSize = 536870911;

Querverweise  \#TCollection.Items\#

\end


screen("TCookieID":sensitive,"PCookieID":sensitive)
TCookieID (Typ)                                        Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PCookieID = ^TCookieID;
              TCookieID = array [0..3] of char;

Beschreibung  Dies ist der Datentyp fÅr eine CookieJar-Kennung.
              Bei der Belegung sollte man folgendes beachten:

               - Mit "_" beginnende Kennungen sind fÅr Atari
                 reserviert
               - Die vier Buchstaben sollten "druckbar" sein, d.h.
                 ASCII-Codes zwischen 32 und 126, keine nationalen
                 Sonderzeichen!
               - Die Buchstaben sollten eine AbkÅrzung ergeben,
                 aus der man auf das zugehîrige Programm schlieûen
                 kann. Varianten der Wîrter "Cookie", "Vector"
                 u.Ñ. gehîren _nicht_ dazu!

Querverweise  \#TCookie\#  ST/STE/TT-Profibuch

\end


screen("TCharSet":sensitive,"PCharSet":sensitive)
TCharSet (Typ)                                         Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PCharSet = ^TCharSet;
              TCharSet = set of char;

Beschreibung  Wird von \#TFilterValidator\# zur Speicherung der
              gÅltigen Zeichen verwendet.

\end


screen("TByteArray":sensitive,"PByteArray":sensitive)
TByteArray (Typ)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PByteArray = ^TByteArray;
              TByteArray = array [0..maxlongint-1] of byte;

Beschreibung  Ein universeller Byte-Array-Typ; kann z.B. zum
              Typecasting bei Pointern verwendet werden.

Querverweise  \#TWordArray\#

\end


screen("TWordArray":sensitive,"PWordArray":sensitive)
TWordArray (Typ)                                       Unit \#OTypes\#
------------------------------------------------------------------

Deklaration   PWordArray = ^TWordArray;
              TWordArray = array [0..1073741822] of word;

Beschreibung  Ein universeller Word-Array-Typ; kann z.B. zum
              Typecasting bei Pointern verwendet werden.

Querverweise  \#TByteArray\#

\end


screen("TTextWindow":sensitive,"PTextWindow":sensitive)
TTextWindow                                          Unit \#OStdWnds\#
------------------------------------------------------------------

TTextWindow ist ein Fensterobjekt, das Textzeilen anzeigen kann.
Der Benutzer kann vollautomatisch durch den Text scrollen (auch
mit den Åblichen Tastaturshortcuts), eine weitergehende Be-
arbeitung ist aber nicht mîglich.

	Pointer
		PTextWindow = ^TTextWindow;

	Felder
		\#Color\#
		\#FontID\#
		\#FontSize\#
		\#Lines\#
		\#RealTabs\#
		\#TabSize\#

	Methoden
		\link("TTextWindow.Init")Init\#
		\link("TTextWindow.Done")Done\#
		\#AddLine\#
		\link("TTextWindow.Clear")Clear\#
		\link("TTextWindow.Copy")Copy\#
		\link("TTextWindow.Cut")Cut\#
		\#DeleteLine\#
		\#ExitPrint\#
		\link("TTextWindow.GetClassName")GetClassName\#
		\#GetLine\#
		\#GetLineLength\#
		\#GetNumLines\#
		\link("TTextWindow.GetScroller")GetScroller\#
		\link("TTextWindow.GetStyle")GetStyle\#
		\link("TTextWindow.GetWindowClass")GetWindowClass\#
		\#InitPrint\#
		\#InsertLine\#
		\link("TTextWindow.Paint")Paint\#
		\link("TTextWindow.Paste")Paste\#
		\link("TTextWindow.Print")Print\#
		\#PrintFilter\#
		\#Read\#
		\link("TTextWindow.SelectAll")SelectAll\#
		\link("TTextWindow.SetColor")SetColor\#
		\#SetFont\#
		\link("TTextWindow.SetupVDI")SetupVDI\#
		\#UpdateSubTitle\#

	Vorfahre
		\#TWindow\#
	Nachfahre
		\#TEditWindow\#

\end


screen("TTextWindow.Color":sensitive,"Color":sensitive)
TTextWindow.Color (Feld)                             Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   Color: integer;  (nur lesen)

Beschreibung  EnthÑlt den Farbindex fÅr die Textzeilen. Wird von
              \#TTextWindow.GetScroller\# auf \#Black\# gesetzt.
              Wenn man einen neuen Farbindex setzt, muû man danach
              ein Neuzeichnen des Fensterinhalts veranlassen.

Querverweise  \#TTextWindow\#  \#TTextWindow.SetColor\#

\end


screen("TTextWindow.FontID":sensitive,"FontID":sensitive)
TTextWindow.FontID (Feld)                            Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   FontID: integer;  (nur lesen)

Beschreibung  EnthÑlt die ID des aktuellen Fonts. Wird von der
              Methode \#TTextWindow.GetScroller\# auf den ersten
              Systemfont initialisiert und kann mit der Methode
              \#TTextWindow.SetFont\# geÑndert werden.

Querverweise  \#TTextWindow\#  \#TTextWindow.FontSize\#

\end


screen("TTextWindow.FontSize":sensitive,"FontSize":sensitive)
TTextWindow.FontSize (Feld)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   FontSize: integer;  (nur lesen)

Beschreibung  Gibt die Grîûe des aktuellen Fonts an (in Punkten).
              Wird von \#TTextWindow.GetScroller\# auf 10 initiali-
              siert und kann mit \#TTextWindow.SetFont\# geÑndert
              werden.

Querverweise  \#TTextWindow\#  \#TTextWindow.FontID\#

\end


screen("TTextWindow.Lines":sensitive,"Lines":sensitive)
TTextWindow.Lines (Feld)                             Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   Lines: \#PStrCollection\#;  (nur lesen)

Beschreibung  Mit dieser Kollektion werden die Textzeilen ver-
              waltet. Zum Setzen bzw. Auswerten der Zeilen
              sollten nach Mîglichkeit _nicht_ die Kollektions-
              sondern die speziellen TTextWindow-Methoden ver-
              wendet werden.
              Wird von \#TTextWindow.Init\# angelegt.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.RealTabs":sensitive,"RealTabs":sensitive)
TTextWindow.RealTabs (Feld)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   RealTabs: boolean;

Beschreibung  Dieses Feld wird von \#TTextWindow.Init\# auf true ge-
              setzt, d.h. Tabulatoren (\#HT\#) werden von der Methode
              \#TTextWindow.TabXpand\# in die entsprechende Anzahl
              Leerzeichen umgewandelt.
              Andernfalls werden nur die Tab-Zeichen angezeigt.

Querverweise  \#TTextWindow\#  \#TTextWindow.TabSize\#

\end


screen("TTextWindow.TabSize":sensitive,"TabSize":sensitive)
TTextWindow.TabSize (Feld)                           Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   TabSize: integer;

Beschreibung  Gibt die von \#TTextWindow.TabXpand\# benîtigte Tabula-
              torweite an. Wird von \#TTextWindow.Init\# auf 2 ge-
              setzt.

Querverweise  \#TTextWindow\#  \#TTextWindow.RealTabs\#

\end


screen("TTextWindow.Init":sensitive)
TTextWindow.Init (Methode)                           Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PWindow; ATitle: string;
                                 InitLines,ADelta: integer);

Beschreibung  Ruft den Vorfahren \#TWindow.Init\# auf. Danach wird
              die Kollektion \#Lines\# mit den Werten InitLines und
              ADelta erzeugt. Der erste Parameter gibt also die
              maximal mîgliche Anzahl von Zeilen an (die stÑndig
              Speicherplatz belegen), die notfalls um ADelta er-
              hîht wird.
              Hat die Initialisierung funktioniert, wird zum
              Schluû noch \#UpdateSubTitle\# aufgerufen und
              \#RealTabs\#, \#TabSize\# und \#ws_ex_ReadOnly\# werden
              gesetzt.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.Done":sensitive)
TTextWindow.Done (Methode)                           Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  Gibt die Kollektion in \#Lines\# frei und ruft dann den
              Vorfahren \#TWindow.Done\# auf.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.SetupVDI":sensitive)
TTextWindow.SetupVDI (Methode)                       Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure SetupVDI; virtual;

Beschreibung  Setzt die passenden Textattribute und ruft dann
              den Vorfahren \#TWindow.SetupVDI\# auf.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.AddLine":sensitive,"AddLine":sensitive)
TTextWindow.AddLine (Methode)                        Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure AddLine(NewLine: string); virtual;

Beschreibung  HÑngt eine Zeile am Ende des Textes an.

Querverweise  \#TTextWindow\#  \#TTextWindow.InsertLine\#

\end


screen("TTextWindow.DeleteLine":sensitive,"DeleteLine":sensitive)
TTextWindow.DeleteLine (Methode)                     Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure DeleteLine(LineNumber: integer); virtual;

Beschreibung  Lîscht die Zeile mit der Nummer LineNumber (0 bis
              \#GetNumLines\#-1).

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.ExitPrint":sensitive,"ExitPrint":sensitive)
TTextWindow.ExitPrint (Methode)                      Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure ExitPrint; virtual;

Beschreibung  Wird von \#TTextWindow.Print\# aufgerufen, nachdem alle
              Textzeilen gedruckt wurden. Z.Z. wird hier ein
              Seitenvorschub durchgefÅhrt und dem Drucker zum
              Schluû noch ein \#BEL\# gesendet.

Querverweise  \#TTextWindow\#  \#TTextWindow.InitPrint\#

\end


screen("TTextWindow.GetClassName":sensitive)
TTextWindow.GetClassName (Methode)                   Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetClassName: string; virtual;

Beschreibung  Gibt 'TextWindow' zurÅck.

Querverweise  \#TTextWindow\#  \#TWindow.GetClassName\#

\end


screen("TTextWindow.GetLine":sensitive,"GetLine":sensitive)
TTextWindow.GetLine (Methode)                        Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetLine(LineNumber: integer): string;
                                                        virtual;

Beschreibung  Liefert die Zeile LineNumber (0 bis \#GetNumLines\#-1).
              Ist LineNumber nicht gÅltig, wird ein Leerstring
              zurÅckgegeben.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.GetLineLength":sensitive,"GetLineLength":sensitive)
TTextWindow.GetLineLength (Methode)                  Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetLineLength
                         (LineNumber: integer): integer; virtual;

Beschreibung  Gibt die LÑnge der Zeile LineNumber zurÅck. Intern
              wird dazu \#TTextWindow.GetLine\# aufgerufen.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.GetNumLines":sensitive,"GetNumLines":sensitive)
TTextWindow.GetNumLines (Methode)                    Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetNumLines: integer; virtual;

Beschreibung  Gibt die Anzahl der vorhandenen Zeilen zurÅck,
              d.h. \#Lines\#^.\#Count\#. Dieser Methode sollte aller-
              dings Vorrang gegeben werden.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.GetScroller":sensitive)
TTextWindow.GetScroller (Methode)                    Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetScroller: PScroller; virtual;

Beschreibung  Liefert ein \#TScroller\#-Objekt zurÅck. Auûerdem wird
              \#SetFont\# aufgerufen und \#Color\# gesetzt.
              FÅr ein optimiertes Redraw wird \#scs_BitbltScrolling\#
              gesetzt.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.GetStyle":sensitive)
TTextWindow.GetStyle (Methode)                       Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function GetStyle: integer; virtual;

Beschreibung  Gibt \#TWindow.GetStyle\# zurÅck, lîscht daraus aber
              \#INFO\# und fÅgt \#SLIDER\# hinzu.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.InitPrint":sensitive,"InitPrint":sensitive)
TTextWindow.InitPrint (Methode)                      Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure InitPrint; virtual;

Beschreibung  Wird von \#TTextWindow.Print\# aufgerufen, bevor die
              eigentlichen Textzeilen gedruckt werden. Im Moment
              passiert hier nichts, man kînnte in dieser Methode
              aber z.B. den Drucker initialisieren.

Querverweise  \#TTextWindow\#  \#TTextWindow.ExitPrint\#

\end


screen("TTextWindow.InsertLine":sensitive,"InsertLine":sensitive)
TTextWindow.InsertLine (Methode)                     Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure InsertLine(Index: longint;
                                    NewLine: string); virtual;

Beschreibung  FÅgt eine neue Zeile _vor_ der Zeile mit der Nummer
              Index ein. Ist Index kleiner gleich Null, wird die
              Zeile am Anfang des Textes eingefÅgt; ist Index
              grîûer gleich \#GetNumLines\#, wird sie am Ende des
              Textes angehÑngt.

Querverweise  \#TTextWindow\#  \#TTextWindow.AddLine\#

\end


screen("TTextWindow.Paint":sensitive)
TTextWindow.Paint (Methode)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Paint(var PaintInfo: TPaintStruct);
                                                      virtual;

Beschreibung  Zeigt den Text im Fenster an. Im Moment wird auch
              beim zeilenweisen Scrollen der komplette Fenster-
              inhalt neu gezeichnet, fÅr die Zukunft kann man
              aber eine optimiertere Lîsung erwarten.

Querverweise  \#TTextWindow\#  \#TTextWindow.TabXpand\#

\end


screen("TTextWindow.SetFont":sensitive,"SetFont":sensitive)
TTextWindow.SetFont (Methode)                        Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure SetFont(NewID,NewSize: integer); virtual;

Beschreibung  Setzt \#FontID\# und \#FontSize\# neu, wobei die Åbergebenen
              Werte evtl. korrigiert werden. Anschlieûend werden
              die Slider aktualisiert.
              Wird von \#TTextWindow.GetScroller\# aufgerufen.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.SetColor":sensitive)
TTextWindow.SetColor (Methode)                       Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure TTextWindow.SetColor(NewColor: integer);
                                                         virtual;

Beschreibung  Setzt die Textfarbe, die in \#Color\# abgefragt
              werden kann.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.UpdateSubTitle":sensitive,"UpdateSubTitle":sensitive)
TTextWindow.UpdateSubTitle (Methode)                 Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure UpdateSubTitle; virtual;

Beschreibung  Aktualisiert die Info-Zeile (sofern vorhanden).
              Z.Z. wird darin nur die Anzahl der Zeilen angezeigt.
              Wird von allen Methoden aufgerufen, die die Anzahl
              der Textzeilen verÑndern.

Querverweise  \#TTextWindow\#  \#TTextWindow.GetStyle\#
                           \#TTextWindow.GetNumLines\#

\end


screen("TTextWindow.GetWindowClass":sensitive)
TTextWindow.GetWindowClass (Methode)                 Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure GetWindowClass(var AWndClass: TWndClass);
                                                          virtual;

Beschreibung  Lîscht \#cs_QuitOnClose\# aus \#Class.Style\#, d.h. die
              Applikation wird beim Schlieûen des Fensters nicht
              beendet.
              \#cs_ByteAlignClient\# wird gesetzt, damit das Scrolling
              beschleunigt wird.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.TabXpand":sensitive,"TabXpand":sensitive)
TTextWindow.TabXpand (Methode)                       Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function TabXpand(s: string): string; virtual;

Beschreibung  Wandelt Tabulatorzeichen in s in die entsprechende
              Anzahl Leerzeichen um, wenn \#TTextWindow.RealTabs\#
              true ist. Ansonsten wird s zurÅckgegeben.

Querverweise  \#TTextWindow\#  \#TTextWindow.TabSize\#

\end


screen("TTextWindow.Read":sensitive,"Read":sensitive)
TTextWindow.Read (Methode)                           Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Read(AFileName: string); virtual;

Beschreibung  FÅgt die Textdatei AFileName an das Ende des Textes
              an, wenn die Datei existiert. Der alte Text wird
              also _nicht_ gelîscht!
              Anschlieûend wird das Fenster neu gezeichnet.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.Cut":sensitive)
TTextWindow.Cut (Methode)                            Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Cut; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<X>
              drÅckt. Macht z.Z. noch nichts.

Querverweise  \#TTextWindow\#  \#TTextWindow.Copy\#  \#TTextWindow.Paste\#
              \link("Clipboard-Verwaltung")Klemmbrett\#

\end


screen("TTextWindow.Copy":sensitive)
TTextWindow.Copy (Methode)                           Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Copy; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<C>
              drÅckt. Macht z.Z. noch nichts.

Querverweise  \#TTextWindow\#  \#TTextWindow.Cut\#  \#TTextWindow.Paste\#
              \link("Clipboard-Verwaltung")Klemmbrett\#

\end


screen("TTextWindow.Paste":sensitive)
TTextWindow.Paste (Methode)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Paste; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<V>
              drÅckt.
              Wenn sich im \link("Clipboard-Verwaltung")Klemmbrett\# eine Datei SCRAP.TXT oder
              SCRAP.ASC befindet, wird diese an den Text im
              Fenster angehÑngt.
              Wenn \#ws_ex_ReadOnly\# gesetzt ist, kann keine Paste-
              Operation durchgefÅhrt werden.

Querverweise  \#TTextWindow\#  \#TTextWindow.Cut\#  \#TTextWindow.Copy\#

\end


screen("TTextWindow.SelectAll":sensitive)
TTextWindow.SelectAll (Methode)                      Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure SelectAll; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<A>
              drÅckt. Macht z.Z. noch nichts.

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.Clear":sensitive)
TTextWindow.Clear (Methode)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Clear; virtual;

Beschreibung  Lîscht den gesamten Text des Fensters _ohne_
              Sicherheitsabfrage!

Querverweise  \#TTextWindow\#

\end


screen("TTextWindow.Print":sensitive)
TTextWindow.Print (Methode)                          Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   procedure Print; virtual;

Beschreibung  Wird aufgerufen, wenn der Benutzer <Control>+<P>
              drÅckt. Nach einer Sicherheitsabfrage wird der
              gesamte Text auf der parallelen Schnittstelle
              ausgedruckt.

Querverweise  \#TTextWindow\#  \#TTextWindow.PrintFilter\#

\end


screen("TTextWindow.PrintFilter":sensitive,"PrintFilter":sensitive)
TTextWindow.PrintFilter (Methode)                    Unit \#OStdWnds\#
------------------------------------------------------------------

Deklaration   function PrintFilter(s: string): string; virtual;

Beschreibung  Wird von \#TTextWindow.Print\# fÅr jede zu druckende
              Zeile aufgerufen. Hier kînnen dann bestimmte Zeichen
              aus s ausgefiltert, geÑndert etc. werden.
              StandardmÑûig wird der Atari-Zeichensatz auf den
              IBM- (bzw. Epson-) Druckerzeichensatz abgebildet.

Querverweise  \#TTextWindow\#

\end


screen("TClipboard":sensitive,"PClipboard":sensitive)
TClipboard                                           Unit \#OWindows\#
------------------------------------------------------------------

TClipboard regelt den Zugriff auf das globale AES-Klemmbrett.
Eine Beschreibung findet sich unter \#Clipboard-Verwaltung\#.

	Pointer
		PClipboard = ^TClipboard;

	Felder
		\link("TClipboard.Parent")Parent\#

	Methoden
		\link("TClipboard.Init")Init\#
		\#CloseClipboard\#
		\#EmptyClipboard\#
		\#GetClipboardFilename\#
		\#GetPriorityClipboardFormat\#
		\#IsClipboardFormatAvailable\#
		\#IsOpen\#
		\#OpenClipboard\#
		\#SetClipboardFormat\#

	Vorfahre
		\#TObject\#
	Nachfahre
		---

\end


screen("TClipboard.Parent":sensitive)
TClipboard.Parent (Feld)                             Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   Parent: PObject;  (nur lesen)

Beschreibung  EnthÑlt einen Zeiger auf das besitzende Objekt.
              Wird von \#TClipboard.Init\# gesetzt.

Querverweise  \#TClipboard\#

\end


screen("TClipboard.Init":sensitive)
TClipboard.Init (Methode)                            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PObject);

Beschreibung  Ruft zunÑchst den Vorfahren \#TObject.Init\# auf,
              danach wird \link("TClipboard.Parent")Parent\# auf AParent gesetzt.

Querverweise  \#TClipboard\#

\end


screen("TClipboard.CloseClipboard":sensitive,"CloseClipboard":sensitive)
TClipboard.CloseClipboard (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function CloseClipboard: boolean; virtual;

Beschreibung  Schlieût das Klemmbrett und gibt es damit wieder
              frei. Wenn schreibend zugegriffen wurde, wird
              anschlieûend eine \#SC_CHANGED\#-Message verschickt.
              Damit diese korrekt gesetzt wird, sollte vorher
              \#SetClipboardFormat\# aufgerufen werden.
              Wenn das Klemmbrett geschlossen werden konnte,
              wird true zurÅckgegeben.
              ZusÑtzlich werden eine \#SH_WDRAW\#- und \#AV_PATH_UPDATE\#-
              Message verschickt, wenn das Klemmbrett verÑndert
              wurde.

Querverweise  \#TClipboard\#  \#TClipboard.IsOpen\#  \#TApplication.SHWDraw\#

\end


screen("TClipboard.EmptyClipboard":sensitive,"EmptyClipboard":sensitive)
TClipboard.EmptyClipboard (Methode)                  Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function EmptyClipboard: boolean; virtual;

Beschreibung  Lîscht alle 'SCRAP.*'-Dateien im Klemmbrett. Wenn
              das Klemmbrett anschlieûend leer ist, wird true
              zurÅckgegeben und \#SetClipboardFormat\#(\#SCF_INDEF\#,'')
              aufgerufen.
              Wird von \#TClipboard.OpenClipboard\# aufgerufen.

Querverweise  \#TClipboard\#  \#TClipboard.IsOpen\#

\end


screen("TClipboard.GetClipboardFilename":sensitive,"GetClipboardFilename":sensitive)
TClipboard.GetClipboardFilename (Methode)            Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetClipboardFilename: string; virtual;

Beschreibung  Gibt den Pfad und Dateinamen (ohne Extension) des
              Klemmbretts zurÅck (z.B. 'C:\\CLIPBRD\\SCRAP.')
              oder einen Leerstring, wenn das Clipboard-Objekt
              keine Zugriffsberechtigung besitzt.

Querverweise  \#TClipboard\#  \#TClipboard.IsOpen\#

\end


screen("TClipboard.GetPriorityClipboardFormat":sensitive,"GetPriorityClipboardFormat":sensitive)
TClipboard.GetPriorityClipboardFormat (Methode)      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function GetPriorityClipboardFormat
                          (PriorityList: string): string; virtual;

Beschreibung  Sucht in einer Liste von Extensions (durch Punkte
              getrennt) die Extension heraus, die im Klemmbrett
              vorhanden ist und in der Liste am weitesten links
              steht. Wenn also nur die Datei 'SCRAP.ASC' im 
              Klemmbrett vorhanden ist und mit 'TXT.ASC.TEX' als
              Liste gesucht wird, erhÑlt man als RÅckgabe 'ASC'.

Querverweise  \#TClipboard\#  \#TClipboard.IsClipboardFormatAvailable\#
                          \#TClipboard.IsOpen\#

\end


screen("TClipboard.IsClipboardFormatAvailable":sensitive,"IsClipboardFormatAvailable":sensitive)
TClipboard.IsClipboardFormatAvailable (Methode)      Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsClipboardFormatAvailable
                             (Format: string): boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn die Datei mit der Extension
              Format (mit oder ohne Punkt) im Klemmbrett vorhanden
              ist.
              Falls das Clipboard-Objekt keine Zugriffsberechti-
              gung besitzt, wird immer false zurÅckgegeben.

Querverweise  \#TClipboard\#  \#TClipboard.GetPriorityClipboardFormat\#
                          \#TClipboard.IsOpen\#

\end


screen("TClipboard.IsOpen":sensitive,"IsOpen":sensitive)
TClipboard.IsOpen (Methode)                          Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function IsOpen: boolean; virtual;

Beschreibung  Gibt true zurÅck, wenn das Klemmbrett mit der
              Methode \#TClipboard.OpenClipboard\# geîffnet werden
              konnte, false sonst.

Querverweise  \#TClipboard\#

\end


screen("TClipboard.OpenClipboard":sensitive,"OpenClipboard":sensitive)
TClipboard.OpenClipboard (Methode)                   Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   function OpenClipboard(Write: boolean): boolean;
                                                        virtual;

Beschreibung  Holt die Zugriffsberechtigung fÅr das Klemmbrett.
              Wenn schreibend zugegriffen werden soll, muû in
              Write true Åbergeben werden - dann wird auûerdem
              \#EmptyClipboard\# aufgerufen.
              Wenn noch kein Pfad fÅr das Klemmbrett existiert,
              wird ein geeigneter ermittelt und global gesetzt.
              Dazu werden nicht nur die Systemfunktionen benutzt,
              sondern auch die Environmentvariablen CLIPBRD und
              SCRAPDIR abgefragt.
              Konnte das Klemmbrett geîffnet werden, wird true
              zurÅckgegeben, ansonsten (wenn z.B. eine andere
              Applikation das Klemmbrett belegt) false.

Querverweise  \#TClipboard\#  \#TClipboard.CloseClipboard\#

\end


screen("TClipboard.SetClipboardFormat":sensitive,"SetClipboardFormat":sensitive)
TClipboard.SetClipboardFormat (Methode)              Unit \#OWindows\#
------------------------------------------------------------------

Deklaration   procedure SetClipboardFormat(Mask: word;
                                         Ext: string); virtual;

Beschreibung  Wenn auf das Klemmbrett schreibend zugegriffen
              wurde, sollte mit dieser Methode der geschriebene
              Dateityp gesetzt werden (wird in Ext - mit oder
              ohne Punkt - Åbergeben). In Mask wird eine der
              \#SCF_XXXX-Konstanten\# eingetragen.
              Wenn in Ext kein Leerstring Åbergeben wird,
              wird nîtigenfalls ein Punkt vor die Extension
              gesetzt und die Zeichenkette mit Nullbytes
              aufgefÅllt.
              Wenn man in Mask \#SCF_INDEF\# und in Ext einen
              Leerstring Åbergibt, zeigt man damit an, daû
              das Klemmbrett gelîscht wurde (wird u.a. von
              \#EmptyClipboard\# genutzt).

Querverweise  \#TClipboard\#  \#TClipboard.CloseClipboard\#

\end


screen("TComboBox":sensitive,"PComboBox":sensitive)
TComboBox                                            Unit \#ODialogs\#
------------------------------------------------------------------

TComboBox ist das Dialogelementobjekt fÅr Popup-MenÅs innerhalb
von Dialogen. Das Objekt kÅmmert sich automatisch um die Abar-
beitung des Popups und eines evtl. damit verknÅpften TEdit-
Objekts. Um die ComboBox kontextsensitiv zu gestalten, muû
die Methode \link("TComboBox.Work")Work\# Åberschrieben werden.

	Pointer
		PComboBox = ^TComboBox;

	Felder
		\link("TComboBox.Edit")Edit\#
		\link("TComboBox.Popup")Popup\#

	Methoden
		\link("TComboBox.Init")Init\#
		\link("TComboBox.Done")Done\#
		\link("TComboBox.Changed")Changed\#
		\#GetEdit\#
		\link("TComboBox.GetSelection")GetSelection\#
		\link("TComboBox.GetText")GetText\#
		\link("TComboBox.Paint")Paint\#
		\link("TComboBox.SetSelection")SetSelection\#
		\link("TComboBox.SetText")SetText\#
		\link("TComboBox.TestIndex")TestIndex\#
		\link("TComboBox.Transfer")Transfer\#
		\link("TComboBox.Work")Work\#

	Vorfahre
		\#TControl\#
	Nachfahre
		---

\end


screen("TComboBox.Edit":sensitive)
TComboBox.Edit (Feld)                                Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   Edit: \#PEdit\#;  (nur lesen)

Beschreibung  Wird von \#TComboBox.Init\# mit \#GetEdit\# belegt, wenn
              das Popup-MenÅ mit einem Eingabefeld verknÅpft
              werden soll.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Popup":sensitive)
TComboBox.Popup (Feld)                               Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   Popup: PPopup;  (nur lesen)

Beschreibung  Zeigt auf das \#TPopup\#-Objekt der ComboBox. Wird von
              \#TComboBox.Init\# gesetzt.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Init":sensitive)
TComboBox.Init (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   constructor Init(AParent: PDialog; AnIndx,CycleIndx,
                                TitleIndx,ptIndx,popIndx: integer;
                            Cycle,Editable: boolean; Hlp: string);

Beschreibung  Zuerst wird der Vorfahre \#TControl.Init\#(AParent,
              AnIndx,Hlp) aufgerufen. Wenn Editable true ist,
              wird \link("TComboBox.Edit")Edit\# danach mit \#GetEdit\# belegt, ansonsten
              zeigt Edit auf \#nil\#. Danach werden die internen
              Variablen angepaût und zum Schluû \#SetSelection\#(0)
              aufgerufen.
              In AnIndx wird der Index des Popup-Wert-Elements
              Åbergeben. Das ist das Element, das immer mit der
              aktuellen Auswahl sichtbar ist. Wenn in Editable
              true Åbergeben wird, muû dieses Element ein edi-
              tierbares Objekt sein.
              In CycleIndx wird das Element Åbergeben, mit dem
              der Popup-Wert um eins weiter geschaltet wird bzw.
              mit dem das Popup-MenÅ geîffnet wird, je nachdem
              ob Cycle true oder false ist. Dieses Objekt sollte
              vom Typ \#G_BOXCHAR\# sein, damit dort \#Attr.PopChar\#
              eingetragen werden kann.
              TitleIndx bezeichnet das Objekt, das vor dem
              Popup-Wert-Objekt steht; dies ist quasi der Titel
              oder die Beschreibung des Popups. In diesem String
              kann auch ein Hotkey (wie Åblich mit '&') festge-
              legt werden.
              ptIndx und popIndx bezeichnen schlieûlich das
              Popup-MenÅ an sich, der Aufbau ist unter \#TPopup\#
              beschrieben.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Done":sensitive)
TComboBox.Done (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   destructor Done; virtual;

Beschreibung  \link("TComboBox.Popup")Popup\# und \link("TComboBox.Edit")Edit\# werden freigegeben, danach wird der
              Vorfahre \#TControl.Done\# aufgerufen.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Changed":sensitive)
TComboBox.Changed (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Changed(AnIndx: integer;
                                 DblClick: boolean); virtual;

Beschreibung  In dieser Methode findet die gesamte Abarbeitung
              der ComboBox statt. Durch \link("TComboBox.TestIndex")TestIndex\# wird diese
              Methode bei Anwahl jedes Objektes, das mit dem
              Popup verknÅpft ist, aufgerufen.
              Wurde die aktuelle Auswahl des Popups geÑndert,
              wird anschlieûend \link("TComboBox.Work")Work\# aufgerufen.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.GetEdit":sensitive,"GetEdit":sensitive)
TComboBox.GetEdit (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetEdit: PEdit; virtual;

Beschreibung  Liefert ein \#TEdit\#-Objekt zurÅck, wenn ein solches
              mit der ComboBox verknÅpft werden soll. Dazu wird
              diese Methode von \#TComboBox.Init\# abgefragt.
              Wenn man ein "besonderes" (d.h. abgeleitetes) Ein-
              gabefeld haben mîchte, muû man diese Methode Åber-
              schreiben und ein entsprechendes Objekt zurÅck-
              geben.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.GetSelection":sensitive)
TComboBox.GetSelection (Methode)                     Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetSelection: integer; virtual;

Beschreibung  Gibt die Nummer (>=0) der aktuellen Auswahl des
              Popups zurÅck.

Querverweise  \#TComboBox\#  \#TComboBox.SetSelection\#

\end


screen("TComboBox.GetText":sensitive)
TComboBox.GetText (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function GetText: string; virtual;

Beschreibung  Liefert die aktuelle Auswahl des Popups als
              Zeichenkette. Wenn die ComboBox mit einem Eingabe-
              feld verknÅpft ist, wird \link("TComboBox.Edit")Edit\#^.\link("TStatic.GetText")GetText\# zurÅckge-
              geben.

Querverweise  \#TComboBox\#  \#TComboBox.SetText\#

\end


screen("TComboBox.Paint":sensitive)
TComboBox.Paint (Methode)                            Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Paint; virtual;

Beschreibung  Zeichnet den Titel, das Wert-Element und den Cycle-
              Button neu. Wenn ein Eingabefeld mit der ComboBox
              verknÅpft ist, wird intern \link("TComboBox.Edit")Edit\#^.\link("TEdit.Paint")Paint\# aufgerufen.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.SetSelection":sensitive)
TComboBox.SetSelection (Methode)                     Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetSelection(Sel: integer); virtual;

Beschreibung  Setzt die Auswahl des Popups auf den Index Sel
              (>=0), wobei die Anzeige etc. automatisch
              aktualisiert wird.

Querverweise  \#TComboBox\#  \#TComboBox.GetSelection\#

\end


screen("TComboBox.SetText":sensitive)
TComboBox.SetText (Methode)                          Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure SetText(ATextString: string); virtual;

Beschreibung  Setzt den Text des Wert-Element (\link("TControl.ObjIndx")ObjIndx\#) auf
              ATextString. Wenn ein Eingabefeld mit der Combo-
              Box verknÅpft ist, wird dazu \link("TComboBox.Edit")Edit\#^.\link("TEdit.SetText")SetText\# auf-
              gerufen.
              WICHTIG: Der Index der Popup-Markierung wird
              _nicht_ angepaût, wenn der neue String mit einer
              Zeichenkette des Popups Åbereinstimmt! Dies muû
              mit \link("TComboBox.SetSelection")SetSelection\# geschehen (bzw. wird intern
              automatisch durchgefÅhrt).

Querverweise  \#TComboBox\#  \#TComboBox.GetText\#

\end


screen("TComboBox.TestIndex":sensitive)
TComboBox.TestIndex (Methode)                        Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function TestIndex(AnIndx: integer): boolean;
                                                      virtual;

Beschreibung  Gibt true zurÅck, wenn eines der ComboBox-Elemente
              (\link("TControl.ObjIndx")ObjIndx\# [=Wert], Title, Cycle-Button) angewÑhlt
              wurde.
              ObjIndx wird allerdings nur ausgewertet, wenn \link("TComboBox.Edit")Edit\#
              nicht belegt ist, d.h. wenn die ComboBox mit keinem
              Eingabefeld verknÅpft ist.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Transfer":sensitive)
TComboBox.Transfer (Methode)                         Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   function Transfer(DataPtr: pointer;
                             TransferFlag: word): word; virtual;

Beschreibung  öbertrÑgt Daten vom bzw. in das Objekt. Der genaue
              Aufbau der Struktur ist unter \#TransferBuffer\# be-
              schrieben.

Querverweise  \#TComboBox\#

\end


screen("TComboBox.Work":sensitive)
TComboBox.Work (Methode)                             Unit \#ODialogs\#
------------------------------------------------------------------

Deklaration   procedure Work; virtual;

Beschreibung  Dies ist eine abstrakte Methode, die zunÑchst
              nichts macht. Sie wird aber bei jeder WertÑnderung
              des Popups aufgerufen, so daû hiermit z.B. andere
              Buttons kontextsensitiv gemacht werden kînnen.

Querverweise  \#TComboBox\#  \#TComboBox.Changed\#

\end
